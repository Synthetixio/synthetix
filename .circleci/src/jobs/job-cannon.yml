# Builds a testing chain which is used for integration tests and downstream projects
{{> job-header-machine.yml}}
steps:
  # get foundry
  - restore_cache:
      keys:
        - foundry-bin-latest-${foundry_cache_version}
  - rust/install: {}
  - run:
      name: "Run IPFS"
      working_directory: ~/
      environment:
        SHELL: /bin/bash
      command: |-
        wget https://dist.ipfs.io/go-ipfs/v0.9.0/go-ipfs_v0.9.0_linux-amd64.tar.gz
        tar -xvzf go-ipfs_v0.9.0_linux-amd64.tar.gz
        sudo bash go-ipfs/install.sh
        ipfs init
        ipfs config Addresses.Gateway /ip4/0.0.0.0/tcp/8087
        ipfs daemon
      background: true
  - cmd-wait-for-port:
      port: 5001
  - run:
      command: |-
        ipfs --version
  - run: 
        name: "Install Foundry"
        working_directory: ~/
        environment:
          SHELL: /bin/bash
        command: |-
            export PATH="$PATH:$HOME/.foundry/bin"
            echo 'export PATH=$PATH:$HOME/.foundry/bin' >> $BASH_ENV

            if command -v anvil; then
              echo "Anvil already installed"
              anvil --version
            else
              curl -L https://foundry.paradigm.xyz | bash
              foundryup
            fi
            rm -rf *

  - save_cache:
      key: foundry-bin-latest-${foundry_cache_version}
      paths:
        - ~/.foundry/bin

  - checkout
  - attach_workspace:
      at: .
  - run: npx hardhat compile --optimizer --fail-oversize
  - run: node publish build --test-helpers
  - run: npx hardhat --network cannon cannon:build cannonfile.aggregator.toml
  - run: npx hardhat --network cannon cannon:build
  - persist_to_workspace:
      root: .
      paths:
        - build
        - cannon
        - publish/deployed
