* Automatically liquidate if collateralisation is below 1:1
* Split fees for purchase versus sale?

* Staleness adjustments:
	- solve the trust problem of just setting low stale period and then liquidating
    - perhaps staleness protection for sell() is deactivated during the liquidation period
    - additionally make staleness predictable by emitting an event on update, and then requiring the current period to elapse before the stale period is actually changed.
    - rate limiting?

* Consider whether people emptying the collateral by hedging is a problem:
    Having no fee is effectively offering a short position for free. But if the volatility of ether is ~10% a day or so
    then a 10% fee required to make betting on it unprofitable is probably too high to get people to actually buy these things for their intended purpose.
    Probably can add a time lock for selling nomins back to the system, but it's awkward, and just makes the futures contract
    slightly longer term.

* Re-verify that ERC20 compliant as per https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
* Compare with linked token implementations (zeppelin, consensys, minime).
* http://populus.readthedocs.io/en/latest/gotchas.html
* Factor out functionality into proxy contract for upgrades.
* Fee distribution
* Consensys best practices compliance.
* Solium lint.
* Invariants produced for every function
* Test suite.
* Wrapping protection
	- 30% participation required
	- 70% quorum required
	- minimum three days
	- subject to veto (lifted in later versions)
* Gas optimisation

* make sure the buy/sell fee is settable.

* Work out if we can add a fee field to Transfer events and still be ERC20 compliant

* Ensure that denominators can never be zero.
* Remove bool returns and just throw inside ERC20FeeToken.sol
* ERC777
* Update fee rollover period time thingo
* Havven events
* Work out whether events should have indexed parameters.