* Staleness adjustments:
	- solve the trust problem of just setting low stale period and then liquidating
    - perhaps staleness protection for sell() is deactivated during the liquidation period
    - additionally make staleness predictable by emitting an event on update, and then requiring the current period to elapse before the stale period is actually changed.
    - rate limiting?

* Consider whether people emptying the collateral by hedging is a problem:
    Having no fee is effectively offering a short position for free. But if the volatility of ether is ~10% a day or so
    then a 10% fee required to make betting on it unprofitable is probably too high to get people to actually buy these things for their intended purpose.
    Probably can add a time lock for selling nomins back to the system, but it's awkward, and just makes the futures contract
    slightly longer term.

FEATURES
========
* Automatically liquidate if collateralisation is below 1:1
* Update fee rollover period time on state-modifying updates to nomin and havven contracts.
* get it compiling
* Events for everything
* Factor out functionality into proxy contract for upgrades.
* Determine what should occur when fee period duration is changed.

CLEANUP
=======
* Convert ints to a shared enum type in the vote stuff.
* Gas optimisation
* rename "CollateralisedNomin"? (subject to Kain's approval)
* Check unchecked sends and so on
* Split fees for purchase versus sale?
* ERC20 non-fee version for havvens to inherit from
* make sure everything that should be settable has a setter
* make sure everything that should be SDable is SDable
* make sure everything that needs an event has one
* Work out whether events should have indexed parameters or not.
* "Using for" statements where they make sense
* Fix licence headers
* Structs where they make sense
* Check that all calls out to other contracts are checked and handled in case of failure.
* Ensure that denominators can never be zero.
* Nomenclature.
* Documentation on members
* Documentation on functions
* Documentation on files
* Add units where it makes sense
* tabs to spaces
* Work out if we can add a fee field to Transfer events and still be ERC20 compliant
* ERC777 (if backwards compatible with ERC20)

VALIDATION
==========
* Test suite.
* Ensure that timestamp dependency is not a problem, but if it is, switch to block numbers.
* Ensure functions correspond to correct state transitions in confiscation court
* Fee distribution
* Consensys best practices compliance.
* Solium lint.
* Invariants produced for every function
* mystake security suggestions
* etherscan.io bugs
* Compare with linked token implementations (zeppelin, consensys, minime).
* http://populus.readthedocs.io/en/latest/gotchas.html
* Re-verify that ERC20 compliant as per https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
