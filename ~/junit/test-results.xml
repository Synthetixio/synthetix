<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Mocha Tests" time="2317.1370" tests="3309" failures="1" skipped="7">
  <testsuite name="Root Suite" timestamp="2022-02-04T17:04:34" tests="0" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Contract: AddressResolver" timestamp="2022-02-04T17:04:34" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/AddressResolver.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="importAddresses()" timestamp="2022-02-04T17:04:34" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/AddressResolver.js" time="0.0000" failures="0">
    <testcase name="Contract: AddressResolver importAddresses() can only be invoked by the owner" time="0.7660" classname="can only be invoked by the owner">
    </testcase>
  </testsuite>
  <testsuite name="when a different number of names are given to addresses" timestamp="2022-02-04T17:04:39" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/AddressResolver.js" time="0.1080" failures="0">
    <testcase name="Contract: AddressResolver importAddresses() when a different number of names are given to addresses then it reverts" time="0.0850" classname="then it reverts">
    </testcase>
  </testsuite>
  <testsuite name="when three separate addresses are given" timestamp="2022-02-04T17:04:39" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/AddressResolver.js" time="0.0000" failures="0">
    <testcase name="Contract: AddressResolver importAddresses() when three separate addresses are given then it can verify the imported set of addresses" time="0.0360" classname="then it can verify the imported set of addresses">
    </testcase>
    <testcase name="Contract: AddressResolver importAddresses() when three separate addresses are given then each can be looked up in turn" time="0.0350" classname="then each can be looked up in turn">
    </testcase>
  </testsuite>
  <testsuite name="when two are overridden" timestamp="2022-02-04T17:04:39" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/AddressResolver.js" time="0.1080" failures="0">
    <testcase name="Contract: AddressResolver importAddresses() when three separate addresses are given when two are overridden then the first remains the same while the other two are updated" time="0.0350" classname="then the first remains the same while the other two are updated">
    </testcase>
  </testsuite>
  <testsuite name="getAddress()" timestamp="2022-02-04T17:04:39" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/AddressResolver.js" time="0.0000" failures="0">
    <testcase name="Contract: AddressResolver getAddress() when invoked with no entries, returns 0 address" time="0.0100" classname="when invoked with no entries, returns 0 address">
    </testcase>
  </testsuite>
  <testsuite name="when three separate addresses are given" timestamp="2022-02-04T17:04:39" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/AddressResolver.js" time="0.0550" failures="0">
    <testcase name="Contract: AddressResolver getAddress() when three separate addresses are given then getAddress returns the same as the public mapping" time="0.0110" classname="then getAddress returns the same as the public mapping">
    </testcase>
  </testsuite>
  <testsuite name="requireAndGetAddress()" timestamp="2022-02-04T17:04:39" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/AddressResolver.js" time="0.0000" failures="0">
    <testcase name="Contract: AddressResolver requireAndGetAddress() when invoked with no entries, reverts" time="0.0080" classname="when invoked with no entries, reverts">
    </testcase>
  </testsuite>
  <testsuite name="when three separate addresses are given" timestamp="2022-02-04T17:04:39" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/AddressResolver.js" time="0.1170" failures="0">
    <testcase name="Contract: AddressResolver requireAndGetAddress() when three separate addresses are given then requireAndGetAddress() returns the same as the public mapping" time="0.0190" classname="then requireAndGetAddress() returns the same as the public mapping">
    </testcase>
    <testcase name="Contract: AddressResolver requireAndGetAddress() when three separate addresses are given when invoked with an unknown entry, reverts" time="0.0120" classname="when invoked with an unknown entry, reverts">
    </testcase>
  </testsuite>
  <testsuite name="rebuildCaches()" timestamp="2022-02-04T17:04:39" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/AddressResolver.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when some MixinResolver contracts exist" timestamp="2022-02-04T17:04:39" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/AddressResolver.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when some of these contracts are imported and caches are rebuilt" timestamp="2022-02-04T17:04:39" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/AddressResolver.js" time="0.1380" failures="0">
    <testcase name="Contract: AddressResolver rebuildCaches() when some MixinResolver contracts exist when some of these contracts are imported and caches are rebuilt shows that rebuildCache() was called on imported addresses" time="0.0010" classname="shows that rebuildCache() was called on imported addresses">
    </testcase>
  </testsuite>
  <testsuite name="getSynth()" timestamp="2022-02-04T17:04:39" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/AddressResolver.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a mock for Issuer is added" timestamp="2022-02-04T17:04:39" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/AddressResolver.js" time="0.1450" failures="0">
    <testcase name="Contract: AddressResolver getSynth() when a mock for Issuer is added when getSynth() is invoked" time="0.0170" classname="when getSynth() is invoked">
    </testcase>
  </testsuite>
  <testsuite name="when a Synthetix is created with a few added synths" timestamp="2022-02-04T17:04:39" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/AddressResolver.js" time="5.7300" failures="0">
    <testcase name="Contract: AddressResolver getSynth() when a Synthetix is created with a few added synths when getSynth() is invoked with these synth keys, they are returned correctly" time="0.0170" classname="when getSynth() is invoked with these synth keys, they are returned correctly">
    </testcase>
  </testsuite>
  <testsuite name="Contract: AddressSetLib" timestamp="2022-02-04T17:04:45" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/AddressSetLib.js" time="1.7760" failures="0">
    <testcase name="Contract: AddressSetLib Adding elements" time="0.8120" classname="Adding elements">
    </testcase>
    <testcase name="Contract: AddressSetLib Adding existing elements does nothing" time="0.2600" classname="Adding existing elements does nothing">
    </testcase>
    <testcase name="Contract: AddressSetLib Removing elements" time="0.2640" classname="Removing elements">
    </testcase>
    <testcase name="Contract: AddressSetLib Can&apos;t remove nonexistent elements" time="0.1090" classname="Can&apos;t remove nonexistent elements">
    </testcase>
    <testcase name="Contract: AddressSetLib Retrieving pages" time="0.2430" classname="Retrieving pages">
    </testcase>
  </testsuite>
  <testsuite name="Contract: BaseMigration" timestamp="2022-02-04T17:04:47" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseMigration.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseMigration ensure only known functions are mutative" time="0.0240" classname="ensure only known functions are mutative">
    </testcase>
    <testcase name="Contract: BaseMigration it fails when instantiated directly" time="0.0000" classname="it fails when instantiated directly">
    </testcase>
  </testsuite>
  <testsuite name="when extended by a contract" timestamp="2022-02-04T17:04:47" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseMigration.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseMigration when extended by a contract deployer is set" time="0.0070" classname="deployer is set">
    </testcase>
    <testcase name="Contract: BaseMigration when extended by a contract owner is set" time="0.0040" classname="owner is set">
    </testcase>
  </testsuite>
  <testsuite name="when the onlyDeployer modifier is used" timestamp="2022-02-04T17:04:47" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseMigration.spec.js" time="0.3740" failures="0">
    <testcase name="Contract: BaseMigration when extended by a contract when the onlyDeployer modifier is used only allows the deployer to execute" time="0.3500" classname="only allows the deployer to execute">
    </testcase>
  </testsuite>
  <testsuite name="when ownership needs returning" timestamp="2022-02-04T17:04:47" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseMigration.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when these contracts have the mock migration as their nominated owner" timestamp="2022-02-04T17:04:47" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseMigration.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and when the mock migration has accepted ownership over them" timestamp="2022-02-04T17:04:47" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseMigration.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when returnOwnership is invoked on a regular Owned" timestamp="2022-02-04T17:04:47" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseMigration.spec.js" time="0.1850" failures="0">
    <testcase name="Contract: BaseMigration when extended by a contract when ownership needs returning when these contracts have the mock migration as their nominated owner and when the mock migration has accepted ownership over them when returnOwnership is invoked on a regular Owned then the nominated owner is updated" time="0.0100" classname="then the nominated owner is updated">
    </testcase>
  </testsuite>
  <testsuite name="when returnOwnership is invoked on a legacy Owned" timestamp="2022-02-04T17:04:48" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseMigration.spec.js" time="0.1820" failures="0">
    <testcase name="Contract: BaseMigration when extended by a contract when ownership needs returning when these contracts have the mock migration as their nominated owner and when the mock migration has accepted ownership over them when returnOwnership is invoked on a legacy Owned then the nominated owner is updated" time="0.0060" classname="then the nominated owner is updated">
    </testcase>
  </testsuite>
  <testsuite name="when returnOwnership is invoked on something that is not Owned" timestamp="2022-02-04T17:04:48" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseMigration.spec.js" time="0.1460" failures="0">
    <testcase name="Contract: BaseMigration when extended by a contract when ownership needs returning when returnOwnership is invoked on something that is not Owned then the function reverts" time="0.0510" classname="then the function reverts">
    </testcase>
  </testsuite>
  <testsuite name="Contract: BaseRewardEscrowV2" timestamp="2022-02-04T17:04:48" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseRewardEscrowV2 ensure only expected functions are mutative" time="0.0560" classname="ensure only expected functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="Constructor &amp; Settings " timestamp="2022-02-04T17:04:48" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="0.4600" failures="0">
    <testcase name="Contract: BaseRewardEscrowV2 Constructor &amp; Settings  should set owner on contructor" time="0.0060" classname="should set owner on contructor">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Constructor &amp; Settings  should set nextEntryId to 1" time="0.0080" classname="should set nextEntryId to 1">
    </testcase>
  </testsuite>
  <testsuite name="There are no escrow entries initially" timestamp="2022-02-04T17:04:49" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="0.9230" failures="0">
    <testcase name="Contract: BaseRewardEscrowV2 There are no escrow entries initially then numVestingEntries should return 0" time="0.0070" classname="then numVestingEntries should return 0">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 There are no escrow entries initially then numVestingEntries should return 0" time="0.0050" classname="then numVestingEntries should return 0">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 There are no escrow entries initially then totalEscrowedAccountBalance should return 0" time="0.0060" classname="then totalEscrowedAccountBalance should return 0">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 There are no escrow entries initially then totalVestedAccountBalance should return 0" time="0.0040" classname="then totalVestedAccountBalance should return 0">
    </testcase>
  </testsuite>
  <testsuite name="Creating vesting Schedule" timestamp="2022-02-04T17:04:50" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="When appending vesting entry via feePool" timestamp="2022-02-04T17:04:50" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseRewardEscrowV2 Creating vesting Schedule When appending vesting entry via feePool should revert appending a vesting entry from account1" time="0.0190" classname="should revert appending a vesting entry from account1">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Creating vesting Schedule When appending vesting entry via feePool should revert appending a vesting entry with a zero amount" time="0.0180" classname="should revert appending a vesting entry with a zero amount">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Creating vesting Schedule When appending vesting entry via feePool should revert appending a vesting entry if there is not enough SNX in the contracts balance" time="0.0300" classname="should revert appending a vesting entry if there is not enough SNX in the contracts balance">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Creating vesting Schedule When appending vesting entry via feePool should revert appending a vesting entry if the duration is 0" time="0.0280" classname="should revert appending a vesting entry if the duration is 0">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Creating vesting Schedule When appending vesting entry via feePool should revert appending a vesting entry if the duration is &gt; max_duration" time="0.0240" classname="should revert appending a vesting entry if the duration is &gt; max_duration">
    </testcase>
  </testsuite>
  <testsuite name="When successfully appending new escrow entry for account 1 with 10 SNX" timestamp="2022-02-04T17:04:51" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseRewardEscrowV2 Creating vesting Schedule When appending vesting entry via feePool When successfully appending new escrow entry for account 1 with 10 SNX Should return the vesting entry for account 1 and entryID" time="0.0090" classname="Should return the vesting entry for account 1 and entryID">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Creating vesting Schedule When appending vesting entry via feePool When successfully appending new escrow entry for account 1 with 10 SNX Should increment the nextEntryID" time="0.0000" classname="Should increment the nextEntryID">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Creating vesting Schedule When appending vesting entry via feePool When successfully appending new escrow entry for account 1 with 10 SNX Account 1 should have balance of 10 SNX" time="0.0050" classname="Account 1 should have balance of 10 SNX">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Creating vesting Schedule When appending vesting entry via feePool When successfully appending new escrow entry for account 1 with 10 SNX totalEscrowedBalance of the contract should be 10 SNX" time="0.0120" classname="totalEscrowedBalance of the contract should be 10 SNX">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Creating vesting Schedule When appending vesting entry via feePool When successfully appending new escrow entry for account 1 with 10 SNX Account1 should have totalVested Account Balance of 0" time="0.0040" classname="Account1 should have totalVested Account Balance of 0">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Creating vesting Schedule When appending vesting entry via feePool When successfully appending new escrow entry for account 1 with 10 SNX Account1 numVestingEntries is 1" time="0.0060" classname="Account1 numVestingEntries is 1">
    </testcase>
  </testsuite>
  <testsuite name="When 6 months has passed" timestamp="2022-02-04T17:04:53" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="0.2800" failures="0">
    <testcase name="Contract: BaseRewardEscrowV2 Creating vesting Schedule When appending vesting entry via feePool When successfully appending new escrow entry for account 1 with 10 SNX When 6 months has passed then the vesting entry has 0 snx claimable" time="0.0090" classname="then the vesting entry has 0 snx claimable">
    </testcase>
  </testsuite>
  <testsuite name="When one year has passed after the vesting end time" timestamp="2022-02-04T17:04:53" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="0.4080" failures="0">
    <testcase name="Contract: BaseRewardEscrowV2 Creating vesting Schedule When appending vesting entry via feePool When successfully appending new escrow entry for account 1 with 10 SNX When one year has passed after the vesting end time then the vesting entry is fully claimable" time="0.0120" classname="then the vesting entry is fully claimable">
    </testcase>
  </testsuite>
  <testsuite name="Creating a new escrow entry by approval" timestamp="2022-02-04T17:04:53" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseRewardEscrowV2 Creating a new escrow entry by approval should revert if escrow duration is greater than max_duration" time="0.0350" classname="should revert if escrow duration is greater than max_duration">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Creating a new escrow entry by approval should revert if escrow duration is 0" time="0.0320" classname="should revert if escrow duration is 0">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Creating a new escrow entry by approval should revert when beneficiary is address zero" time="0.0160" classname="should revert when beneficiary is address zero">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Creating a new escrow entry by approval should revert when msg.sender has no approval to spend" time="0.0240" classname="should revert when msg.sender has no approval to spend">
    </testcase>
  </testsuite>
  <testsuite name="when successfully creating a new escrow entry for acount 1" timestamp="2022-02-04T17:04:55" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="1.6420" failures="0">
    <testcase name="Contract: BaseRewardEscrowV2 Creating a new escrow entry by approval when successfully creating a new escrow entry for acount 1 Should have created a new vesting entry for account 1" time="0.0060" classname="Should have created a new vesting entry for account 1">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Creating a new escrow entry by approval when successfully creating a new escrow entry for acount 1 Should increment the nextEntryID" time="0.0010" classname="Should increment the nextEntryID">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Creating a new escrow entry by approval when successfully creating a new escrow entry for acount 1 totalEscrowedBalance of the contract should be 10 SNX" time="0.0040" classname="totalEscrowedBalance of the contract should be 10 SNX">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Creating a new escrow entry by approval when successfully creating a new escrow entry for acount 1 Account1 should have balance of 10 SNX" time="0.0050" classname="Account1 should have balance of 10 SNX">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Creating a new escrow entry by approval when successfully creating a new escrow entry for acount 1 Account1 should have totalVested Account Balance of 0" time="0.0070" classname="Account1 should have totalVested Account Balance of 0">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Creating a new escrow entry by approval when successfully creating a new escrow entry for acount 1 Account1 numVestingEntries is 1" time="0.0050" classname="Account1 numVestingEntries is 1">
    </testcase>
  </testsuite>
  <testsuite name="Vesting" timestamp="2022-02-04T17:04:56" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Vesting of vesting entry after 6 months (before escrow ends)" timestamp="2022-02-04T17:04:56" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="1.9200" failures="0">
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Vesting of vesting entry after 6 months (before escrow ends) should vest 0 amount if entryID does not exist for user" time="0.0340" classname="should vest 0 amount if entryID does not exist for user">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Vesting of vesting entry after 6 months (before escrow ends) should have 0% of the vesting entry claimable" time="0.0050" classname="should have 0% of the vesting entry claimable">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Vesting of vesting entry after 6 months (before escrow ends) should vest and transfer 0 SNX from contract to the user" time="0.0820" classname="should vest and transfer 0 SNX from contract to the user">
    </testcase>
  </testsuite>
  <testsuite name="When vesting after escrow ended" timestamp="2022-02-04T17:04:58" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="3.8610" failures="0">
    <testcase name="Contract: BaseRewardEscrowV2 Vesting When vesting after escrow ended should vest and transfer all the snx to the user" time="0.0580" classname="should vest and transfer all the snx to the user">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting When vesting after escrow ended should vest and emit a Vest event" time="0.0370" classname="should vest and emit a Vest event">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting When vesting after escrow ended should vest and update totalEscrowedAccountBalance" time="0.0570" classname="should vest and update totalEscrowedAccountBalance">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting When vesting after escrow ended should vest and update totalVestedAccountBalance" time="0.0530" classname="should vest and update totalVestedAccountBalance">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting When vesting after escrow ended should vest and update totalEscrowedBalance" time="0.0540" classname="should vest and update totalEscrowedBalance">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting When vesting after escrow ended should vest and update entryID.escrowAmount to 0" time="0.0380" classname="should vest and update entryID.escrowAmount to 0">
    </testcase>
  </testsuite>
  <testsuite name="Vesting multiple vesting entries" timestamp="2022-02-04T17:05:02" tests="7" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Vesting multiple vesting entries should have three vesting entries for the user" time="0.0040" classname="should have three vesting entries for the user">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Vesting multiple vesting entries should vest all entries and transfer snx from contract to the user" time="0.0670" classname="should vest all entries and transfer snx from contract to the user">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Vesting multiple vesting entries should vest and emit a Vest event" time="0.0310" classname="should vest and emit a Vest event">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Vesting multiple vesting entries should vest and update totalEscrowedAccountBalance" time="0.0520" classname="should vest and update totalEscrowedAccountBalance">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Vesting multiple vesting entries should vest and update totalVestedAccountBalance" time="0.0720" classname="should vest and update totalVestedAccountBalance">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Vesting multiple vesting entries should vest and update totalEscrowedBalance" time="0.0390" classname="should vest and update totalEscrowedBalance">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Vesting multiple vesting entries should vest all entries and ignore duplicate attempts to vest same entries again" time="0.0730" classname="should vest all entries and ignore duplicate attempts to vest same entries again">
    </testcase>
  </testsuite>
  <testsuite name="When another user (account 1) vests all their entries" timestamp="2022-02-04T17:05:07" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="0.7500" failures="0">
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Vesting multiple vesting entries When another user (account 1) vests all their entries should vest all entries and transfer snx to the user" time="0.0330" classname="should vest all entries and transfer snx to the user">
    </testcase>
  </testsuite>
  <testsuite name="Vesting multiple vesting entries with different duration / end time" timestamp="2022-02-04T17:05:08" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Vesting multiple vesting entries with different duration / end time should have three vesting entries for the user" time="0.0080" classname="should have three vesting entries for the user">
    </testcase>
  </testsuite>
  <testsuite name="When another user (account 1) vests all their entries" timestamp="2022-02-04T17:05:09" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="0.7830" failures="0">
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Vesting multiple vesting entries with different duration / end time When another user (account 1) vests all their entries should vest all entries and transfer snx to the user" time="0.0550" classname="should vest all entries and transfer snx to the user">
    </testcase>
  </testsuite>
  <testsuite name="when the first two entrys are vestable" timestamp="2022-02-04T17:05:09" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="4.5320" failures="0">
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Vesting multiple vesting entries with different duration / end time when the first two entrys are vestable should vest only first 2 entries and transfer snx from contract to the user" time="0.0490" classname="should vest only first 2 entries and transfer snx from contract to the user">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Vesting multiple vesting entries with different duration / end time when the first two entrys are vestable should vest and emit a Vest event" time="0.0310" classname="should vest and emit a Vest event">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Vesting multiple vesting entries with different duration / end time when the first two entrys are vestable should vest and update totalEscrowedAccountBalance" time="0.0440" classname="should vest and update totalEscrowedAccountBalance">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Vesting multiple vesting entries with different duration / end time when the first two entrys are vestable should vest and update totalVestedAccountBalance" time="0.0570" classname="should vest and update totalVestedAccountBalance">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Vesting multiple vesting entries with different duration / end time when the first two entrys are vestable should vest and update totalEscrowedBalance" time="0.0540" classname="should vest and update totalEscrowedBalance">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Vesting multiple vesting entries with different duration / end time when the first two entrys are vestable should vest entryID1 and entryID2 and ignore duplicate attempts to vest same entries again" time="0.0930" classname="should vest entryID1 and entryID2 and ignore duplicate attempts to vest same entries again">
    </testcase>
  </testsuite>
  <testsuite name="Read Vesting Schedule" timestamp="2022-02-04T17:05:14" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="0.6910" failures="0">
    <testcase name="Contract: BaseRewardEscrowV2 Read Vesting Schedule should return the vesting schedules for account1" time="0.0130" classname="should return the vesting schedules for account1">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Read Vesting Schedule should return the list of vesting entryIDs for account1" time="0.0090" classname="should return the list of vesting entryIDs for account1">
    </testcase>
  </testsuite>
  <testsuite name="Stress test - Read Vesting Schedule" timestamp="2022-02-04T17:05:15" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="25.8950" failures="0">
    <testcase name="Contract: BaseRewardEscrowV2 Stress test - Read Vesting Schedule should return the vesting schedules for account1" time="0.8540" classname="should return the vesting schedules for account1">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Stress test - Read Vesting Schedule should return the list of vesting entryIDs for account1" time="0.2560" classname="should return the list of vesting entryIDs for account1">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Stress test - Read Vesting Schedule should return a subset of vesting entryIDs for account1" time="0.1600" classname="should return a subset of vesting entryIDs for account1">
    </testcase>
  </testsuite>
  <testsuite name="Vesting Schedule merging" timestamp="2022-02-04T17:05:41" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Schedule merging user should have three vesting entries" time="0.0180" classname="user should have three vesting entries">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Schedule merging initially account merging is not open" time="0.0030" classname="initially account merging is not open">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Schedule merging should have no nominated address for account1 initially" time="0.0060" classname="should have no nominated address for account1 initially">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Schedule merging should revert nominating and merging when account merging has not started" time="0.0370" classname="should revert nominating and merging when account merging has not started">
    </testcase>
  </testsuite>
  <testsuite name="when account merging window is open" timestamp="2022-02-04T17:05:43" tests="7" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Schedule merging when account merging window is open should revert when account is not nominated to merge another" time="0.0190" classname="should revert when account is not nominated to merge another">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Schedule merging when account merging window is open reverts when user nominating has any debt balance" time="0.0690" classname="reverts when user nominating has any debt balance">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Schedule merging when account merging window is open reverts when user nominating their own address" time="0.0100" classname="reverts when user nominating their own address">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Schedule merging when account merging window is open should allow account to nominate another destination account" time="0.0190" classname="should allow account to nominate another destination account">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Schedule merging when account merging window is open should allow account to nominate destination account as zero address" time="0.0920" classname="should allow account to nominate destination account as zero address">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Schedule merging when account merging window is open should emit an event on nominating a destination account" time="0.0120" classname="should emit an event on nominating a destination account">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Schedule merging when account merging window is open should revert nominating and merging when account merging has ended" time="0.0360" classname="should revert nominating and merging when account merging has ended">
    </testcase>
  </testsuite>
  <testsuite name="when given 1 entryID to merge from account1 into account2" timestamp="2022-02-04T17:05:47" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="3.1820" failures="0">
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Schedule merging when account merging window is open when given 1 entryID to merge from account1 into account2 should merge entry1 into account 2" time="0.0170" classname="should merge entry1 into account 2">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Schedule merging when account merging window is open when given 1 entryID to merge from account1 into account2 should have the same contract totalEscrowedBalance before and after" time="0.0080" classname="should have the same contract totalEscrowedBalance before and after">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Schedule merging when account merging window is open when given 1 entryID to merge from account1 into account2 should be able to get entry1 from account 2 vestingSchedule" time="0.0200" classname="should be able to get entry1 from account 2 vestingSchedule">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Schedule merging when account merging window is open when given 1 entryID to merge from account1 into account2 should have added the entryID to account2 accountVestingEntryIDs" time="0.0160" classname="should have added the entryID to account2 accountVestingEntryIDs">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Schedule merging when account merging window is open when given 1 entryID to merge from account1 into account2 should ignore merging entryID1 again from account1 as the entry is no longer set" time="0.0890" classname="should ignore merging entryID1 again from account1 as the entry is no longer set">
    </testcase>
  </testsuite>
  <testsuite name="when merging multiple vesting entries from account 1 to account 2" timestamp="2022-02-04T17:05:50" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseRewardEscrowV2.js" time="2.8200" failures="0">
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Schedule merging when account merging window is open when merging multiple vesting entries from account 1 to account 2 should merge entry1, entry2 into account 2" time="0.1060" classname="should merge entry1, entry2 into account 2">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Schedule merging when account merging window is open when merging multiple vesting entries from account 1 to account 2 should have the same totalEscrowedBalance on escrow contract before and after" time="0.0160" classname="should have the same totalEscrowedBalance on escrow contract before and after">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Schedule merging when account merging window is open when merging multiple vesting entries from account 1 to account 2 should be able to get entry1 from account 2 vestingSchedule" time="0.0160" classname="should be able to get entry1 from account 2 vestingSchedule">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Schedule merging when account merging window is open when merging multiple vesting entries from account 1 to account 2 should be able to get entry2 from account 2 vestingSchedule" time="0.0050" classname="should be able to get entry2 from account 2 vestingSchedule">
    </testcase>
    <testcase name="Contract: BaseRewardEscrowV2 Vesting Schedule merging when account merging window is open when merging multiple vesting entries from account 1 to account 2 should have added the entryIDs to account2 accountVestingEntryIDs" time="0.0420" classname="should have added the entryIDs to account2 accountVestingEntryIDs">
    </testcase>
  </testsuite>
  <testsuite name="Contract: BaseSynthetix" timestamp="2022-02-04T17:05:53" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseSynthetix ensure only expected functions are mutative" time="0.0510" classname="ensure only expected functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="constructor" timestamp="2022-02-04T17:06:01" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="0.3960" failures="0">
    <testcase name="Contract: BaseSynthetix constructor should set constructor params on deployment" time="0.2530" classname="should set constructor params on deployment">
    </testcase>
    <testcase name="Contract: BaseSynthetix constructor should set constructor params on upgrade to new totalSupply" time="0.1230" classname="should set constructor params on upgrade to new totalSupply">
    </testcase>
  </testsuite>
  <testsuite name="non-basic functions always revert" timestamp="2022-02-04T17:06:01" tests="7" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="3.6210" failures="0">
    <testcase name="Contract: BaseSynthetix non-basic functions always revert exchangeWithVirtual should revert no matter who the caller is" time="0.4950" classname="exchangeWithVirtual should revert no matter who the caller is">
    </testcase>
    <testcase name="Contract: BaseSynthetix non-basic functions always revert exchangeWithTrackingForInitiator should revert no matter who the caller is" time="0.4960" classname="exchangeWithTrackingForInitiator should revert no matter who the caller is">
    </testcase>
    <testcase name="Contract: BaseSynthetix non-basic functions always revert ExchangeAtomically should revert no matter who the caller is" time="0.4880" classname="ExchangeAtomically should revert no matter who the caller is">
    </testcase>
    <testcase name="Contract: BaseSynthetix non-basic functions always revert mint should revert no matter who the caller is" time="0.4790" classname="mint should revert no matter who the caller is">
    </testcase>
    <testcase name="Contract: BaseSynthetix non-basic functions always revert mintSecondary should revert no matter who the caller is" time="0.4780" classname="mintSecondary should revert no matter who the caller is">
    </testcase>
    <testcase name="Contract: BaseSynthetix non-basic functions always revert mintSecondaryRewards should revert no matter who the caller is" time="0.4830" classname="mintSecondaryRewards should revert no matter who the caller is">
    </testcase>
    <testcase name="Contract: BaseSynthetix non-basic functions always revert burnSecondary should revert no matter who the caller is" time="0.6490" classname="burnSecondary should revert no matter who the caller is">
    </testcase>
  </testsuite>
  <testsuite name="only Exchanger can call emit event functions" timestamp="2022-02-04T17:06:05" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseSynthetix only Exchanger can call emit event functions emitExchangeTracking() cannot be invoked directly by any account" time="0.5210" classname="emitExchangeTracking() cannot be invoked directly by any account">
    </testcase>
    <testcase name="Contract: BaseSynthetix only Exchanger can call emit event functions emitExchangeRebate() cannot be invoked directly by any account" time="0.5120" classname="emitExchangeRebate() cannot be invoked directly by any account">
    </testcase>
    <testcase name="Contract: BaseSynthetix only Exchanger can call emit event functions emitExchangeReclaim() cannot be invoked directly by any account" time="0.5320" classname="emitExchangeReclaim() cannot be invoked directly by any account">
    </testcase>
    <testcase name="Contract: BaseSynthetix only Exchanger can call emit event functions emitSynthExchange() cannot be invoked directly by any account" time="0.5360" classname="emitSynthExchange() cannot be invoked directly by any account">
    </testcase>
  </testsuite>
  <testsuite name="Exchanger calls emit" timestamp="2022-02-04T17:06:07" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="0.1640" failures="0">
    <testcase name="Contract: BaseSynthetix only Exchanger can call emit event functions Exchanger calls emit the corresponding events are emitted" time="0.0020" classname="the corresponding events are emitted">
    </testcase>
  </testsuite>
  <testsuite name="Exchanger calls" timestamp="2022-02-04T17:06:07" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="0.5600" failures="0">
    <testcase name="Contract: BaseSynthetix Exchanger calls exchangeOnBehalf is called with the right arguments " time="0.0240" classname="exchangeOnBehalf is called with the right arguments ">
    </testcase>
    <testcase name="Contract: BaseSynthetix Exchanger calls exchangeWithTracking is called with the right arguments " time="0.0160" classname="exchangeWithTracking is called with the right arguments ">
    </testcase>
    <testcase name="Contract: BaseSynthetix Exchanger calls exchangeOnBehalfWithTracking is called with the right arguments " time="0.0300" classname="exchangeOnBehalfWithTracking is called with the right arguments ">
    </testcase>
    <testcase name="Contract: BaseSynthetix Exchanger calls settle is called with the right arguments " time="0.0140" classname="settle is called with the right arguments ">
    </testcase>
  </testsuite>
  <testsuite name="isWaitingPeriod()" timestamp="2022-02-04T17:06:08" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseSynthetix isWaitingPeriod() returns false by default" time="0.0100" classname="returns false by default">
    </testcase>
  </testsuite>
  <testsuite name="when a user has exchanged into sETH" timestamp="2022-02-04T17:06:08" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseSynthetix isWaitingPeriod() when a user has exchanged into sETH then waiting period is true" time="0.0350" classname="then waiting period is true">
    </testcase>
  </testsuite>
  <testsuite name="when the waiting period expires" timestamp="2022-02-04T17:06:08" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="0.8850" failures="0">
    <testcase name="Contract: BaseSynthetix isWaitingPeriod() when a user has exchanged into sETH when the waiting period expires returns false by default" time="0.0200" classname="returns false by default">
    </testcase>
  </testsuite>
  <testsuite name="anySynthOrSNXRateIsInvalid()" timestamp="2022-02-04T17:06:09" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseSynthetix anySynthOrSNXRateIsInvalid() should have stale rates initially" time="0.0670" classname="should have stale rates initially">
    </testcase>
  </testsuite>
  <testsuite name="when synth rates set" timestamp="2022-02-04T17:06:10" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseSynthetix anySynthOrSNXRateIsInvalid() when synth rates set should still have stale rates" time="0.0700" classname="should still have stale rates">
    </testcase>
  </testsuite>
  <testsuite name="when SNX is also set" timestamp="2022-02-04T17:06:10" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseSynthetix anySynthOrSNXRateIsInvalid() when synth rates set when SNX is also set then no stale rates" time="0.0580" classname="then no stale rates">
    </testcase>
  </testsuite>
  <testsuite name="when only some synths are updated" timestamp="2022-02-04T17:06:10" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="0.5330" failures="0">
    <testcase name="Contract: BaseSynthetix anySynthOrSNXRateIsInvalid() when synth rates set when SNX is also set when only some synths are updated then anySynthOrSNXRateIsInvalid() returns true" time="0.0630" classname="then anySynthOrSNXRateIsInvalid() returns true">
    </testcase>
  </testsuite>
  <testsuite name="availableCurrencyKeys()" timestamp="2022-02-04T17:06:11" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="0.0210" failures="0">
    <testcase name="Contract: BaseSynthetix availableCurrencyKeys() returns all currency keys by default" time="0.0140" classname="returns all currency keys by default">
    </testcase>
  </testsuite>
  <testsuite name="isWaitingPeriod()" timestamp="2022-02-04T17:06:11" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="0.0310" failures="0">
    <testcase name="Contract: BaseSynthetix isWaitingPeriod() returns false by default" time="0.0190" classname="returns false by default">
    </testcase>
  </testsuite>
  <testsuite name="transfer()" timestamp="2022-02-04T17:06:11" tests="7" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseSynthetix transfer() should transfer using the ERC20 transfer function @gasprofile" time="0.1010" classname="should transfer using the ERC20 transfer function @gasprofile">
    </testcase>
    <testcase name="Contract: BaseSynthetix transfer() should revert when exceeding locked synthetix and calling the ERC20 transfer function" time="0.2120" classname="should revert when exceeding locked synthetix and calling the ERC20 transfer function">
    </testcase>
    <testcase name="Contract: BaseSynthetix transfer() should transfer using the ERC20 transferFrom function @gasprofile" time="0.1310" classname="should transfer using the ERC20 transferFrom function @gasprofile">
    </testcase>
    <testcase name="Contract: BaseSynthetix transfer() should revert when exceeding locked synthetix and calling the ERC20 transferFrom function" time="0.2900" classname="should revert when exceeding locked synthetix and calling the ERC20 transferFrom function">
    </testcase>
    <testcase name="Contract: BaseSynthetix transfer() should not be possible to transfer locked synthetix" time="0.5140" classname="should not be possible to transfer locked synthetix">
    </testcase>
    <testcase name="Contract: BaseSynthetix transfer() should lock newly received synthetix if the user&apos;s collaterisation is too high" time="2.0920" classname="should lock newly received synthetix if the user&apos;s collaterisation is too high">
    </testcase>
    <testcase name="Contract: BaseSynthetix transfer() should unlock synthetix when collaterisation ratio changes" time="0.9680" classname="should unlock synthetix when collaterisation ratio changes">
    </testcase>
  </testsuite>
  <testsuite name="when the system is suspended" timestamp="2022-02-04T17:06:19" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseSynthetix transfer() when the system is suspended when transfer() is invoked, it reverts with operation prohibited" time="0.0470" classname="when transfer() is invoked, it reverts with operation prohibited">
    </testcase>
    <testcase name="Contract: BaseSynthetix transfer() when the system is suspended when transferFrom() is invoked, it reverts with operation prohibited" time="0.0230" classname="when transferFrom() is invoked, it reverts with operation prohibited">
    </testcase>
  </testsuite>
  <testsuite name="when the system is resumed" timestamp="2022-02-04T17:06:20" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="1.5730" failures="0">
    <testcase name="Contract: BaseSynthetix transfer() when the system is suspended when the system is resumed when transfer() is invoked, it works as expected" time="0.0270" classname="when transfer() is invoked, it works as expected">
    </testcase>
    <testcase name="Contract: BaseSynthetix transfer() when the system is suspended when the system is resumed when transferFrom() is invoked, it works as expected" time="0.0460" classname="when transferFrom() is invoked, it works as expected">
    </testcase>
  </testsuite>
  <testsuite name="when the user has issued some sUSD and exchanged for other synths" timestamp="2022-02-04T17:06:22" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="6.4940" failures="0">
    <testcase name="Contract: BaseSynthetix transfer() when the user has issued some sUSD and exchanged for other synths should transfer using the ERC20 transfer function @gasprofile" time="0.0720" classname="should transfer using the ERC20 transfer function @gasprofile">
    </testcase>
    <testcase name="Contract: BaseSynthetix transfer() when the user has issued some sUSD and exchanged for other synths should transfer using the ERC20 transferFrom function @gasprofile" time="0.3800" classname="should transfer using the ERC20 transferFrom function @gasprofile">
    </testcase>
  </testsuite>
  <testsuite name="rates stale for transfers" timestamp="2022-02-04T17:06:29" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the user has a debt position" timestamp="2022-02-04T17:06:29" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="7.8380" failures="0">
    <testcase name="Contract: BaseSynthetix transfer() rates stale for transfers when the user has a debt position should not allow transfer if the exchange rate for SNX is stale" time="1.2550" classname="should not allow transfer if the exchange rate for SNX is stale">
    </testcase>
    <testcase name="Contract: BaseSynthetix transfer() rates stale for transfers when the user has a debt position should not allow transfer if the exchange rate for any synth is stale" time="3.7370" classname="should not allow transfer if the exchange rate for any synth is stale">
    </testcase>
  </testsuite>
  <testsuite name="when the user has no debt" timestamp="2022-02-04T17:06:36" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="1.4460" failures="0">
    <testcase name="Contract: BaseSynthetix transfer() rates stale for transfers when the user has no debt should allow transfer if the exchange rate for SNX is stale" time="0.0570" classname="should allow transfer if the exchange rate for SNX is stale">
    </testcase>
    <testcase name="Contract: BaseSynthetix transfer() rates stale for transfers when the user has no debt should allow transfer if the exchange rate for any synth is stale" time="0.0540" classname="should allow transfer if the exchange rate for any synth is stale">
    </testcase>
  </testsuite>
  <testsuite name="when the user holds SNX" timestamp="2022-02-04T17:06:38" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and has an escrow entry" timestamp="2022-02-04T17:06:38" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseSynthetix transfer() when the user holds SNX and has an escrow entry should allow transfer of synthetix by default" time="0.0260" classname="should allow transfer of synthetix by default">
    </testcase>
  </testsuite>
  <testsuite name="when the user has a debt position (i.e. has issued)" timestamp="2022-02-04T17:06:38" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="0.7990" failures="0">
    <testcase name="Contract: BaseSynthetix transfer() when the user holds SNX and has an escrow entry when the user has a debt position (i.e. has issued) should not allow transfer of synthetix in escrow" time="0.1200" classname="should not allow transfer of synthetix in escrow">
    </testcase>
  </testsuite>
  <testsuite name="when the user has issued some sUSD and exchanged for other synths" timestamp="2022-02-04T17:06:39" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetix.js" time="2.7290" failures="0">
    <testcase name="Contract: BaseSynthetix transfer() when the user has issued some sUSD and exchanged for other synths should transfer using the ERC20 transfer function @gasprofile" time="0.0730" classname="should transfer using the ERC20 transfer function @gasprofile">
    </testcase>
    <testcase name="Contract: BaseSynthetix transfer() when the user has issued some sUSD and exchanged for other synths should transfer using the ERC20 transferFrom function @gasprofile" time="0.1850" classname="should transfer using the ERC20 transferFrom function @gasprofile">
    </testcase>
  </testsuite>
  <testsuite name="Contract: BaseSynthetixBridge (unit tests)" timestamp="2022-02-04T17:06:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetixBridge.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseSynthetixBridge (unit tests) ensure only known functions are mutative" time="0.0740" classname="ensure only known functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="when all the deps are mocked" timestamp="2022-02-04T17:06:42" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetixBridge.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the target is deployed and the proxy is set" timestamp="2022-02-04T17:06:42" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetixBridge.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseSynthetixBridge (unit tests) when all the deps are mocked when the target is deployed and the proxy is set should set constructor params on deployment" time="0.0080" classname="should set constructor params on deployment">
    </testcase>
    <testcase name="Contract: BaseSynthetixBridge (unit tests) when all the deps are mocked when the target is deployed and the proxy is set initially initiations are active" time="0.0080" classname="initially initiations are active">
    </testcase>
  </testsuite>
  <testsuite name="suspendInitiation" timestamp="2022-02-04T17:06:43" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetixBridge.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="failure modes" timestamp="2022-02-04T17:06:43" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetixBridge.unit.js" time="0.9520" failures="0">
    <testcase name="Contract: BaseSynthetixBridge (unit tests) when all the deps are mocked when the target is deployed and the proxy is set suspendInitiation failure modes reverts when not invoked by the owner" time="0.5330" classname="reverts when not invoked by the owner">
    </testcase>
    <testcase name="Contract: BaseSynthetixBridge (unit tests) when all the deps are mocked when the target is deployed and the proxy is set suspendInitiation failure modes reverts when initiation is already suspended" time="0.0240" classname="reverts when initiation is already suspended">
    </testcase>
  </testsuite>
  <testsuite name="when invoked by the owner" timestamp="2022-02-04T17:06:44" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetixBridge.unit.js" time="0.4970" failures="0">
    <testcase name="Contract: BaseSynthetixBridge (unit tests) when all the deps are mocked when the target is deployed and the proxy is set suspendInitiation when invoked by the owner and initiationActive is false" time="0.0050" classname="and initiationActive is false">
    </testcase>
    <testcase name="Contract: BaseSynthetixBridge (unit tests) when all the deps are mocked when the target is deployed and the proxy is set suspendInitiation when invoked by the owner and a InitiationSuspended event is emitted" time="0.0000" classname="and a InitiationSuspended event is emitted">
    </testcase>
  </testsuite>
  <testsuite name="resumeInitiation" timestamp="2022-02-04T17:06:44" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetixBridge.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="failure modes" timestamp="2022-02-04T17:06:44" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetixBridge.unit.js" time="0.9120" failures="0">
    <testcase name="Contract: BaseSynthetixBridge (unit tests) when all the deps are mocked when the target is deployed and the proxy is set resumeInitiation failure modes reverts when not invoked by the owner" time="0.3350" classname="reverts when not invoked by the owner">
    </testcase>
    <testcase name="Contract: BaseSynthetixBridge (unit tests) when all the deps are mocked when the target is deployed and the proxy is set resumeInitiation failure modes reverts when initiation is not suspended" time="0.0180" classname="reverts when initiation is not suspended">
    </testcase>
  </testsuite>
  <testsuite name="when initiation is suspended" timestamp="2022-02-04T17:06:45" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetixBridge.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: BaseSynthetixBridge (unit tests) when all the deps are mocked when the target is deployed and the proxy is set resumeInitiation when initiation is suspended initiationActive is false" time="0.0040" classname="initiationActive is false">
    </testcase>
  </testsuite>
  <testsuite name="when invoked by the owner" timestamp="2022-02-04T17:06:46" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/BaseSynthetixBridge.unit.js" time="0.9200" failures="0">
    <testcase name="Contract: BaseSynthetixBridge (unit tests) when all the deps are mocked when the target is deployed and the proxy is set resumeInitiation when initiation is suspended when invoked by the owner initiations are active again" time="0.0070" classname="initiations are active again">
    </testcase>
    <testcase name="Contract: BaseSynthetixBridge (unit tests) when all the deps are mocked when the target is deployed and the proxy is set resumeInitiation when initiation is suspended when invoked by the owner a InitiationResumed event is emitted" time="0.0000" classname="a InitiationResumed event is emitted">
    </testcase>
  </testsuite>
  <testsuite name="Contract: Bytes32SetLib" timestamp="2022-02-04T17:06:47" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Bytes32SetLib.js" time="1.3150" failures="0">
    <testcase name="Contract: Bytes32SetLib Adding elements" time="0.2330" classname="Adding elements">
    </testcase>
    <testcase name="Contract: Bytes32SetLib Adding existing elements does nothing" time="0.1900" classname="Adding existing elements does nothing">
    </testcase>
    <testcase name="Contract: Bytes32SetLib Removing elements" time="0.4420" classname="Removing elements">
    </testcase>
    <testcase name="Contract: Bytes32SetLib Can&apos;t remove nonexistent elements" time="0.1340" classname="Can&apos;t remove nonexistent elements">
    </testcase>
    <testcase name="Contract: Bytes32SetLib Retrieving pages" time="0.2310" classname="Retrieving pages">
    </testcase>
  </testsuite>
  <testsuite name="Contract: Collateral" timestamp="2022-02-04T17:06:48" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Collateral.js" time="0.0000" failures="0">
    <testcase name="Contract: Collateral should ensure only expected functions are mutative" time="0.1110" classname="should ensure only expected functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="setting variables" timestamp="2022-02-04T17:06:55" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Collateral.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="setCanOpenLoans" timestamp="2022-02-04T17:06:55" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Collateral.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="revert condtions" timestamp="2022-02-04T17:06:55" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Collateral.js" time="0.4490" failures="0">
    <testcase name="Contract: Collateral setting variables setCanOpenLoans revert condtions should fail if not called by the owner" time="0.4480" classname="should fail if not called by the owner">
    </testcase>
  </testsuite>
  <testsuite name="when it succeeds" timestamp="2022-02-04T17:06:55" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Collateral.js" time="0.0220" failures="0">
    <testcase name="Contract: Collateral setting variables setCanOpenLoans when it succeeds should update the flag" time="0.0050" classname="should update the flag">
    </testcase>
  </testsuite>
  <testsuite name="setMinCollateral" timestamp="2022-02-04T17:06:55" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Collateral.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="revert condtions" timestamp="2022-02-04T17:06:55" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Collateral.js" time="0.5370" failures="0">
    <testcase name="Contract: Collateral setting variables setMinCollateral revert condtions should fail if not called by the owner" time="0.5310" classname="should fail if not called by the owner">
    </testcase>
  </testsuite>
  <testsuite name="when it succeeds" timestamp="2022-02-04T17:06:56" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Collateral.js" time="0.0260" failures="0">
    <testcase name="Contract: Collateral setting variables setMinCollateral when it succeeds should allow min collateral to be 0" time="0.0150" classname="should allow min collateral to be 0">
    </testcase>
  </testsuite>
  <testsuite name="setIssueFeeRate" timestamp="2022-02-04T17:06:56" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Collateral.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="revert condtions" timestamp="2022-02-04T17:06:56" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Collateral.js" time="0.3960" failures="0">
    <testcase name="Contract: Collateral setting variables setIssueFeeRate revert condtions should fail if not called by the owner" time="0.3950" classname="should fail if not called by the owner">
    </testcase>
  </testsuite>
  <testsuite name="when it succeeds" timestamp="2022-02-04T17:06:56" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Collateral.js" time="0.0440" failures="0">
    <testcase name="Contract: Collateral setting variables setIssueFeeRate when it succeeds should update the issue fee" time="0.0040" classname="should update the issue fee">
    </testcase>
    <testcase name="Contract: Collateral setting variables setIssueFeeRate when it succeeds should allow the issue fee rate to be 0" time="0.0160" classname="should allow the issue fee rate to be 0">
    </testcase>
  </testsuite>
  <testsuite name="Contract: CollateralErc20" timestamp="2022-02-04T17:06:56" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralErc20 should set constructor params on deployment" time="0.0830" classname="should set constructor params on deployment">
    </testcase>
    <testcase name="Contract: CollateralErc20 should ensure only expected functions are mutative" time="0.1370" classname="should ensure only expected functions are mutative">
    </testcase>
    <testcase name="Contract: CollateralErc20 should access its dependencies via the address resolver" time="0.0350" classname="should access its dependencies via the address resolver">
    </testcase>
  </testsuite>
  <testsuite name="cratio test" timestamp="2022-02-04T17:07:03" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="sUSD loans" timestamp="2022-02-04T17:07:03" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="1.9050" failures="0">
    <testcase name="Contract: CollateralErc20 cratio test sUSD loans when we issue at 200%, our c ratio is 200%" time="0.0300" classname="when we issue at 200%, our c ratio is 200%">
    </testcase>
    <testcase name="Contract: CollateralErc20 cratio test sUSD loans when the price falls by 25% our c ratio is 150%" time="0.0890" classname="when the price falls by 25% our c ratio is 150%">
    </testcase>
    <testcase name="Contract: CollateralErc20 cratio test sUSD loans when the price increases by 100% our c ratio is 400%" time="0.0570" classname="when the price increases by 100% our c ratio is 400%">
    </testcase>
    <testcase name="Contract: CollateralErc20 cratio test sUSD loans when the price fallsby 50% our cratio is 100%" time="0.0840" classname="when the price fallsby 50% our cratio is 100%">
    </testcase>
  </testsuite>
  <testsuite name="sBTC loans" timestamp="2022-02-04T17:07:05" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="1.1730" failures="0">
    <testcase name="Contract: CollateralErc20 cratio test sBTC loans when we issue at 200%, our c ratio is 200%" time="0.0460" classname="when we issue at 200%, our c ratio is 200%">
    </testcase>
    <testcase name="Contract: CollateralErc20 cratio test sBTC loans price changes should not change the cratio" time="0.1110" classname="price changes should not change the cratio">
    </testcase>
  </testsuite>
  <testsuite name="max loan test" timestamp="2022-02-04T17:07:06" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.4740" failures="0">
    <testcase name="Contract: CollateralErc20 max loan test should convert correctly" time="0.0780" classname="should convert correctly">
    </testcase>
  </testsuite>
  <testsuite name="scaling collateral test" timestamp="2022-02-04T17:07:07" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.9940" failures="0">
    <testcase name="Contract: CollateralErc20 scaling collateral test should scale up 1e8 to 1e18 correctly" time="0.0090" classname="should scale up 1e8 to 1e18 correctly">
    </testcase>
    <testcase name="Contract: CollateralErc20 scaling collateral test should scaled up 1.23456789 correctly" time="0.0070" classname="should scaled up 1.23456789 correctly">
    </testcase>
    <testcase name="Contract: CollateralErc20 scaling collateral test should scale down 1e18 to 1e8 correctly" time="0.0050" classname="should scale down 1e18 to 1e8 correctly">
    </testcase>
    <testcase name="Contract: CollateralErc20 scaling collateral test should scale down 1.23456789 correctly" time="0.0040" classname="should scale down 1.23456789 correctly">
    </testcase>
    <testcase name="Contract: CollateralErc20 scaling collateral test if more than 8 decimals come back, it truncates and does not round" time="0.0040" classname="if more than 8 decimals come back, it truncates and does not round">
    </testcase>
  </testsuite>
  <testsuite name="opening" timestamp="2022-02-04T17:07:08" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="potential blocking conditions" timestamp="2022-02-04T17:07:08" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:07:08" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralErc20 opening potential blocking conditions when System is suspended then calling openLoan() reverts" time="0.0990" classname="then calling openLoan() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:07:08" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.3930" failures="0">
    <testcase name="Contract: CollateralErc20 opening potential blocking conditions when System is suspended when System is resumed then calling openLoan() succeeds" time="0.1900" classname="then calling openLoan() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is suspended" timestamp="2022-02-04T17:07:09" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralErc20 opening potential blocking conditions when Issuance is suspended then calling openLoan() reverts" time="0.0910" classname="then calling openLoan() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is resumed" timestamp="2022-02-04T17:07:09" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.3870" failures="0">
    <testcase name="Contract: CollateralErc20 opening potential blocking conditions when Issuance is suspended when Issuance is resumed then calling openLoan() succeeds" time="0.1870" classname="then calling openLoan() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when rates have gone stale" timestamp="2022-02-04T17:07:09" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralErc20 opening potential blocking conditions when rates have gone stale then calling openLoan() reverts" time="0.0910" classname="then calling openLoan() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when BTC gets a rate" timestamp="2022-02-04T17:07:09" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.3950" failures="0">
    <testcase name="Contract: CollateralErc20 opening potential blocking conditions when rates have gone stale when BTC gets a rate then calling openLoan() succeeds" time="0.1650" classname="then calling openLoan() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="revert conditions" timestamp="2022-02-04T17:07:10" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.9350" failures="0">
    <testcase name="Contract: CollateralErc20 opening revert conditions should revert if they request a currency that is not supported" time="0.0870" classname="should revert if they request a currency that is not supported">
    </testcase>
    <testcase name="Contract: CollateralErc20 opening revert conditions should revert if they send 0 collateral" time="0.1280" classname="should revert if they send 0 collateral">
    </testcase>
    <testcase name="Contract: CollateralErc20 opening revert conditions should revert if the requested loan exceeds borrowing power" time="0.1990" classname="should revert if the requested loan exceeds borrowing power">
    </testcase>
  </testsuite>
  <testsuite name="should open a btc loan denominated in sUSD" timestamp="2022-02-04T17:07:11" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="1.4640" failures="0">
    <testcase name="Contract: CollateralErc20 opening should open a btc loan denominated in sUSD should set the loan correctly" time="0.0000" classname="should set the loan correctly">
    </testcase>
    <testcase name="Contract: CollateralErc20 opening should open a btc loan denominated in sUSD should issue the correct amount to the borrower" time="0.0130" classname="should issue the correct amount to the borrower">
    </testcase>
    <testcase name="Contract: CollateralErc20 opening should open a btc loan denominated in sUSD should issue the minting fee to the fee pool" time="0.0070" classname="should issue the minting fee to the fee pool">
    </testcase>
    <testcase name="Contract: CollateralErc20 opening should open a btc loan denominated in sUSD should emit the event properly" time="0.0010" classname="should emit the event properly">
    </testcase>
  </testsuite>
  <testsuite name="should open a btc loan denominated in sBTC" timestamp="2022-02-04T17:07:12" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="1.6110" failures="0">
    <testcase name="Contract: CollateralErc20 opening should open a btc loan denominated in sBTC should set the loan correctly" time="0.0020" classname="should set the loan correctly">
    </testcase>
    <testcase name="Contract: CollateralErc20 opening should open a btc loan denominated in sBTC should issue the correct amount to the borrower" time="0.0140" classname="should issue the correct amount to the borrower">
    </testcase>
    <testcase name="Contract: CollateralErc20 opening should open a btc loan denominated in sBTC should issue the minting fee to the fee pool" time="0.0070" classname="should issue the minting fee to the fee pool">
    </testcase>
    <testcase name="Contract: CollateralErc20 opening should open a btc loan denominated in sBTC should emit the event properly" time="0.0000" classname="should emit the event properly">
    </testcase>
  </testsuite>
  <testsuite name="deposits" timestamp="2022-02-04T17:07:14" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="potential blocking conditions" timestamp="2022-02-04T17:07:14" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:07:14" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralErc20 deposits potential blocking conditions when System is suspended then calling depopsit() reverts" time="0.1090" classname="then calling depopsit() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:07:14" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.5190" failures="0">
    <testcase name="Contract: CollateralErc20 deposits potential blocking conditions when System is suspended when System is resumed then calling deposit() succeeds" time="0.0920" classname="then calling deposit() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is suspended" timestamp="2022-02-04T17:07:15" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralErc20 deposits potential blocking conditions when Issuance is suspended then calling depopsit() reverts" time="0.1040" classname="then calling depopsit() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is resumed" timestamp="2022-02-04T17:07:15" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.5320" failures="0">
    <testcase name="Contract: CollateralErc20 deposits potential blocking conditions when Issuance is suspended when Issuance is resumed then calling deposit() succeeds" time="0.1070" classname="then calling deposit() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="revert conditions" timestamp="2022-02-04T17:07:16" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.4980" failures="0">
    <testcase name="Contract: CollateralErc20 deposits revert conditions should revert if they do not send any eth" time="0.0940" classname="should revert if they do not send any eth">
    </testcase>
  </testsuite>
  <testsuite name="should allow deposits" timestamp="2022-02-04T17:07:17" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.5060" failures="0">
    <testcase name="Contract: CollateralErc20 deposits should allow deposits should increase the total collateral of the loan" time="0.0090" classname="should increase the total collateral of the loan">
    </testcase>
  </testsuite>
  <testsuite name="withdraws" timestamp="2022-02-04T17:07:17" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="potential blocking conditions" timestamp="2022-02-04T17:07:17" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:07:17" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralErc20 withdraws potential blocking conditions when System is suspended then calling depopsit() reverts" time="0.0540" classname="then calling depopsit() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:07:17" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.5460" failures="0">
    <testcase name="Contract: CollateralErc20 withdraws potential blocking conditions when System is suspended when System is resumed then calling deposit() succeeds" time="0.1180" classname="then calling deposit() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is suspended" timestamp="2022-02-04T17:07:18" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralErc20 withdraws potential blocking conditions when Issuance is suspended then calling depopsit() reverts" time="0.0500" classname="then calling depopsit() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is resumed" timestamp="2022-02-04T17:07:19" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.5610" failures="0">
    <testcase name="Contract: CollateralErc20 withdraws potential blocking conditions when Issuance is suspended when Issuance is resumed then calling deposit() succeeds" time="0.1070" classname="then calling deposit() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="revert conditions" timestamp="2022-02-04T17:07:19" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="1.7150" failures="0">
    <testcase name="Contract: CollateralErc20 withdraws revert conditions should revert if the withdraw would put them under minimum collateralisation" time="0.1870" classname="should revert if the withdraw would put them under minimum collateralisation">
    </testcase>
    <testcase name="Contract: CollateralErc20 withdraws revert conditions should revert if they try to withdraw all the collateral" time="0.1820" classname="should revert if they try to withdraw all the collateral">
    </testcase>
    <testcase name="Contract: CollateralErc20 withdraws revert conditions should revert if the sender is not borrower" time="0.0890" classname="should revert if the sender is not borrower">
    </testcase>
  </testsuite>
  <testsuite name="should allow withdraws" timestamp="2022-02-04T17:07:21" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="1.7330" failures="0">
    <testcase name="Contract: CollateralErc20 withdraws should allow withdraws should decrease the total collateral of the loan" time="0.0110" classname="should decrease the total collateral of the loan">
    </testcase>
    <testcase name="Contract: CollateralErc20 withdraws should allow withdraws should transfer the withdrawn collateral to the borrower" time="0.0100" classname="should transfer the withdrawn collateral to the borrower">
    </testcase>
  </testsuite>
  <testsuite name="repayments" timestamp="2022-02-04T17:07:23" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="potential blocking conditions" timestamp="2022-02-04T17:07:23" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:07:23" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralErc20 repayments potential blocking conditions when System is suspended then calling repay() reverts" time="0.0470" classname="then calling repay() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:07:23" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.5470" failures="0">
    <testcase name="Contract: CollateralErc20 repayments potential blocking conditions when System is suspended when System is resumed then calling repay() succeeds" time="0.1300" classname="then calling repay() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is suspended" timestamp="2022-02-04T17:07:24" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralErc20 repayments potential blocking conditions when Issuance is suspended then calling repay() reverts" time="0.0460" classname="then calling repay() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is resumed" timestamp="2022-02-04T17:07:24" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.6130" failures="0">
    <testcase name="Contract: CollateralErc20 repayments potential blocking conditions when Issuance is suspended when Issuance is resumed then calling repay() succeeds" time="0.1070" classname="then calling repay() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="revert conditions" timestamp="2022-02-04T17:07:25" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="1.6100" failures="0">
    <testcase name="Contract: CollateralErc20 repayments revert conditions should revert if they try to repay 0" time="0.1390" classname="should revert if they try to repay 0">
    </testcase>
    <testcase name="Contract: CollateralErc20 repayments revert conditions should revert if they have no sUSD" time="0.0630" classname="should revert if they have no sUSD">
    </testcase>
    <testcase name="Contract: CollateralErc20 repayments revert conditions should revert if they try to pay more than the amount owing" time="0.1960" classname="should revert if they try to pay more than the amount owing">
    </testcase>
  </testsuite>
  <testsuite name="should allow repayments on an sUSD loan" timestamp="2022-02-04T17:07:26" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="1.0420" failures="0">
    <testcase name="Contract: CollateralErc20 repayments should allow repayments on an sUSD loan should work reduce the repayers balance" time="0.0120" classname="should work reduce the repayers balance">
    </testcase>
    <testcase name="Contract: CollateralErc20 repayments should allow repayments on an sUSD loan should update the loan" time="0.0020" classname="should update the loan">
    </testcase>
  </testsuite>
  <testsuite name="it should allow repayments on an sBTC loan" timestamp="2022-02-04T17:07:27" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="1.6400" failures="0">
    <testcase name="Contract: CollateralErc20 repayments it should allow repayments on an sBTC loan should work reduce the repayers balance" time="0.0080" classname="should work reduce the repayers balance">
    </testcase>
    <testcase name="Contract: CollateralErc20 repayments it should allow repayments on an sBTC loan should update the loan" time="0.0000" classname="should update the loan">
    </testcase>
  </testsuite>
  <testsuite name="liquidations" timestamp="2022-02-04T17:07:29" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="potential blocking conditions" timestamp="2022-02-04T17:07:29" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:07:29" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralErc20 liquidations potential blocking conditions when System is suspended then calling repay() reverts" time="0.0490" classname="then calling repay() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:07:29" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.6650" failures="0">
    <testcase name="Contract: CollateralErc20 liquidations potential blocking conditions when System is suspended when System is resumed then calling liquidate() succeeds" time="0.2680" classname="then calling liquidate() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is suspended" timestamp="2022-02-04T17:07:30" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralErc20 liquidations potential blocking conditions when Issuance is suspended then calling repay() reverts" time="0.0420" classname="then calling repay() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is resumed" timestamp="2022-02-04T17:07:30" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.6690" failures="0">
    <testcase name="Contract: CollateralErc20 liquidations potential blocking conditions when Issuance is suspended when Issuance is resumed then calling liquidate() succeeds" time="0.2630" classname="then calling liquidate() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="revert conditions" timestamp="2022-02-04T17:07:31" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="1.0800" failures="0">
    <testcase name="Contract: CollateralErc20 liquidations revert conditions should revert if they have no sUSD" time="0.1240" classname="should revert if they have no sUSD">
    </testcase>
    <testcase name="Contract: CollateralErc20 liquidations revert conditions should revert if they are not under collateralised" time="0.1970" classname="should revert if they are not under collateralised">
    </testcase>
  </testsuite>
  <testsuite name="should allow liquidations on an undercollateralised sUSD loan" timestamp="2022-02-04T17:07:32" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="3.4290" failures="0">
    <testcase name="Contract: CollateralErc20 liquidations should allow liquidations on an undercollateralised sUSD loan should emit a liquidation event" time="0.0000" classname="should emit a liquidation event">
    </testcase>
    <testcase name="Contract: CollateralErc20 liquidations should allow liquidations on an undercollateralised sUSD loan should reduce the liquidators synth amount" time="0.0080" classname="should reduce the liquidators synth amount">
    </testcase>
    <testcase name="Contract: CollateralErc20 liquidations should allow liquidations on an undercollateralised sUSD loan should transfer the liquidated collateral to the liquidator" time="0.0120" classname="should transfer the liquidated collateral to the liquidator">
    </testcase>
    <testcase name="Contract: CollateralErc20 liquidations should allow liquidations on an undercollateralised sUSD loan should pay the interest to the fee pool" time="0.0180" classname="should pay the interest to the fee pool">
    </testcase>
    <testcase name="Contract: CollateralErc20 liquidations should allow liquidations on an undercollateralised sUSD loan should fix the collateralisation ratio of the loan" time="0.0350" classname="should fix the collateralisation ratio of the loan">
    </testcase>
  </testsuite>
  <testsuite name="when a loan needs to be completely liquidated" timestamp="2022-02-04T17:07:36" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="2.5190" failures="0">
    <testcase name="Contract: CollateralErc20 liquidations when a loan needs to be completely liquidated should emit the event" time="0.0000" classname="should emit the event">
    </testcase>
    <testcase name="Contract: CollateralErc20 liquidations when a loan needs to be completely liquidated should close the loan correctly" time="0.0080" classname="should close the loan correctly">
    </testcase>
    <testcase name="Contract: CollateralErc20 liquidations when a loan needs to be completely liquidated should transfer all the collateral to the liquidator" time="0.0090" classname="should transfer all the collateral to the liquidator">
    </testcase>
    <testcase name="Contract: CollateralErc20 liquidations when a loan needs to be completely liquidated should reduce the liquidators synth balance" time="0.0120" classname="should reduce the liquidators synth balance">
    </testcase>
  </testsuite>
  <testsuite name="closing" timestamp="2022-02-04T17:07:38" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="potential blocking conditions" timestamp="2022-02-04T17:07:38" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:07:38" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralErc20 closing potential blocking conditions when System is suspended then calling close() reverts" time="0.0440" classname="then calling close() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:07:39" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.5720" failures="0">
    <testcase name="Contract: CollateralErc20 closing potential blocking conditions when System is suspended when System is resumed then calling close() succeeds" time="0.1380" classname="then calling close() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is suspended" timestamp="2022-02-04T17:07:39" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralErc20 closing potential blocking conditions when Issuance is suspended then calling close() reverts" time="0.0420" classname="then calling close() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is resumed" timestamp="2022-02-04T17:07:40" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.5630" failures="0">
    <testcase name="Contract: CollateralErc20 closing potential blocking conditions when Issuance is suspended when Issuance is resumed then calling close() succeeds" time="0.1340" classname="then calling close() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="revert conditions" timestamp="2022-02-04T17:07:40" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.9710" failures="0">
    <testcase name="Contract: CollateralErc20 closing revert conditions should revert if they have no sUSD" time="0.1480" classname="should revert if they have no sUSD">
    </testcase>
    <testcase name="Contract: CollateralErc20 closing revert conditions should revert if they are not the borrower" time="0.0390" classname="should revert if they are not the borrower">
    </testcase>
  </testsuite>
  <testsuite name="when it works" timestamp="2022-02-04T17:07:41" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="2.2940" failures="0">
    <testcase name="Contract: CollateralErc20 closing when it works should record the loan as closed" time="0.0130" classname="should record the loan as closed">
    </testcase>
    <testcase name="Contract: CollateralErc20 closing when it works should pay the fee pool" time="0.0100" classname="should pay the fee pool">
    </testcase>
    <testcase name="Contract: CollateralErc20 closing when it works should transfer the collateral back to the borrower" time="0.0080" classname="should transfer the collateral back to the borrower">
    </testcase>
    <testcase name="Contract: CollateralErc20 closing when it works should emit the event" time="0.0000" classname="should emit the event">
    </testcase>
  </testsuite>
  <testsuite name="drawing" timestamp="2022-02-04T17:07:43" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="potential blocking conditions" timestamp="2022-02-04T17:07:43" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:07:43" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralErc20 drawing potential blocking conditions when System is suspended then calling draw() reverts" time="0.0400" classname="then calling draw() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:07:44" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.5210" failures="0">
    <testcase name="Contract: CollateralErc20 drawing potential blocking conditions when System is suspended when System is resumed then calling draw() succeeds" time="0.1140" classname="then calling draw() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is suspended" timestamp="2022-02-04T17:07:44" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralErc20 drawing potential blocking conditions when Issuance is suspended then calling draw() reverts" time="0.0450" classname="then calling draw() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is resumed" timestamp="2022-02-04T17:07:45" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="1.1440" failures="0">
    <testcase name="Contract: CollateralErc20 drawing potential blocking conditions when Issuance is suspended when Issuance is resumed then calling draw() succeeds" time="0.1140" classname="then calling draw() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when rates have gone stale" timestamp="2022-02-04T17:07:46" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralErc20 drawing potential blocking conditions when rates have gone stale then calling draw() reverts" time="0.0320" classname="then calling draw() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when BTC gets a rate" timestamp="2022-02-04T17:07:46" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.6490" failures="0">
    <testcase name="Contract: CollateralErc20 drawing potential blocking conditions when rates have gone stale when BTC gets a rate then calling draw() succeeds" time="0.1100" classname="then calling draw() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="revert conditions" timestamp="2022-02-04T17:07:47" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.6200" failures="0">
    <testcase name="Contract: CollateralErc20 drawing revert conditions should revert if the draw would under collateralise the loan" time="0.2840" classname="should revert if the draw would under collateralise the loan">
    </testcase>
  </testsuite>
  <testsuite name="should draw the loan down" timestamp="2022-02-04T17:07:48" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralErc20.js" time="0.4850" failures="0">
    <testcase name="Contract: CollateralErc20 drawing should draw the loan down should update the amount on the loan" time="0.0000" classname="should update the amount on the loan">
    </testcase>
  </testsuite>
  <testsuite name="Contract: CollateralEth" timestamp="2022-02-04T17:07:48" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralEth should set constructor params on deployment" time="0.0340" classname="should set constructor params on deployment">
    </testcase>
    <testcase name="Contract: CollateralEth should ensure only expected functions are mutative" time="0.1300" classname="should ensure only expected functions are mutative">
    </testcase>
    <testcase name="Contract: CollateralEth should access its dependencies via the address resolver" time="0.0230" classname="should access its dependencies via the address resolver">
    </testcase>
  </testsuite>
  <testsuite name="cratio test" timestamp="2022-02-04T17:07:54" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="sUSD loans" timestamp="2022-02-04T17:07:54" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="1.5610" failures="0">
    <testcase name="Contract: CollateralEth cratio test sUSD loans when we issue at 200%, our c ratio is 200%" time="0.0300" classname="when we issue at 200%, our c ratio is 200%">
    </testcase>
    <testcase name="Contract: CollateralEth cratio test sUSD loans when the price falls by 25% our c ratio is 150%" time="0.0460" classname="when the price falls by 25% our c ratio is 150%">
    </testcase>
    <testcase name="Contract: CollateralEth cratio test sUSD loans when the price increases by 100% our c ratio is 400%" time="0.0740" classname="when the price increases by 100% our c ratio is 400%">
    </testcase>
    <testcase name="Contract: CollateralEth cratio test sUSD loans when the price falls by 50% our cratio is 100%" time="0.0530" classname="when the price falls by 50% our cratio is 100%">
    </testcase>
  </testsuite>
  <testsuite name="sETH loans" timestamp="2022-02-04T17:07:55" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.8510" failures="0">
    <testcase name="Contract: CollateralEth cratio test sETH loans when we issue at 200%, our c ratio is 200%" time="0.0590" classname="when we issue at 200%, our c ratio is 200%">
    </testcase>
    <testcase name="Contract: CollateralEth cratio test sETH loans price changes should not change the cratio" time="0.0670" classname="price changes should not change the cratio">
    </testcase>
  </testsuite>
  <testsuite name="max loan test" timestamp="2022-02-04T17:07:56" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.2010" failures="0">
    <testcase name="Contract: CollateralEth max loan test should convert correctly" time="0.0500" classname="should convert correctly">
    </testcase>
  </testsuite>
  <testsuite name="opening" timestamp="2022-02-04T17:07:56" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="potential blocking conditions" timestamp="2022-02-04T17:07:56" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:07:56" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralEth opening potential blocking conditions when System is suspended then calling openLoan() reverts" time="0.0650" classname="then calling openLoan() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:07:57" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.3750" failures="0">
    <testcase name="Contract: CollateralEth opening potential blocking conditions when System is suspended when System is resumed then calling openLoan() succeeds" time="0.1670" classname="then calling openLoan() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is suspended" timestamp="2022-02-04T17:07:57" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralEth opening potential blocking conditions when Issuance is suspended then calling openLoan() reverts" time="0.0400" classname="then calling openLoan() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is resumed" timestamp="2022-02-04T17:07:57" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.3480" failures="0">
    <testcase name="Contract: CollateralEth opening potential blocking conditions when Issuance is suspended when Issuance is resumed then calling openLoan() succeeds" time="0.1520" classname="then calling openLoan() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when rates have gone stale" timestamp="2022-02-04T17:07:57" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralEth opening potential blocking conditions when rates have gone stale then calling openLoan() reverts" time="0.0350" classname="then calling openLoan() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when ETH gets a rate" timestamp="2022-02-04T17:07:58" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.3980" failures="0">
    <testcase name="Contract: CollateralEth opening potential blocking conditions when rates have gone stale when ETH gets a rate then calling openLoan() succeeds" time="0.1680" classname="then calling openLoan() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="revert conditions" timestamp="2022-02-04T17:07:58" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.7950" failures="0">
    <testcase name="Contract: CollateralEth opening revert conditions should revert if they request a currency that is not supported" time="0.0410" classname="should revert if they request a currency that is not supported">
    </testcase>
    <testcase name="Contract: CollateralEth opening revert conditions should revert if they send 0 collateral" time="0.0670" classname="should revert if they send 0 collateral">
    </testcase>
    <testcase name="Contract: CollateralEth opening revert conditions should revert if the requested loan exceeds borrowing power" time="0.1550" classname="should revert if the requested loan exceeds borrowing power">
    </testcase>
  </testsuite>
  <testsuite name="should open an eth loan denominated in sUSD" timestamp="2022-02-04T17:07:59" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="1.4210" failures="0">
    <testcase name="Contract: CollateralEth opening should open an eth loan denominated in sUSD should set the loan correctly" time="0.0000" classname="should set the loan correctly">
    </testcase>
    <testcase name="Contract: CollateralEth opening should open an eth loan denominated in sUSD should issue the correct amount to the borrower" time="0.0180" classname="should issue the correct amount to the borrower">
    </testcase>
    <testcase name="Contract: CollateralEth opening should open an eth loan denominated in sUSD should issue the minting fee to the fee pool" time="0.0070" classname="should issue the minting fee to the fee pool">
    </testcase>
    <testcase name="Contract: CollateralEth opening should open an eth loan denominated in sUSD should emit the event properly" time="0.0000" classname="should emit the event properly">
    </testcase>
  </testsuite>
  <testsuite name="should open an eth loan denominated in sETH" timestamp="2022-02-04T17:08:00" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="1.5570" failures="0">
    <testcase name="Contract: CollateralEth opening should open an eth loan denominated in sETH should set the loan correctly" time="0.0000" classname="should set the loan correctly">
    </testcase>
    <testcase name="Contract: CollateralEth opening should open an eth loan denominated in sETH should issue the correct amount to the borrower" time="0.0130" classname="should issue the correct amount to the borrower">
    </testcase>
    <testcase name="Contract: CollateralEth opening should open an eth loan denominated in sETH should issue the minting fee to the fee pool" time="0.0110" classname="should issue the minting fee to the fee pool">
    </testcase>
    <testcase name="Contract: CollateralEth opening should open an eth loan denominated in sETH should emit the event properly" time="0.0000" classname="should emit the event properly">
    </testcase>
  </testsuite>
  <testsuite name="deposits" timestamp="2022-02-04T17:08:02" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="potential blocking conditions" timestamp="2022-02-04T17:08:02" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:08:02" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralEth deposits potential blocking conditions when System is suspended then calling deposit() reverts" time="0.0450" classname="then calling deposit() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:08:02" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.5140" failures="0">
    <testcase name="Contract: CollateralEth deposits potential blocking conditions when System is suspended when System is resumed then calling deposit() succeeds" time="0.0790" classname="then calling deposit() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is suspended" timestamp="2022-02-04T17:08:03" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralEth deposits potential blocking conditions when Issuance is suspended then calling deposit() reverts" time="0.0470" classname="then calling deposit() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is resumed" timestamp="2022-02-04T17:08:03" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.5060" failures="0">
    <testcase name="Contract: CollateralEth deposits potential blocking conditions when Issuance is suspended when Issuance is resumed then calling deposit() succeeds" time="0.0720" classname="then calling deposit() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="revert conditions" timestamp="2022-02-04T17:08:04" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.4170" failures="0">
    <testcase name="Contract: CollateralEth deposits revert conditions should revert if they do not send any eth" time="0.0470" classname="should revert if they do not send any eth">
    </testcase>
  </testsuite>
  <testsuite name="should allow deposits" timestamp="2022-02-04T17:08:04" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.4540" failures="0">
    <testcase name="Contract: CollateralEth deposits should allow deposits should increase the total collateral of the loan" time="0.0070" classname="should increase the total collateral of the loan">
    </testcase>
  </testsuite>
  <testsuite name="withdraws" timestamp="2022-02-04T17:08:05" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="potential blocking conditions" timestamp="2022-02-04T17:08:05" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:08:05" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralEth withdraws potential blocking conditions when System is suspended then calling withdraw() reverts" time="0.0470" classname="then calling withdraw() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:08:05" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.5370" failures="0">
    <testcase name="Contract: CollateralEth withdraws potential blocking conditions when System is suspended when System is resumed then calling withdraw() succeeds" time="0.1170" classname="then calling withdraw() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is suspended" timestamp="2022-02-04T17:08:06" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralEth withdraws potential blocking conditions when Issuance is suspended then calling withdraw() reverts" time="0.0440" classname="then calling withdraw() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is resumed" timestamp="2022-02-04T17:08:06" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.5330" failures="0">
    <testcase name="Contract: CollateralEth withdraws potential blocking conditions when Issuance is suspended when Issuance is resumed then calling withdraw() succeeds" time="0.0900" classname="then calling withdraw() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="revert conditions" timestamp="2022-02-04T17:08:07" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="1.6410" failures="0">
    <testcase name="Contract: CollateralEth withdraws revert conditions should revert if the withdraw would put them under minimum collateralisation" time="0.1900" classname="should revert if the withdraw would put them under minimum collateralisation">
    </testcase>
    <testcase name="Contract: CollateralEth withdraws revert conditions should revert if they try to withdraw all the collateral" time="0.1900" classname="should revert if they try to withdraw all the collateral">
    </testcase>
    <testcase name="Contract: CollateralEth withdraws revert conditions should revert if the sender is not borrower" time="0.0510" classname="should revert if the sender is not borrower">
    </testcase>
  </testsuite>
  <testsuite name="should allow withdraws" timestamp="2022-02-04T17:08:08" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="1.5340" failures="0">
    <testcase name="Contract: CollateralEth withdraws should allow withdraws should decrease the total collateral of the loan" time="0.0120" classname="should decrease the total collateral of the loan">
    </testcase>
    <testcase name="Contract: CollateralEth withdraws should allow withdraws should create a pending withdraw entry" time="0.0080" classname="should create a pending withdraw entry">
    </testcase>
    <testcase name="Contract: CollateralEth withdraws should allow withdraws should allow the withdrawer to withdraw" time="0.0250" classname="should allow the withdrawer to withdraw">
    </testcase>
  </testsuite>
  <testsuite name="repayments" timestamp="2022-02-04T17:08:10" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="potential blocking conditions" timestamp="2022-02-04T17:08:10" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:08:10" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralEth repayments potential blocking conditions when System is suspended then calling repay() reverts" time="0.0490" classname="then calling repay() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:08:11" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.5260" failures="0">
    <testcase name="Contract: CollateralEth repayments potential blocking conditions when System is suspended when System is resumed then calling repay() succeeds" time="0.1210" classname="then calling repay() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is suspended" timestamp="2022-02-04T17:08:11" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralEth repayments potential blocking conditions when Issuance is suspended then calling repay() reverts" time="0.0480" classname="then calling repay() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is resumed" timestamp="2022-02-04T17:08:12" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.5170" failures="0">
    <testcase name="Contract: CollateralEth repayments potential blocking conditions when Issuance is suspended when Issuance is resumed then calling repay() succeeds" time="0.1190" classname="then calling repay() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="revert conditions" timestamp="2022-02-04T17:08:12" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="1.6550" failures="0">
    <testcase name="Contract: CollateralEth repayments revert conditions should revert if they try to repay 0" time="0.1450" classname="should revert if they try to repay 0">
    </testcase>
    <testcase name="Contract: CollateralEth repayments revert conditions should revert if they have no sUSD" time="0.0630" classname="should revert if they have no sUSD">
    </testcase>
    <testcase name="Contract: CollateralEth repayments revert conditions should revert if they try to pay more than the amount owing" time="0.1990" classname="should revert if they try to pay more than the amount owing">
    </testcase>
  </testsuite>
  <testsuite name="should allow repayments on an sUSD loan" timestamp="2022-02-04T17:08:14" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="1.6110" failures="0">
    <testcase name="Contract: CollateralEth repayments should allow repayments on an sUSD loan should work reduce the repayers balance" time="0.0130" classname="should work reduce the repayers balance">
    </testcase>
    <testcase name="Contract: CollateralEth repayments should allow repayments on an sUSD loan should update the loan" time="0.0000" classname="should update the loan">
    </testcase>
    <testcase name="Contract: CollateralEth repayments should allow repayments on an sUSD loan should emit the event properly" time="0.0000" classname="should emit the event properly">
    </testcase>
  </testsuite>
  <testsuite name="it should allow repayments on an sETH loan" timestamp="2022-02-04T17:08:16" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="2.3810" failures="0">
    <testcase name="Contract: CollateralEth repayments it should allow repayments on an sETH loan should work reduce the repayers balance" time="0.0060" classname="should work reduce the repayers balance">
    </testcase>
    <testcase name="Contract: CollateralEth repayments it should allow repayments on an sETH loan should update the loan" time="0.0000" classname="should update the loan">
    </testcase>
    <testcase name="Contract: CollateralEth repayments it should allow repayments on an sETH loan should emit the event properly" time="0.0000" classname="should emit the event properly">
    </testcase>
  </testsuite>
  <testsuite name="liquidations" timestamp="2022-02-04T17:08:18" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="potential blocking conditions" timestamp="2022-02-04T17:08:18" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:08:18" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralEth liquidations potential blocking conditions when System is suspended then calling repay() reverts" time="0.0560" classname="then calling repay() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:08:19" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.6590" failures="0">
    <testcase name="Contract: CollateralEth liquidations potential blocking conditions when System is suspended when System is resumed then calling liquidate() succeeds" time="0.2240" classname="then calling liquidate() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is suspended" timestamp="2022-02-04T17:08:19" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralEth liquidations potential blocking conditions when Issuance is suspended then calling repay() reverts" time="0.0630" classname="then calling repay() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is resumed" timestamp="2022-02-04T17:08:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.7890" failures="0">
    <testcase name="Contract: CollateralEth liquidations potential blocking conditions when Issuance is suspended when Issuance is resumed then calling liquidate() succeeds" time="0.2590" classname="then calling liquidate() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="revert conditions" timestamp="2022-02-04T17:08:20" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="1.4140" failures="0">
    <testcase name="Contract: CollateralEth liquidations revert conditions should revert if they have no sUSD" time="0.1650" classname="should revert if they have no sUSD">
    </testcase>
    <testcase name="Contract: CollateralEth liquidations revert conditions should revert if they are not under collateralised" time="0.3650" classname="should revert if they are not under collateralised">
    </testcase>
  </testsuite>
  <testsuite name="should allow liquidations on an undercollateralised sUSD loan" timestamp="2022-02-04T17:08:22" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="4.0690" failures="0">
    <testcase name="Contract: CollateralEth liquidations should allow liquidations on an undercollateralised sUSD loan should emit a liquidation event" time="0.0000" classname="should emit a liquidation event">
    </testcase>
    <testcase name="Contract: CollateralEth liquidations should allow liquidations on an undercollateralised sUSD loan should reduce the liquidators synth amount" time="0.0070" classname="should reduce the liquidators synth amount">
    </testcase>
    <testcase name="Contract: CollateralEth liquidations should allow liquidations on an undercollateralised sUSD loan should create a pending withdrawl entry" time="0.0150" classname="should create a pending withdrawl entry">
    </testcase>
    <testcase name="Contract: CollateralEth liquidations should allow liquidations on an undercollateralised sUSD loan should pay the interest to the fee pool" time="0.0120" classname="should pay the interest to the fee pool">
    </testcase>
    <testcase name="Contract: CollateralEth liquidations should allow liquidations on an undercollateralised sUSD loan should fix the collateralisation ratio of the loan" time="0.0310" classname="should fix the collateralisation ratio of the loan">
    </testcase>
    <testcase name="Contract: CollateralEth liquidations should allow liquidations on an undercollateralised sUSD loan should allow the liquidator to call claim" time="0.0250" classname="should allow the liquidator to call claim">
    </testcase>
  </testsuite>
  <testsuite name="when a loan needs to be completely liquidated" timestamp="2022-02-04T17:08:26" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="3.0510" failures="0">
    <testcase name="Contract: CollateralEth liquidations when a loan needs to be completely liquidated should emit the event" time="0.0010" classname="should emit the event">
    </testcase>
    <testcase name="Contract: CollateralEth liquidations when a loan needs to be completely liquidated should close the loan correctly" time="0.0120" classname="should close the loan correctly">
    </testcase>
    <testcase name="Contract: CollateralEth liquidations when a loan needs to be completely liquidated should reduce the liquidators synth amount" time="0.0110" classname="should reduce the liquidators synth amount">
    </testcase>
    <testcase name="Contract: CollateralEth liquidations when a loan needs to be completely liquidated should create a pending withdrawl entry" time="0.0100" classname="should create a pending withdrawl entry">
    </testcase>
    <testcase name="Contract: CollateralEth liquidations when a loan needs to be completely liquidated should reduce the liquidators synth balance" time="0.0190" classname="should reduce the liquidators synth balance">
    </testcase>
  </testsuite>
  <testsuite name="closing" timestamp="2022-02-04T17:08:29" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="potential blocking conditions" timestamp="2022-02-04T17:08:29" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:08:29" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralEth closing potential blocking conditions when System is suspended then calling close() reverts" time="0.0460" classname="then calling close() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:08:29" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.5380" failures="0">
    <testcase name="Contract: CollateralEth closing potential blocking conditions when System is suspended when System is resumed then calling close() succeeds" time="0.1240" classname="then calling close() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is suspended" timestamp="2022-02-04T17:08:30" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralEth closing potential blocking conditions when Issuance is suspended then calling close() reverts" time="0.0460" classname="then calling close() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is resumed" timestamp="2022-02-04T17:08:30" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.5160" failures="0">
    <testcase name="Contract: CollateralEth closing potential blocking conditions when Issuance is suspended when Issuance is resumed then calling close() succeeds" time="0.1210" classname="then calling close() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="revert conditions" timestamp="2022-02-04T17:08:31" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.9590" failures="0">
    <testcase name="Contract: CollateralEth closing revert conditions should revert if they have no sUSD" time="0.1480" classname="should revert if they have no sUSD">
    </testcase>
    <testcase name="Contract: CollateralEth closing revert conditions should revert if they are not the borrower" time="0.0450" classname="should revert if they are not the borrower">
    </testcase>
  </testsuite>
  <testsuite name="when it works" timestamp="2022-02-04T17:08:32" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="3.1440" failures="0">
    <testcase name="Contract: CollateralEth closing when it works should record the loan as closed" time="0.0090" classname="should record the loan as closed">
    </testcase>
    <testcase name="Contract: CollateralEth closing when it works should pay the fee pool" time="0.0130" classname="should pay the fee pool">
    </testcase>
    <testcase name="Contract: CollateralEth closing when it works should add a pending withdrawl entry" time="0.0050" classname="should add a pending withdrawl entry">
    </testcase>
    <testcase name="Contract: CollateralEth closing when it works should allow the closer to withdraw" time="0.0160" classname="should allow the closer to withdraw">
    </testcase>
    <testcase name="Contract: CollateralEth closing when it works should emit the event" time="0.0000" classname="should emit the event">
    </testcase>
  </testsuite>
  <testsuite name="drawing" timestamp="2022-02-04T17:08:35" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="potential blocking conditions" timestamp="2022-02-04T17:08:35" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:08:35" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralEth drawing potential blocking conditions when System is suspended then calling draw() reverts" time="0.0440" classname="then calling draw() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:08:35" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.5320" failures="0">
    <testcase name="Contract: CollateralEth drawing potential blocking conditions when System is suspended when System is resumed then calling draw() succeeds" time="0.1330" classname="then calling draw() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is suspended" timestamp="2022-02-04T17:08:36" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralEth drawing potential blocking conditions when Issuance is suspended then calling draw() reverts" time="0.0510" classname="then calling draw() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is resumed" timestamp="2022-02-04T17:08:37" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.6330" failures="0">
    <testcase name="Contract: CollateralEth drawing potential blocking conditions when Issuance is suspended when Issuance is resumed then calling draw() succeeds" time="0.1630" classname="then calling draw() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when rates have gone stale" timestamp="2022-02-04T17:08:37" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralEth drawing potential blocking conditions when rates have gone stale then calling draw() reverts" time="0.0380" classname="then calling draw() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when ETH gets a rate" timestamp="2022-02-04T17:08:38" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.6170" failures="0">
    <testcase name="Contract: CollateralEth drawing potential blocking conditions when rates have gone stale when ETH gets a rate then calling draw() succeeds" time="0.1440" classname="then calling draw() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="revert conditions" timestamp="2022-02-04T17:08:38" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.5650" failures="0">
    <testcase name="Contract: CollateralEth drawing revert conditions should revert if the draw would under collateralise the loan" time="0.1810" classname="should revert if the draw would under collateralise the loan">
    </testcase>
  </testsuite>
  <testsuite name="should draw the loan down" timestamp="2022-02-04T17:08:39" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="0.5210" failures="0">
    <testcase name="Contract: CollateralEth drawing should draw the loan down should update the amount on the loan" time="0.0010" classname="should update the amount on the loan">
    </testcase>
  </testsuite>
  <testsuite name="Accrue Interest" timestamp="2022-02-04T17:08:39" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralEth.js" time="1.0430" failures="0">
    <testcase name="Contract: CollateralEth Accrue Interest should correctly determine the interest on loans" time="0.7380" classname="should correctly determine the interest on loans">
    </testcase>
  </testsuite>
  <testsuite name="Contract: CollateralManager" timestamp="2022-02-04T17:08:40" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralManager should set constructor params on deployment" time="0.0210" classname="should set constructor params on deployment">
    </testcase>
    <testcase name="Contract: CollateralManager should ensure only expected functions are mutative" time="0.1180" classname="should ensure only expected functions are mutative">
    </testcase>
    <testcase name="Contract: CollateralManager should access its dependencies via the address resolver" time="0.0200" classname="should access its dependencies via the address resolver">
    </testcase>
  </testsuite>
  <testsuite name="getting collaterals" timestamp="2022-02-04T17:08:49" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.3060" failures="0">
    <testcase name="Contract: CollateralManager getting collaterals should add the collaterals during construction" time="0.0150" classname="should add the collaterals during construction">
    </testcase>
  </testsuite>
  <testsuite name="adding synths" timestamp="2022-02-04T17:08:49" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.8860" failures="0">
    <testcase name="Contract: CollateralManager adding synths should add the synths during construction" time="0.0180" classname="should add the synths during construction">
    </testcase>
    <testcase name="Contract: CollateralManager adding synths should not allow duplicate synths to be added" time="0.0490" classname="should not allow duplicate synths to be added">
    </testcase>
    <testcase name="Contract: CollateralManager adding synths should revert when input array lengths dont match" time="0.0580" classname="should revert when input array lengths dont match">
    </testcase>
  </testsuite>
  <testsuite name="removing synths" timestamp="2022-02-04T17:08:50" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.6030" failures="0">
    <testcase name="Contract: CollateralManager removing synths should successfully remove a synth" time="0.0230" classname="should successfully remove a synth">
    </testcase>
    <testcase name="Contract: CollateralManager removing synths should revert when input array lengths dont match" time="0.0150" classname="should revert when input array lengths dont match">
    </testcase>
  </testsuite>
  <testsuite name="default values for totalLong and totalShort" timestamp="2022-02-04T17:08:51" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.6080" failures="0">
    <testcase name="Contract: CollateralManager default values for totalLong and totalShort totalLong should be 0" time="0.0430" classname="totalLong should be 0">
    </testcase>
    <testcase name="Contract: CollateralManager default values for totalLong and totalShort totalShort should be 0" time="0.0450" classname="totalShort should be 0">
    </testcase>
  </testsuite>
  <testsuite name="should only allow opening positions up to the debt limiit" timestamp="2022-02-04T17:08:51" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.5010" failures="0">
    <testcase name="Contract: CollateralManager should only allow opening positions up to the debt limiit should not allow opening a position that would surpass the debt limit" time="0.2390" classname="should not allow opening a position that would surpass the debt limit">
    </testcase>
  </testsuite>
  <testsuite name="tracking synth balances across collaterals" timestamp="2022-02-04T17:08:52" tests="10" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="13.1060" failures="0">
    <testcase name="Contract: CollateralManager tracking synth balances across collaterals should correctly get the total sUSD balance" time="0.0290" classname="should correctly get the total sUSD balance">
    </testcase>
    <testcase name="Contract: CollateralManager tracking synth balances across collaterals should correctly get the total sETH balance" time="0.0140" classname="should correctly get the total sETH balance">
    </testcase>
    <testcase name="Contract: CollateralManager tracking synth balances across collaterals should correctly get the total sBTC balance" time="0.6160" classname="should correctly get the total sBTC balance">
    </testcase>
    <testcase name="Contract: CollateralManager tracking synth balances across collaterals should correctly get the total short ETTH balance" time="0.0200" classname="should correctly get the total short ETTH balance">
    </testcase>
    <testcase name="Contract: CollateralManager tracking synth balances across collaterals should get the total long balance in sUSD correctly" time="0.0350" classname="should get the total long balance in sUSD correctly">
    </testcase>
    <testcase name="Contract: CollateralManager tracking synth balances across collaterals should get the total short balance in sUSD correctly" time="0.0520" classname="should get the total short balance in sUSD correctly">
    </testcase>
    <testcase name="Contract: CollateralManager tracking synth balances across collaterals should get the total long and short balance in sUSD correctly" time="0.0390" classname="should get the total long and short balance in sUSD correctly">
    </testcase>
    <testcase name="Contract: CollateralManager tracking synth balances across collaterals should report if a rate is invalid" time="0.0950" classname="should report if a rate is invalid">
    </testcase>
    <testcase name="Contract: CollateralManager tracking synth balances across collaterals should reduce the sUSD balance when a loan is closed" time="0.2040" classname="should reduce the sUSD balance when a loan is closed">
    </testcase>
    <testcase name="Contract: CollateralManager tracking synth balances across collaterals should reduce the total balance in sUSD when a loan is closed" time="0.2370" classname="should reduce the total balance in sUSD when a loan is closed">
    </testcase>
  </testsuite>
  <testsuite name="tracking synth balances across collaterals" timestamp="2022-02-04T17:09:05" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.6670" failures="0">
    <testcase name="Contract: CollateralManager tracking synth balances across collaterals should not change the system debt." time="0.1160" classname="should not change the system debt.">
    </testcase>
  </testsuite>
  <testsuite name="setting variables" timestamp="2022-02-04T17:09:06" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="setUtilisationMultiplier" timestamp="2022-02-04T17:09:06" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="revert condtions" timestamp="2022-02-04T17:09:06" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.5230" failures="0">
    <testcase name="Contract: CollateralManager setting variables setUtilisationMultiplier revert condtions should fail if not called by the owner" time="0.0150" classname="should fail if not called by the owner">
    </testcase>
    <testcase name="Contract: CollateralManager setting variables setUtilisationMultiplier revert condtions should fail if the minimum is 0" time="0.0160" classname="should fail if the minimum is 0">
    </testcase>
  </testsuite>
  <testsuite name="when it succeeds" timestamp="2022-02-04T17:09:06" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.2440" failures="0">
    <testcase name="Contract: CollateralManager setting variables setUtilisationMultiplier when it succeeds should update the utilisation multiplier" time="0.0040" classname="should update the utilisation multiplier">
    </testcase>
  </testsuite>
  <testsuite name="setMaxSkewRate" timestamp="2022-02-04T17:09:06" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="revert condtions" timestamp="2022-02-04T17:09:06" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.2590" failures="0">
    <testcase name="Contract: CollateralManager setting variables setMaxSkewRate revert condtions should fail if not called by the owner" time="0.0150" classname="should fail if not called by the owner">
    </testcase>
  </testsuite>
  <testsuite name="when it succeeds" timestamp="2022-02-04T17:09:07" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.5240" failures="0">
    <testcase name="Contract: CollateralManager setting variables setMaxSkewRate when it succeeds should update the max skew rate" time="0.0080" classname="should update the max skew rate">
    </testcase>
    <testcase name="Contract: CollateralManager setting variables setMaxSkewRate when it succeeds should allow the max skew rate to be 0" time="0.0110" classname="should allow the max skew rate to be 0">
    </testcase>
  </testsuite>
  <testsuite name="setBaseBorrowRate" timestamp="2022-02-04T17:09:07" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="revert condtions" timestamp="2022-02-04T17:09:07" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.2620" failures="0">
    <testcase name="Contract: CollateralManager setting variables setBaseBorrowRate revert condtions should fail if not called by the owner" time="0.0320" classname="should fail if not called by the owner">
    </testcase>
  </testsuite>
  <testsuite name="when it succeeds" timestamp="2022-02-04T17:09:07" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.5150" failures="0">
    <testcase name="Contract: CollateralManager setting variables setBaseBorrowRate when it succeeds should update the base interest rate" time="0.0080" classname="should update the base interest rate">
    </testcase>
    <testcase name="Contract: CollateralManager setting variables setBaseBorrowRate when it succeeds should allow the base interest rate to be 0" time="0.0180" classname="should allow the base interest rate to be 0">
    </testcase>
  </testsuite>
  <testsuite name="setBaseShortRate" timestamp="2022-02-04T17:09:08" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="revert condtions" timestamp="2022-02-04T17:09:08" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.2660" failures="0">
    <testcase name="Contract: CollateralManager setting variables setBaseShortRate revert condtions should fail if not called by the owner" time="0.0250" classname="should fail if not called by the owner">
    </testcase>
  </testsuite>
  <testsuite name="when it succeeds" timestamp="2022-02-04T17:09:08" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.5230" failures="0">
    <testcase name="Contract: CollateralManager setting variables setBaseShortRate when it succeeds should update the base short rate" time="0.0050" classname="should update the base short rate">
    </testcase>
    <testcase name="Contract: CollateralManager setting variables setBaseShortRate when it succeeds should allow the base short rate to be 0" time="0.0130" classname="should allow the base short rate to be 0">
    </testcase>
  </testsuite>
  <testsuite name="updateBorrowRatesCollateral" timestamp="2022-02-04T17:09:09" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="revert condtions" timestamp="2022-02-04T17:09:09" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.2540" failures="0">
    <testcase name="Contract: CollateralManager setting variables updateBorrowRatesCollateral revert condtions should fail if not called by the collateral contract" time="0.0150" classname="should fail if not called by the collateral contract">
    </testcase>
  </testsuite>
  <testsuite name="when it succeeds" timestamp="2022-02-04T17:09:09" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.6440" failures="0">
    <testcase name="Contract: CollateralManager setting variables updateBorrowRatesCollateral when it succeeds updateBorrowRatesCollateral() can only be invoked by collateral" time="0.3880" classname="updateBorrowRatesCollateral() can only be invoked by collateral">
    </testcase>
  </testsuite>
  <testsuite name="updateShortRatesCollateral" timestamp="2022-02-04T17:09:10" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="revert condtions" timestamp="2022-02-04T17:09:10" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.2620" failures="0">
    <testcase name="Contract: CollateralManager setting variables updateShortRatesCollateral revert condtions should fail if not called by the collateral contract" time="0.0240" classname="should fail if not called by the collateral contract">
    </testcase>
  </testsuite>
  <testsuite name="when it succeeds" timestamp="2022-02-04T17:09:10" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.6420" failures="0">
    <testcase name="Contract: CollateralManager setting variables updateShortRatesCollateral when it succeeds updateShortRatesCollateral() can only be invoked by collateral" time="0.3900" classname="updateShortRatesCollateral() can only be invoked by collateral">
    </testcase>
  </testsuite>
  <testsuite name="adding collateral" timestamp="2022-02-04T17:09:11" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="revert conditions" timestamp="2022-02-04T17:09:11" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.2420" failures="0">
    <testcase name="Contract: CollateralManager adding collateral revert conditions should revert if the caller is not the owner" time="0.0130" classname="should revert if the caller is not the owner">
    </testcase>
  </testsuite>
  <testsuite name="when a new collateral is added" timestamp="2022-02-04T17:09:11" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.2840" failures="0">
    <testcase name="Contract: CollateralManager adding collateral when a new collateral is added should add the collateral" time="0.0080" classname="should add the collateral">
    </testcase>
  </testsuite>
  <testsuite name="retreiving collateral by address" timestamp="2022-02-04T17:09:11" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.4750" failures="0">
    <testcase name="Contract: CollateralManager adding collateral retreiving collateral by address if a collateral is in the manager, it should return true" time="0.0060" classname="if a collateral is in the manager, it should return true">
    </testcase>
    <testcase name="Contract: CollateralManager adding collateral retreiving collateral by address if a collateral is not in the manager, it should return false" time="0.0060" classname="if a collateral is not in the manager, it should return false">
    </testcase>
  </testsuite>
  <testsuite name="removing collateral" timestamp="2022-02-04T17:09:12" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="revert conditions" timestamp="2022-02-04T17:09:12" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.2530" failures="0">
    <testcase name="Contract: CollateralManager removing collateral revert conditions should revert if the caller is not the owner" time="0.0160" classname="should revert if the caller is not the owner">
    </testcase>
  </testsuite>
  <testsuite name="when a collateral is removed" timestamp="2022-02-04T17:09:12" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.2610" failures="0">
    <testcase name="Contract: CollateralManager removing collateral when a collateral is removed should not have the collateral" time="0.0090" classname="should not have the collateral">
    </testcase>
  </testsuite>
  <testsuite name="removing synths" timestamp="2022-02-04T17:09:12" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="revert conditions" timestamp="2022-02-04T17:09:12" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.2500" failures="0">
    <testcase name="Contract: CollateralManager removing synths revert conditions should revert if the caller is not the owner" time="0.0160" classname="should revert if the caller is not the owner">
    </testcase>
  </testsuite>
  <testsuite name="removing shortable synths" timestamp="2022-02-04T17:09:12" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="revert conditions" timestamp="2022-02-04T17:09:12" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.2680" failures="0">
    <testcase name="Contract: CollateralManager removing shortable synths revert conditions should revert if the caller is not the owner" time="0.0130" classname="should revert if the caller is not the owner">
    </testcase>
  </testsuite>
  <testsuite name="when a shortable synth is removed" timestamp="2022-02-04T17:09:13" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralManager.js" time="0.2670" failures="0">
    <testcase name="Contract: CollateralManager removing shortable synths when a shortable synth is removed should emit the ShortableSynthRemoved event" time="0.0240" classname="should emit the ShortableSynthRemoved event">
    </testcase>
  </testsuite>
  <testsuite name="Contract: CollateralShort" timestamp="2022-02-04T17:09:13" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralShort.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="logic" timestamp="2022-02-04T17:09:18" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralShort.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralShort logic should ensure only expected functions are mutative" time="0.1260" classname="should ensure only expected functions are mutative">
    </testcase>
    <testcase name="Contract: CollateralShort logic should set constructor params on deployment" time="0.0380" classname="should set constructor params on deployment">
    </testcase>
    <testcase name="Contract: CollateralShort logic should access its dependencies via the address resolver" time="0.0130" classname="should access its dependencies via the address resolver">
    </testcase>
  </testsuite>
  <testsuite name="opening shorts" timestamp="2022-02-04T17:09:18" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralShort.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="should open a btc short" timestamp="2022-02-04T17:09:18" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralShort.js" time="1.7000" failures="0">
    <testcase name="Contract: CollateralShort logic opening shorts should open a btc short should emit the event properly" time="0.0000" classname="should emit the event properly">
    </testcase>
    <testcase name="Contract: CollateralShort logic opening shorts should open a btc short should create the short correctly" time="0.0010" classname="should create the short correctly">
    </testcase>
    <testcase name="Contract: CollateralShort logic opening shorts should open a btc short should correclty issue the right balance to the shorter" time="0.0060" classname="should correclty issue the right balance to the shorter">
    </testcase>
    <testcase name="Contract: CollateralShort logic opening shorts should open a btc short should tell the manager about the short" time="0.0130" classname="should tell the manager about the short">
    </testcase>
    <testcase name="Contract: CollateralShort logic opening shorts should open a btc short should transfer the sUSD to the contract" time="0.0080" classname="should transfer the sUSD to the contract">
    </testcase>
  </testsuite>
  <testsuite name="should open an eth short" timestamp="2022-02-04T17:09:20" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralShort.js" time="0.8790" failures="0">
    <testcase name="Contract: CollateralShort logic opening shorts should open an eth short should emit the event properly" time="0.0000" classname="should emit the event properly">
    </testcase>
    <testcase name="Contract: CollateralShort logic opening shorts should open an eth short should create the short correctly" time="0.0000" classname="should create the short correctly">
    </testcase>
    <testcase name="Contract: CollateralShort logic opening shorts should open an eth short should correclty issue the right balance to the shorter" time="0.0070" classname="should correclty issue the right balance to the shorter">
    </testcase>
    <testcase name="Contract: CollateralShort logic opening shorts should open an eth short should tell the manager about the short" time="0.0070" classname="should tell the manager about the short">
    </testcase>
  </testsuite>
  <testsuite name="Repaying shorts" timestamp="2022-02-04T17:09:21" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralShort.js" time="2.6380" failures="0">
    <testcase name="Contract: CollateralShort logic Repaying shorts should get the short amount and collateral" time="0.0070" classname="should get the short amount and collateral">
    </testcase>
    <testcase name="Contract: CollateralShort logic Repaying shorts should repay with collateral and update the loan" time="0.2870" classname="should repay with collateral and update the loan">
    </testcase>
    <testcase name="Contract: CollateralShort logic Repaying shorts should repay the entire loan amount" time="0.2170" classname="should repay the entire loan amount">
    </testcase>
    <testcase name="Contract: CollateralShort logic Repaying shorts should repay with collateral and close the loan" time="0.2190" classname="should repay with collateral and close the loan">
    </testcase>
    <testcase name="Contract: CollateralShort logic Repaying shorts should only let the borrower repay with collateral" time="0.0550" classname="should only let the borrower repay with collateral">
    </testcase>
    <testcase name="Contract: CollateralShort logic Repaying shorts should not let them repay too much" time="0.1150" classname="should not let them repay too much">
    </testcase>
  </testsuite>
  <testsuite name="Drawing shorts" timestamp="2022-02-04T17:09:23" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralShort.js" time="1.3280" failures="0">
    <testcase name="Contract: CollateralShort logic Drawing shorts should update the loan" time="0.0070" classname="should update the loan">
    </testcase>
    <testcase name="Contract: CollateralShort logic Drawing shorts should transfer the proceeds to the user" time="0.0120" classname="should transfer the proceeds to the user">
    </testcase>
    <testcase name="Contract: CollateralShort logic Drawing shorts should not let them draw too much" time="0.2090" classname="should not let them draw too much">
    </testcase>
  </testsuite>
  <testsuite name="Withdrawing shorts" timestamp="2022-02-04T17:09:25" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralShort.js" time="1.3380" failures="0">
    <testcase name="Contract: CollateralShort logic Withdrawing shorts should update the loan" time="0.0090" classname="should update the loan">
    </testcase>
    <testcase name="Contract: CollateralShort logic Withdrawing shorts should transfer the withdrawn collateral to the user" time="0.0070" classname="should transfer the withdrawn collateral to the user">
    </testcase>
    <testcase name="Contract: CollateralShort logic Withdrawing shorts should not let them withdraw too much" time="0.2130" classname="should not let them withdraw too much">
    </testcase>
  </testsuite>
  <testsuite name="Closing shorts" timestamp="2022-02-04T17:09:26" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralShort.js" time="0.8760" failures="0">
    <testcase name="Contract: CollateralShort logic Closing shorts if the eth price goes down, the shorter makes profit" time="0.4310" classname="if the eth price goes down, the shorter makes profit">
    </testcase>
    <testcase name="Contract: CollateralShort logic Closing shorts if the eth price goes up, the shorter makes a loss" time="0.4240" classname="if the eth price goes up, the shorter makes a loss">
    </testcase>
  </testsuite>
  <testsuite name="Liquidating shorts" timestamp="2022-02-04T17:09:27" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralShort.js" time="0.5330" failures="0">
    <testcase name="Contract: CollateralShort logic Liquidating shorts liquidation should be capped to only fix the c ratio" time="0.2580" classname="liquidation should be capped to only fix the c ratio">
    </testcase>
  </testsuite>
  <testsuite name="System debt" timestamp="2022-02-04T17:09:28" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralShort.js" time="3.3780" failures="0">
    <testcase name="Contract: CollateralShort logic System debt If there is 1 ETH and 1 short ETH, then the system debt is constant before and after a price change" time="1.1120" classname="If there is 1 ETH and 1 short ETH, then the system debt is constant before and after a price change">
    </testcase>
    <testcase name="Contract: CollateralShort logic System debt If there is 1 ETH and 2 short ETH, then the system debt decreases if the price goes up" time="1.1060" classname="If there is 1 ETH and 2 short ETH, then the system debt decreases if the price goes up">
    </testcase>
    <testcase name="Contract: CollateralShort logic System debt If there is 1 ETH and 2 short ETH, then the system debt increases if the price goes down" time="1.1220" classname="If there is 1 ETH and 2 short ETH, then the system debt increases if the price goes down">
    </testcase>
  </testsuite>
  <testsuite name="Determining the skew and interest rate" timestamp="2022-02-04T17:09:31" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralShort.js" time="0.8760" failures="0">
    <testcase name="Contract: CollateralShort logic Determining the skew and interest rate should correctly determine the interest on a short" time="0.6490" classname="should correctly determine the interest on a short">
    </testcase>
  </testsuite>
  <testsuite name="Contract: CollateralUtil" timestamp="2022-02-04T17:09:32" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralUtil.js" time="0.0000" failures="0">
    <testcase name="Contract: CollateralUtil should ensure only expected functions are mutative" time="0.0290" classname="should ensure only expected functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="liquidation amount test" timestamp="2022-02-04T17:09:37" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralUtil.js" time="2.2410" failures="0">
    <testcase name="Contract: CollateralUtil liquidation amount test when we start at 200%, we can take a 25% reduction in collateral prices" time="0.0700" classname="when we start at 200%, we can take a 25% reduction in collateral prices">
    </testcase>
    <testcase name="Contract: CollateralUtil liquidation amount test when we start at 200%, a price shock of 30% in the collateral requires 25% of the loan to be liquidated" time="0.0590" classname="when we start at 200%, a price shock of 30% in the collateral requires 25% of the loan to be liquidated">
    </testcase>
    <testcase name="Contract: CollateralUtil liquidation amount test when we start at 200%, a price shock of 40% in the collateral requires 75% of the loan to be liquidated" time="0.0570" classname="when we start at 200%, a price shock of 40% in the collateral requires 75% of the loan to be liquidated">
    </testcase>
    <testcase name="Contract: CollateralUtil liquidation amount test when we start at 200%, a price shock of 45% in the collateral requires 100% of the loan to be liquidated" time="0.0600" classname="when we start at 200%, a price shock of 45% in the collateral requires 100% of the loan to be liquidated">
    </testcase>
  </testsuite>
  <testsuite name="collateral redeemed test" timestamp="2022-02-04T17:09:39" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/CollateralUtil.js" time="0.8720" failures="0">
    <testcase name="Contract: CollateralUtil collateral redeemed test when BTC is @ $10000 and we are liquidating 1000 sUSD, then redeem 0.11 BTC" time="0.0370" classname="when BTC is @ $10000 and we are liquidating 1000 sUSD, then redeem 0.11 BTC">
    </testcase>
    <testcase name="Contract: CollateralUtil collateral redeemed test when BTC is @ $20000 and we are liquidating 1000 sUSD, then redeem 0.055 BTC" time="0.0700" classname="when BTC is @ $20000 and we are liquidating 1000 sUSD, then redeem 0.055 BTC">
    </testcase>
    <testcase name="Contract: CollateralUtil collateral redeemed test when BTC is @ $7000 and we are liquidating 2500 sUSD, then redeem 0.36666 ETH" time="0.0440" classname="when BTC is @ $7000 and we are liquidating 2500 sUSD, then redeem 0.36666 ETH">
    </testcase>
    <testcase name="Contract: CollateralUtil collateral redeemed test regardless of BTC price, we liquidate 1.1 * amount when doing sETH" time="0.0880" classname="regardless of BTC price, we liquidate 1.1 * amount when doing sETH">
    </testcase>
  </testsuite>
  <testsuite name="Contract: ContractStorage" timestamp="2022-02-04T17:09:40" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ContractStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: ContractStorage ensure only known functions are mutative" time="0.0000" classname="ensure only known functions are mutative">
    </testcase>
    <testcase name="Contract: ContractStorage it fails when instantiated directly" time="0.0250" classname="it fails when instantiated directly">
    </testcase>
  </testsuite>
  <testsuite name="onlyContract modifier" timestamp="2022-02-04T17:09:40" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ContractStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: ContractStorage onlyContract modifier when invoked by a non-contract, fails immediately" time="0.4570" classname="when invoked by a non-contract, fails immediately">
    </testcase>
  </testsuite>
  <testsuite name="when ContractA is added to the AddressResolver" timestamp="2022-02-04T17:09:41" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ContractStorage.js" time="0.4520" failures="0">
    <testcase name="Contract: ContractStorage onlyContract modifier when ContractA is added to the AddressResolver then only that contract can invoke a function protected by the onlyContract modifier" time="0.4160" classname="then only that contract can invoke a function protected by the onlyContract modifier">
    </testcase>
  </testsuite>
  <testsuite name="migrateContractKey()" timestamp="2022-02-04T17:09:41" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ContractStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: ContractStorage migrateContractKey() when invoked by a non-contract, fails immediately" time="0.4140" classname="when invoked by a non-contract, fails immediately">
    </testcase>
  </testsuite>
  <testsuite name="when ContractA is added to the AddressResolver" timestamp="2022-02-04T17:09:41" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ContractStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when migrate is called for an empty contract" timestamp="2022-02-04T17:09:41" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ContractStorage.js" time="0.0780" failures="0">
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when migrate is called for an empty contract then it fails as the contract does not have an entry" time="0.0320" classname="then it fails as the contract does not have an entry">
    </testcase>
  </testsuite>
  <testsuite name="when there are some values stored" timestamp="2022-02-04T17:09:42" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ContractStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored then those values are retriveable" time="0.0140" classname="then those values are retriveable">
    </testcase>
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored then only it may invoke migrate" time="0.4150" classname="then only it may invoke migrate">
    </testcase>
  </testsuite>
  <testsuite name="when ContractA migrates to ContractB with removal enabled" timestamp="2022-02-04T17:09:42" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ContractStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored when ContractA migrates to ContractB with removal enabled then retriving the records from ContractB works as expected" time="0.0060" classname="then retriving the records from ContractB works as expected">
    </testcase>
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored when ContractA migrates to ContractB with removal enabled and retriving the records from ContractA returns nothing" time="0.0040" classname="and retriving the records from ContractA returns nothing">
    </testcase>
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored when ContractA migrates to ContractB with removal enabled and the migration issues a KeyMigrated event" time="0.0000" classname="and the migration issues a KeyMigrated event">
    </testcase>
  </testsuite>
  <testsuite name="when migrate is called again" timestamp="2022-02-04T17:09:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ContractStorage.js" time="0.0960" failures="0">
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored when ContractA migrates to ContractB with removal enabled when migrate is called again then it fails as the contract no longer has an entry" time="0.0130" classname="then it fails as the contract no longer has an entry">
    </testcase>
  </testsuite>
  <testsuite name="when contractB added to the AddressResolver" timestamp="2022-02-04T17:09:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ContractStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored when ContractA migrates to ContractB with removal enabled when contractB added to the AddressResolver when contract A tries to set something in contract B, it fails" time="0.0480" classname="when contract A tries to set something in contract B, it fails">
    </testcase>
  </testsuite>
  <testsuite name="when there is another value stored in contract B from recordC" timestamp="2022-02-04T17:09:43" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ContractStorage.js" time="0.2410" failures="0">
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored when ContractA migrates to ContractB with removal enabled when contractB added to the AddressResolver when there is another value stored in contract B from recordC then retriving the records from ContractB works as expected" time="0.0180" classname="then retriving the records from ContractB works as expected">
    </testcase>
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored when ContractA migrates to ContractB with removal enabled when contractB added to the AddressResolver when there is another value stored in contract B from recordC and retriving the records from ContractA returns nothing" time="0.0140" classname="and retriving the records from ContractA returns nothing">
    </testcase>
  </testsuite>
  <testsuite name="when contract A tries to set something in contract A already set earlier" timestamp="2022-02-04T17:09:43" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ContractStorage.js" time="0.2320" failures="0">
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored when ContractA migrates to ContractB with removal enabled when contractB added to the AddressResolver when contract A tries to set something in contract A already set earlier then it succeeds" time="0.0080" classname="then it succeeds">
    </testcase>
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored when ContractA migrates to ContractB with removal enabled when contractB added to the AddressResolver when contract A tries to set something in contract A already set earlier and does not overwrite that same record in ContractB" time="0.0040" classname="and does not overwrite that same record in ContractB">
    </testcase>
  </testsuite>
  <testsuite name="when contract A tries to set something new in contract A" timestamp="2022-02-04T17:09:43" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ContractStorage.js" time="0.2190" failures="0">
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored when ContractA migrates to ContractB with removal enabled when contractB added to the AddressResolver when contract A tries to set something new in contract A then it succeeds" time="0.0040" classname="then it succeeds">
    </testcase>
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored when ContractA migrates to ContractB with removal enabled when contractB added to the AddressResolver when contract A tries to set something new in contract A and does not create the same record in ContractB" time="0.0050" classname="and does not create the same record in ContractB">
    </testcase>
  </testsuite>
  <testsuite name="when ContractA migrates to ContractB with removal disabled" timestamp="2022-02-04T17:09:43" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ContractStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored when ContractA migrates to ContractB with removal disabled then retriving the records from ContractB works as expected" time="0.0050" classname="then retriving the records from ContractB works as expected">
    </testcase>
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored when ContractA migrates to ContractB with removal disabled and retriving the records from ContractA works also" time="0.0050" classname="and retriving the records from ContractA works also">
    </testcase>
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored when ContractA migrates to ContractB with removal disabled and the migration issues a KeyMigrated event" time="0.0000" classname="and the migration issues a KeyMigrated event">
    </testcase>
  </testsuite>
  <testsuite name="when contractB added to the AddressResolver" timestamp="2022-02-04T17:09:44" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ContractStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored when ContractA migrates to ContractB with removal disabled when contractB added to the AddressResolver when contract A tries to set something new in contract B, it fails" time="0.0180" classname="when contract A tries to set something new in contract B, it fails">
    </testcase>
  </testsuite>
  <testsuite name="when there is another value stored in contract B" timestamp="2022-02-04T17:09:44" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ContractStorage.js" time="0.2580" failures="0">
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored when ContractA migrates to ContractB with removal disabled when contractB added to the AddressResolver when there is another value stored in contract B then retriving the records from ContractB works as expected" time="0.0240" classname="then retriving the records from ContractB works as expected">
    </testcase>
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored when ContractA migrates to ContractB with removal disabled when contractB added to the AddressResolver when there is another value stored in contract B and retriving the records from ContractA works also" time="0.0160" classname="and retriving the records from ContractA works also">
    </testcase>
  </testsuite>
  <testsuite name="when contract A tries to set something in contract A already set earlier" timestamp="2022-02-04T17:09:44" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ContractStorage.js" time="0.2220" failures="0">
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored when ContractA migrates to ContractB with removal disabled when contractB added to the AddressResolver when contract A tries to set something in contract A already set earlier then it succeeds" time="0.0060" classname="then it succeeds">
    </testcase>
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored when ContractA migrates to ContractB with removal disabled when contractB added to the AddressResolver when contract A tries to set something in contract A already set earlier and it overwrites that same record in ContractB" time="0.0050" classname="and it overwrites that same record in ContractB">
    </testcase>
  </testsuite>
  <testsuite name="when contract A tries to set something new in contract A" timestamp="2022-02-04T17:09:44" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ContractStorage.js" time="0.2360" failures="0">
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored when ContractA migrates to ContractB with removal disabled when contractB added to the AddressResolver when contract A tries to set something new in contract A then it succeeds" time="0.0050" classname="then it succeeds">
    </testcase>
    <testcase name="Contract: ContractStorage migrateContractKey() when ContractA is added to the AddressResolver when there are some values stored when ContractA migrates to ContractB with removal disabled when contractB added to the AddressResolver when contract A tries to set something new in contract A and it creates the same record in ContractB" time="0.0050" classname="and it creates the same record in ContractB">
    </testcase>
  </testsuite>
  <testsuite name="Contract: DappMaintenance" timestamp="2022-02-04T17:09:44" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DappMaintenance.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="given an instance" timestamp="2022-02-04T17:09:45" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DappMaintenance.js" time="0.0000" failures="0">
    <testcase name="Contract: DappMaintenance given an instance should have both dApps set to false" time="0.0110" classname="should have both dApps set to false">
    </testcase>
  </testsuite>
  <testsuite name="setMaintenanceModeAll" timestamp="2022-02-04T17:09:45" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DappMaintenance.js" time="0.0920" failures="0">
    <testcase name="Contract: DappMaintenance given an instance setMaintenanceModeAll should only allow owner to call the function" time="0.0200" classname="should only allow owner to call the function">
    </testcase>
    <testcase name="Contract: DappMaintenance given an instance setMaintenanceModeAll should set maintenance to true for both dApps" time="0.0230" classname="should set maintenance to true for both dApps">
    </testcase>
    <testcase name="Contract: DappMaintenance given an instance setMaintenanceModeAll should set maintenance to false for both dApps" time="0.0170" classname="should set maintenance to false for both dApps">
    </testcase>
  </testsuite>
  <testsuite name="setMaintenanceModeStaking" timestamp="2022-02-04T17:09:45" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DappMaintenance.js" time="0.0940" failures="0">
    <testcase name="Contract: DappMaintenance given an instance setMaintenanceModeStaking should only allow owner to call the function" time="0.0140" classname="should only allow owner to call the function">
    </testcase>
    <testcase name="Contract: DappMaintenance given an instance setMaintenanceModeStaking should set maintenance to true for Staking only" time="0.0190" classname="should set maintenance to true for Staking only">
    </testcase>
    <testcase name="Contract: DappMaintenance given an instance setMaintenanceModeStaking should set maintenance to false for Staking only" time="0.0250" classname="should set maintenance to false for Staking only">
    </testcase>
  </testsuite>
  <testsuite name="setMaintenanceModeSX" timestamp="2022-02-04T17:09:45" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DappMaintenance.js" time="0.1130" failures="0">
    <testcase name="Contract: DappMaintenance given an instance setMaintenanceModeSX should only allow owner to call the function" time="0.0160" classname="should only allow owner to call the function">
    </testcase>
    <testcase name="Contract: DappMaintenance given an instance setMaintenanceModeSX should set maintenance to true for sX only" time="0.0210" classname="should set maintenance to true for sX only">
    </testcase>
    <testcase name="Contract: DappMaintenance given an instance setMaintenanceModeSX should set maintenance to false for sX only" time="0.0350" classname="should set maintenance to false for sX only">
    </testcase>
  </testsuite>
  <testsuite name="Contract: DebtCache" timestamp="2022-02-04T17:09:45" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DebtCache.js" time="0.0000" failures="0">
    <testcase name="Contract: DebtCache ensure only known functions are mutative" time="0.0500" classname="ensure only known functions are mutative">
    </testcase>
    <testcase name="Contract: DebtCache debt snapshot stale time is correctly configured as a default" time="0.0130" classname="debt snapshot stale time is correctly configured as a default">
    </testcase>
  </testsuite>
  <testsuite name="protected methods" timestamp="2022-02-04T17:09:51" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DebtCache.js" time="4.6560" failures="0">
    <testcase name="Contract: DebtCache protected methods updateCachedSynthDebtWithRate() can only be invoked by the issuer" time="0.4130" classname="updateCachedSynthDebtWithRate() can only be invoked by the issuer">
    </testcase>
    <testcase name="Contract: DebtCache protected methods updateCachedSynthDebtsWithRates() can only be invoked by the issuer or exchanger" time="0.4660" classname="updateCachedSynthDebtsWithRates() can only be invoked by the issuer or exchanger">
    </testcase>
    <testcase name="Contract: DebtCache protected methods updateDebtCacheValidity() can only be invoked by the issuer" time="0.4210" classname="updateDebtCacheValidity() can only be invoked by the issuer">
    </testcase>
    <testcase name="Contract: DebtCache protected methods purgeCachedSynthDebt() can only be invoked by the owner" time="0.3850" classname="purgeCachedSynthDebt() can only be invoked by the owner">
    </testcase>
    <testcase name="Contract: DebtCache protected methods recordExcludedDebtChange() can only be invoked by the owner" time="0.5820" classname="recordExcludedDebtChange() can only be invoked by the owner">
    </testcase>
    <testcase name="Contract: DebtCache protected methods updateCachedsUSDDebt() can only be invoked by the issuer" time="0.3940" classname="updateCachedsUSDDebt() can only be invoked by the issuer">
    </testcase>
  </testsuite>
  <testsuite name="After issuing synths" timestamp="2022-02-04T17:09:56" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DebtCache.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Current issued debt" timestamp="2022-02-04T17:09:56" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DebtCache.js" time="1.4160" failures="0">
    <testcase name="Contract: DebtCache After issuing synths Current issued debt Live debt is reported accurately" time="0.0880" classname="Live debt is reported accurately">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths Current issued debt Live debt is reported accurately for individual currencies" time="0.0680" classname="Live debt is reported accurately for individual currencies">
    </testcase>
  </testsuite>
  <testsuite name="takeDebtSnapshot()" timestamp="2022-02-04T17:09:57" tests="9" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DebtCache.js" time="0.0000" failures="0">
    <testcase name="Contract: DebtCache After issuing synths takeDebtSnapshot() accurately resynchronises the debt after prices have changed" time="0.3050" classname="accurately resynchronises the debt after prices have changed">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths takeDebtSnapshot() updates the debt snapshot timestamp" time="0.0100" classname="updates the debt snapshot timestamp">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths takeDebtSnapshot() properly emits debt cache updated and synchronised events" time="0.0130" classname="properly emits debt cache updated and synchronised events">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths takeDebtSnapshot() updates the cached values for all individual synths" time="0.2970" classname="updates the cached values for all individual synths">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths takeDebtSnapshot() is able to invalidate and revalidate the debt cache when required." time="0.4570" classname="is able to invalidate and revalidate the debt cache when required.">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths takeDebtSnapshot() Rates are reported as invalid when snapshot is stale." time="0.3690" classname="Rates are reported as invalid when snapshot is stale.">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths takeDebtSnapshot() Rates are reported as invalid when the debt snapshot is uninitisalised" time="0.3710" classname="Rates are reported as invalid when the debt snapshot is uninitisalised">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths takeDebtSnapshot() When the debt snapshot is invalid, cannot issue, burn, exchange, claim, or transfer when holding debt." time="0.8790" classname="When the debt snapshot is invalid, cannot issue, burn, exchange, claim, or transfer when holding debt.">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths takeDebtSnapshot() will not operate if the system is paused except by the owner" time="0.1330" classname="will not operate if the system is paused except by the owner">
    </testcase>
  </testsuite>
  <testsuite name="when debts are excluded" timestamp="2022-02-04T17:10:07" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DebtCache.js" time="2.2200" failures="0">
    <testcase name="Contract: DebtCache After issuing synths takeDebtSnapshot() when debts are excluded current debt is correct" time="0.1150" classname="current debt is correct">
    </testcase>
  </testsuite>
  <testsuite name="updateCachedSynthDebts()" timestamp="2022-02-04T17:10:09" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DebtCache.js" time="3.9000" failures="0">
    <testcase name="Contract: DebtCache After issuing synths updateCachedSynthDebts() allows resynchronisation of subsets of synths" time="0.3670" classname="allows resynchronisation of subsets of synths">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths updateCachedSynthDebts() can invalidate the debt cache for individual currencies with invalid rates" time="0.2100" classname="can invalidate the debt cache for individual currencies with invalid rates">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths updateCachedSynthDebts() properly emits events" time="0.2070" classname="properly emits events">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths updateCachedSynthDebts() reverts when attempting to synchronise non-existent synths or SNX" time="0.1780" classname="reverts when attempting to synchronise non-existent synths or SNX">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths updateCachedSynthDebts() will not operate if the system is paused except for the owner" time="0.0800" classname="will not operate if the system is paused except for the owner">
    </testcase>
  </testsuite>
  <testsuite name="recordExcludedDebtChange()" timestamp="2022-02-04T17:10:13" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DebtCache.js" time="1.2470" failures="0">
    <testcase name="Contract: DebtCache After issuing synths recordExcludedDebtChange() does not work if delta causes excludedDebt goes negative" time="0.0370" classname="does not work if delta causes excludedDebt goes negative">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths recordExcludedDebtChange() executed successfully" time="0.0480" classname="executed successfully">
    </testcase>
  </testsuite>
  <testsuite name="updateCachedsUSDDebt()" timestamp="2022-02-04T17:10:14" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DebtCache.js" time="1.2810" failures="0">
    <testcase name="Contract: DebtCache After issuing synths updateCachedsUSDDebt() when sUSD is increased by minting" time="0.0540" classname="when sUSD is increased by minting">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths updateCachedsUSDDebt() when sUSD cache is decreased by minting" time="0.0550" classname="when sUSD cache is decreased by minting">
    </testcase>
  </testsuite>
  <testsuite name="Issuance, burning, exchange, settlement" timestamp="2022-02-04T17:10:16" tests="8" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DebtCache.js" time="8.1940" failures="0">
    <testcase name="Contract: DebtCache After issuing synths Issuance, burning, exchange, settlement issuing sUSD updates the debt total" time="0.2170" classname="issuing sUSD updates the debt total">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths Issuance, burning, exchange, settlement burning sUSD updates the debt total" time="0.3240" classname="burning sUSD updates the debt total">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths Issuance, burning, exchange, settlement issuing sUSD updates the total debt cached and sUSD cache" time="0.2290" classname="issuing sUSD updates the total debt cached and sUSD cache">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths Issuance, burning, exchange, settlement burning sUSD reduces the total debt and sUSD cache" time="0.3510" classname="burning sUSD reduces the total debt and sUSD cache">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths Issuance, burning, exchange, settlement exchanging between synths updates the debt totals for those synths" time="0.4390" classname="exchanging between synths updates the debt totals for those synths">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths Issuance, burning, exchange, settlement exchanging between synths updates sUSD debt total due to fees" time="0.3900" classname="exchanging between synths updates sUSD debt total due to fees">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths Issuance, burning, exchange, settlement exchanging between synths updates debt properly when prices have changed" time="0.4310" classname="exchanging between synths updates debt properly when prices have changed">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths Issuance, burning, exchange, settlement settlement updates debt totals" time="0.5500" classname="settlement updates debt totals">
    </testcase>
  </testsuite>
  <testsuite name="Synth removal and addition" timestamp="2022-02-04T17:10:24" tests="8" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DebtCache.js" time="6.6200" failures="0">
    <testcase name="Contract: DebtCache After issuing synths Synth removal and addition Removing synths zeroes out the debt snapshot for that currency" time="0.1650" classname="Removing synths zeroes out the debt snapshot for that currency">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths Synth removal and addition Synth snapshots cannot be purged while the synth exists" time="0.0150" classname="Synth snapshots cannot be purged while the synth exists">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths Synth removal and addition Synth snapshots can be purged without updating the snapshot" time="0.3600" classname="Synth snapshots can be purged without updating the snapshot">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths Synth removal and addition Removing a synth invalidates the debt cache" time="0.1070" classname="Removing a synth invalidates the debt cache">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths Synth removal and addition Adding a synth invalidates the debt cache" time="0.2170" classname="Adding a synth invalidates the debt cache">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths Synth removal and addition Adding multiple synths invalidates the debt cache" time="0.3860" classname="Adding multiple synths invalidates the debt cache">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths Synth removal and addition Removing multiple synths invalidates the debt cache" time="0.0950" classname="Removing multiple synths invalidates the debt cache">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths Synth removal and addition Removing multiple synths zeroes the debt cache for those currencies" time="0.2230" classname="Removing multiple synths zeroes the debt cache for those currencies">
    </testcase>
  </testsuite>
  <testsuite name="updateDebtCacheValidity()" timestamp="2022-02-04T17:10:30" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DebtCache.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the debt cache is valid" timestamp="2022-02-04T17:10:30" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DebtCache.js" time="1.7310" failures="0">
    <testcase name="Contract: DebtCache After issuing synths updateDebtCacheValidity() when the debt cache is valid invalidates the cache" time="0.0350" classname="invalidates the cache">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths updateDebtCacheValidity() when the debt cache is valid does nothing if attempting to re-validate the cache" time="0.0480" classname="does nothing if attempting to re-validate the cache">
    </testcase>
  </testsuite>
  <testsuite name="when the debt cache is invalid" timestamp="2022-02-04T17:10:32" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DebtCache.js" time="1.7530" failures="0">
    <testcase name="Contract: DebtCache After issuing synths updateDebtCacheValidity() when the debt cache is invalid re-validates the cache" time="0.0520" classname="re-validates the cache">
    </testcase>
    <testcase name="Contract: DebtCache After issuing synths updateDebtCacheValidity() when the debt cache is invalid does nothing if attempting to invalidate the cache" time="0.0550" classname="does nothing if attempting to invalidate the cache">
    </testcase>
  </testsuite>
  <testsuite name="totalNonSnxBackedDebt" timestamp="2022-02-04T17:10:34" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DebtCache.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when MultiCollateral loans are opened" timestamp="2022-02-04T17:10:34" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DebtCache.js" time="0.0000" failures="0">
    <testcase name="Contract: DebtCache totalNonSnxBackedDebt when MultiCollateral loans are opened increases non-SNX debt" time="0.0900" classname="increases non-SNX debt">
    </testcase>
    <testcase name="Contract: DebtCache totalNonSnxBackedDebt when MultiCollateral loans are opened is excluded from currentDebt" time="0.1050" classname="is excluded from currentDebt">
    </testcase>
    <testcase name="Contract: DebtCache totalNonSnxBackedDebt when MultiCollateral loans are opened is properly reflected in a snapshot" time="0.2640" classname="is properly reflected in a snapshot">
    </testcase>
  </testsuite>
  <testsuite name="after the synths are exchanged into other synths" timestamp="2022-02-04T17:10:40" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DebtCache.js" time="8.3640" failures="0">
    <testcase name="Contract: DebtCache totalNonSnxBackedDebt when MultiCollateral loans are opened after the synths are exchanged into other synths non-SNX debt is unchanged" time="0.1110" classname="non-SNX debt is unchanged">
    </testcase>
    <testcase name="Contract: DebtCache totalNonSnxBackedDebt when MultiCollateral loans are opened after the synths are exchanged into other synths currentDebt is unchanged" time="0.1170" classname="currentDebt is unchanged">
    </testcase>
    <testcase name="Contract: DebtCache totalNonSnxBackedDebt when MultiCollateral loans are opened after the synths are exchanged into other synths cached debt is properly updated" time="0.0230" classname="cached debt is properly updated">
    </testcase>
  </testsuite>
  <testsuite name="when shorts are opened" timestamp="2022-02-04T17:10:49" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DebtCache.js" time="3.2750" failures="0">
    <testcase name="Contract: DebtCache totalNonSnxBackedDebt when shorts are opened increases non-SNX debt" time="0.0630" classname="increases non-SNX debt">
    </testcase>
    <testcase name="Contract: DebtCache totalNonSnxBackedDebt when shorts are opened is excluded from currentDebt" time="0.1320" classname="is excluded from currentDebt">
    </testcase>
  </testsuite>
  <testsuite name="Contract: DelegateApprovals" timestamp="2022-02-04T17:10:52" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DelegateApprovals.js" time="0.0000" failures="0">
    <testcase name="Contract: DelegateApprovals should set constructor params on deployment" time="0.0220" classname="should set constructor params on deployment">
    </testcase>
    <testcase name="Contract: DelegateApprovals ensure only known functions are mutative" time="0.0260" classname="ensure only known functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="setEternalStorage()" timestamp="2022-02-04T17:10:52" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DelegateApprovals.js" time="0.4680" failures="0">
    <testcase name="Contract: DelegateApprovals setEternalStorage() can only be invoked by owner" time="0.3950" classname="can only be invoked by owner">
    </testcase>
    <testcase name="Contract: DelegateApprovals setEternalStorage() emits EternalStorageUpdated event" time="0.0120" classname="emits EternalStorageUpdated event">
    </testcase>
    <testcase name="Contract: DelegateApprovals setEternalStorage() reverts if set to ZERO_ADDRESS" time="0.0130" classname="reverts if set to ZERO_ADDRESS">
    </testcase>
  </testsuite>
  <testsuite name="adding approvals for all delegate powers" timestamp="2022-02-04T17:10:53" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DelegateApprovals.js" time="0.1440" failures="0">
    <testcase name="Contract: DelegateApprovals adding approvals for all delegate powers should return false if no approval for account1" time="0.0070" classname="should return false if no approval for account1">
    </testcase>
    <testcase name="Contract: DelegateApprovals adding approvals for all delegate powers should set approval for all delegatePowers for account2" time="0.0280" classname="should set approval for all delegatePowers for account2">
    </testcase>
    <testcase name="Contract: DelegateApprovals adding approvals for all delegate powers should set and remove approval for account1" time="0.0590" classname="should set and remove approval for account1">
    </testcase>
    <testcase name="Contract: DelegateApprovals adding approvals for all delegate powers should add approval and emit an Approval event" time="0.0100" classname="should add approval and emit an Approval event">
    </testcase>
  </testsuite>
  <testsuite name="when adding approvals for Issue" timestamp="2022-02-04T17:10:53" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DelegateApprovals.js" time="0.2580" failures="0">
    <testcase name="Contract: DelegateApprovals when adding approvals for Issue should return false if no approval for account1" time="0.0080" classname="should return false if no approval for account1">
    </testcase>
    <testcase name="Contract: DelegateApprovals when adding approvals for Issue should set approval for all burnOnBehalf for account2" time="0.0310" classname="should set approval for all burnOnBehalf for account2">
    </testcase>
    <testcase name="Contract: DelegateApprovals when adding approvals for Issue should emit the Approval event &amp; action" time="0.0100" classname="should emit the Approval event &amp; action">
    </testcase>
    <testcase name="Contract: DelegateApprovals when adding approvals for Issue should set and remove approval for account1" time="0.0530" classname="should set and remove approval for account1">
    </testcase>
    <testcase name="Contract: DelegateApprovals when adding approvals for Issue should allow any account to withdraw approval if not set before" time="0.0300" classname="should allow any account to withdraw approval if not set before">
    </testcase>
    <testcase name="Contract: DelegateApprovals when adding approvals for Issue should revert if account is being set to ZERO_ADDRESS" time="0.0300" classname="should revert if account is being set to ZERO_ADDRESS">
    </testcase>
  </testsuite>
  <testsuite name="when adding approvals for Burn" timestamp="2022-02-04T17:10:53" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DelegateApprovals.js" time="0.2430" failures="0">
    <testcase name="Contract: DelegateApprovals when adding approvals for Burn should return false if no approval for account1" time="0.0340" classname="should return false if no approval for account1">
    </testcase>
    <testcase name="Contract: DelegateApprovals when adding approvals for Burn should set approval for all burnOnBehalf for account2" time="0.0280" classname="should set approval for all burnOnBehalf for account2">
    </testcase>
    <testcase name="Contract: DelegateApprovals when adding approvals for Burn should emit the Approval event &amp; action" time="0.0090" classname="should emit the Approval event &amp; action">
    </testcase>
    <testcase name="Contract: DelegateApprovals when adding approvals for Burn should set and remove approval for account1" time="0.0430" classname="should set and remove approval for account1">
    </testcase>
    <testcase name="Contract: DelegateApprovals when adding approvals for Burn should allow any account to withdraw approval if not set before" time="0.0180" classname="should allow any account to withdraw approval if not set before">
    </testcase>
    <testcase name="Contract: DelegateApprovals when adding approvals for Burn should revert if account is being set to ZERO_ADDRESS" time="0.0120" classname="should revert if account is being set to ZERO_ADDRESS">
    </testcase>
  </testsuite>
  <testsuite name="when adding approvals for Exchange" timestamp="2022-02-04T17:10:53" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DelegateApprovals.js" time="0.1900" failures="0">
    <testcase name="Contract: DelegateApprovals when adding approvals for Exchange should return false if no approval for account1" time="0.0120" classname="should return false if no approval for account1">
    </testcase>
    <testcase name="Contract: DelegateApprovals when adding approvals for Exchange should set approval for all burnOnBehalf for account2" time="0.0270" classname="should set approval for all burnOnBehalf for account2">
    </testcase>
    <testcase name="Contract: DelegateApprovals when adding approvals for Exchange should emit the Approval event &amp; action" time="0.0090" classname="should emit the Approval event &amp; action">
    </testcase>
    <testcase name="Contract: DelegateApprovals when adding approvals for Exchange should set and remove approval for account1" time="0.0510" classname="should set and remove approval for account1">
    </testcase>
    <testcase name="Contract: DelegateApprovals when adding approvals for Exchange should allow any account to withdraw approval if not set before" time="0.0240" classname="should allow any account to withdraw approval if not set before">
    </testcase>
    <testcase name="Contract: DelegateApprovals when adding approvals for Exchange should revert if account is being set to ZERO_ADDRESS" time="0.0160" classname="should revert if account is being set to ZERO_ADDRESS">
    </testcase>
  </testsuite>
  <testsuite name="when adding approvals for Claim" timestamp="2022-02-04T17:10:53" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DelegateApprovals.js" time="0.2450" failures="0">
    <testcase name="Contract: DelegateApprovals when adding approvals for Claim should return false if no approval for account1" time="0.0130" classname="should return false if no approval for account1">
    </testcase>
    <testcase name="Contract: DelegateApprovals when adding approvals for Claim should set approval for all burnOnBehalf for account2" time="0.0270" classname="should set approval for all burnOnBehalf for account2">
    </testcase>
    <testcase name="Contract: DelegateApprovals when adding approvals for Claim should emit the Approval event &amp; action" time="0.0130" classname="should emit the Approval event &amp; action">
    </testcase>
    <testcase name="Contract: DelegateApprovals when adding approvals for Claim should set and remove approval for account1" time="0.0590" classname="should set and remove approval for account1">
    </testcase>
    <testcase name="Contract: DelegateApprovals when adding approvals for Claim should allow any account to withdraw approval if not set before" time="0.0270" classname="should allow any account to withdraw approval if not set before">
    </testcase>
    <testcase name="Contract: DelegateApprovals when adding approvals for Claim should revert if account is being set to ZERO_ADDRESS" time="0.0210" classname="should revert if account is being set to ZERO_ADDRESS">
    </testcase>
  </testsuite>
  <testsuite name="when invoking removeAllDelegatePowers" timestamp="2022-02-04T17:10:54" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DelegateApprovals.js" time="0.3260" failures="0">
    <testcase name="Contract: DelegateApprovals when invoking removeAllDelegatePowers should remove all delegate powers that have been set" time="0.1370" classname="should remove all delegate powers that have been set">
    </testcase>
    <testcase name="Contract: DelegateApprovals when invoking removeAllDelegatePowers should withdraw approval and emit an WithdrawApproval event for each withdrawn delegation" time="0.0360" classname="should withdraw approval and emit an WithdrawApproval event for each withdrawn delegation">
    </testcase>
  </testsuite>
  <testsuite name="Contract: Depot" timestamp="2022-02-04T17:10:54" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.0000" failures="0">
    <testcase name="Contract: Depot should set constructor params on deployment" time="0.0080" classname="should set constructor params on deployment">
    </testcase>
  </testsuite>
  <testsuite name="Restricted methods" timestamp="2022-02-04T17:10:58" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.0000" failures="0">
    <testcase name="Contract: Depot Restricted methods ensure only known functions are mutative" time="0.0760" classname="ensure only known functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="setMaxEthPurchase()" timestamp="2022-02-04T17:10:58" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.5610" failures="0">
    <testcase name="Contract: Depot Restricted methods setMaxEthPurchase() can only be invoked by the owner" time="0.3850" classname="can only be invoked by the owner">
    </testcase>
    <testcase name="Contract: Depot Restricted methods setMaxEthPurchase() when invoked by the owner, changes the expected property" time="0.0170" classname="when invoked by the owner, changes the expected property">
    </testcase>
  </testsuite>
  <testsuite name="setFundsWallet()" timestamp="2022-02-04T17:10:59" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.6030" failures="0">
    <testcase name="Contract: Depot Restricted methods setFundsWallet() can only be invoked by the owner" time="0.4430" classname="can only be invoked by the owner">
    </testcase>
    <testcase name="Contract: Depot Restricted methods setFundsWallet() when invoked by the owner, changes the expected property" time="0.0150" classname="when invoked by the owner, changes the expected property">
    </testcase>
  </testsuite>
  <testsuite name="setMinimumDepositAmount()" timestamp="2022-02-04T17:10:59" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="1.1140" failures="0">
    <testcase name="Contract: Depot Restricted methods setMinimumDepositAmount() can only be invoked by the owner" time="0.4110" classname="can only be invoked by the owner">
    </testcase>
    <testcase name="Contract: Depot Restricted methods setMinimumDepositAmount() can only be invoked by the owner, and with less than a unit" time="0.3970" classname="can only be invoked by the owner, and with less than a unit">
    </testcase>
    <testcase name="Contract: Depot Restricted methods setMinimumDepositAmount() when invoked by the owner, changes the expected property" time="0.0150" classname="when invoked by the owner, changes the expected property">
    </testcase>
    <testcase name="Contract: Depot Restricted methods setMinimumDepositAmount() when invoked by the owner for less than a unit, reverts" time="0.0350" classname="when invoked by the owner for less than a unit, reverts">
    </testcase>
  </testsuite>
  <testsuite name="should increment depositor smallDeposits balance" timestamp="2022-02-04T17:11:00" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.0000" failures="0">
    <testcase name="Contract: Depot should increment depositor smallDeposits balance if the deposit synth amount is a tiny amount" time="0.0520" classname="if the deposit synth amount is a tiny amount">
    </testcase>
    <testcase name="Contract: Depot should increment depositor smallDeposits balance if the deposit synth of 10 amount is less than the minimumDepositAmount" time="0.0760" classname="if the deposit synth of 10 amount is less than the minimumDepositAmount">
    </testcase>
    <testcase name="Contract: Depot should increment depositor smallDeposits balance if the deposit synth amount of 49.99 is less than the minimumDepositAmount" time="0.0730" classname="if the deposit synth amount of 49.99 is less than the minimumDepositAmount">
    </testcase>
  </testsuite>
  <testsuite name="when the system is suspended" timestamp="2022-02-04T17:11:01" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.0000" failures="0">
    <testcase name="Contract: Depot should increment depositor smallDeposits balance when the system is suspended when depositSynths is invoked, it reverts with operation prohibited" time="0.0390" classname="when depositSynths is invoked, it reverts with operation prohibited">
    </testcase>
  </testsuite>
  <testsuite name="when the system is resumed" timestamp="2022-02-04T17:11:01" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.2140" failures="0">
    <testcase name="Contract: Depot should increment depositor smallDeposits balance when the system is suspended when the system is resumed when depositSynths is invoked, it works as expected" time="0.0430" classname="when depositSynths is invoked, it works as expected">
    </testcase>
  </testsuite>
  <testsuite name="should accept synth deposits" timestamp="2022-02-04T17:11:01" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.3300" failures="0">
    <testcase name="Contract: Depot should accept synth deposits if the deposit synth amount of 50 is the minimumDepositAmount" time="0.0900" classname="if the deposit synth amount of 50 is the minimumDepositAmount">
    </testcase>
    <testcase name="Contract: Depot should accept synth deposits if the deposit synth amount of 51 is more than the minimumDepositAmount" time="0.0720" classname="if the deposit synth amount of 51 is more than the minimumDepositAmount">
    </testcase>
  </testsuite>
  <testsuite name="should not exchange ether for synths" timestamp="2022-02-04T17:11:02" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.8690" failures="0">
    <testcase name="Contract: Depot should not exchange ether for synths if the price is stale" time="0.0950" classname="if the price is stale">
    </testcase>
    <testcase name="Contract: Depot should not exchange ether for synths if the contract is paused" time="0.0630" classname="if the contract is paused">
    </testcase>
    <testcase name="Contract: Depot should not exchange ether for synths if the system is suspended" time="0.2060" classname="if the system is suspended">
    </testcase>
  </testsuite>
  <testsuite name="Ensure user can exchange ETH for Synths where the amount" timestamp="2022-02-04T17:11:02" tests="11" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.0000" failures="0">
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount exactly matches one deposit (and that the queue is correctly updated) [ @cov-skip ]" time="0.2200" classname="exactly matches one deposit (and that the queue is correctly updated) [ @cov-skip ]">
    </testcase>
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount is less than one deposit (and that the queue is correctly updated)" time="0.2060" classname="is less than one deposit (and that the queue is correctly updated)">
    </testcase>
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount exceeds one deposit (and that the queue is correctly updated)" time="0.2270" classname="exceeds one deposit (and that the queue is correctly updated)">
    </testcase>
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount exactly matches one deposit (and that the queue is correctly updated) [ @cov-skip ]" time="0.1940" classname="exactly matches one deposit (and that the queue is correctly updated) [ @cov-skip ]">
    </testcase>
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount is less than one deposit (and that the queue is correctly updated)" time="0.2200" classname="is less than one deposit (and that the queue is correctly updated)">
    </testcase>
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount exceeds one deposit (and that the queue is correctly updated)" time="1.0790" classname="exceeds one deposit (and that the queue is correctly updated)">
    </testcase>
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount Ensure user can exchange ETH for Synths after a withdrawal and that the queue correctly skips the empty entry" time="0.3640" classname="Ensure user can exchange ETH for Synths after a withdrawal and that the queue correctly skips the empty entry">
    </testcase>
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount Ensure multiple users can make multiple Synth deposits" time="0.2830" classname="Ensure multiple users can make multiple Synth deposits">
    </testcase>
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount Ensure multiple users can make multiple Synth deposits and multiple withdrawals (and that the queue is correctly updated)" time="0.2730" classname="Ensure multiple users can make multiple Synth deposits and multiple withdrawals (and that the queue is correctly updated)">
    </testcase>
  </testsuite>
  <testsuite name="using the exchangeEtherForSynths function directly" timestamp="2022-02-04T17:11:07" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the system is suspended" timestamp="2022-02-04T17:11:07" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.0000" failures="0">
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount using the exchangeEtherForSynths function directly when the system is suspended when exchangeEtherForSynths function directly is invoked, it reverts with operation prohibited" time="0.0930" classname="when exchangeEtherForSynths function directly is invoked, it reverts with operation prohibited">
    </testcase>
  </testsuite>
  <testsuite name="when the system is resumed" timestamp="2022-02-04T17:11:07" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.3410" failures="0">
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount using the exchangeEtherForSynths function directly when the system is suspended when the system is resumed when depositSynths is invoked, it works as expected" time="0.0680" classname="when depositSynths is invoked, it works as expected">
    </testcase>
  </testsuite>
  <testsuite name="using the fallback function" timestamp="2022-02-04T17:11:07" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the system is suspended" timestamp="2022-02-04T17:11:07" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.0000" failures="0">
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount using the fallback function when the system is suspended when fallback function is invoked, it reverts with operation prohibited" time="0.0820" classname="when fallback function is invoked, it reverts with operation prohibited">
    </testcase>
  </testsuite>
  <testsuite name="when the system is resumed" timestamp="2022-02-04T17:11:08" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.2520" failures="0">
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount using the fallback function when the system is suspended when the system is resumed when depositSynths is invoked, it works as expected" time="0.0570" classname="when depositSynths is invoked, it works as expected">
    </testcase>
  </testsuite>
  <testsuite name="exchangeEtherForSynthsAtRate" timestamp="2022-02-04T17:11:08" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the purchaser supplies a rate" timestamp="2022-02-04T17:11:08" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="1.1340" failures="0">
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount exchangeEtherForSynthsAtRate when the purchaser supplies a rate when exchangeEtherForSynthsAtRate is invoked, it works as expected" time="0.0950" classname="when exchangeEtherForSynthsAtRate is invoked, it works as expected">
    </testcase>
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount exchangeEtherForSynthsAtRate when the purchaser supplies a rate when purchaser supplies a rate lower than the current rate" time="0.0580" classname="when purchaser supplies a rate lower than the current rate">
    </testcase>
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount exchangeEtherForSynthsAtRate when the purchaser supplies a rate when purchaser supplies a rate higher than the current rate" time="0.0500" classname="when purchaser supplies a rate higher than the current rate">
    </testcase>
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount exchangeEtherForSynthsAtRate when the purchaser supplies a rate when the purchaser supplies a rate and the rate is changed in by the oracle" time="0.1120" classname="when the purchaser supplies a rate and the rate is changed in by the oracle">
    </testcase>
  </testsuite>
  <testsuite name="exchangeEtherForSNXAtRate" timestamp="2022-02-04T17:11:09" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the purchaser supplies a rate" timestamp="2022-02-04T17:11:09" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="1.2140" failures="0">
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount exchangeEtherForSNXAtRate when the purchaser supplies a rate when exchangeEtherForSNXAtRate is invoked, it works as expected" time="0.0770" classname="when exchangeEtherForSNXAtRate is invoked, it works as expected">
    </testcase>
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount exchangeEtherForSNXAtRate when the purchaser supplies a rate when purchaser supplies a rate lower than the current rate" time="0.0900" classname="when purchaser supplies a rate lower than the current rate">
    </testcase>
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount exchangeEtherForSNXAtRate when the purchaser supplies a rate when purchaser supplies a rate higher than the current rate" time="0.0910" classname="when purchaser supplies a rate higher than the current rate">
    </testcase>
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount exchangeEtherForSNXAtRate when the purchaser supplies a rate when the purchaser supplies a rate and the rate is changed in by the oracle" time="0.1570" classname="when the purchaser supplies a rate and the rate is changed in by the oracle">
    </testcase>
  </testsuite>
  <testsuite name="exchangeSynthsForSNXAtRate" timestamp="2022-02-04T17:11:10" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the purchaser supplies a rate" timestamp="2022-02-04T17:11:10" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="1.2620" failures="0">
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount exchangeSynthsForSNXAtRate when the purchaser supplies a rate when exchangeSynthsForSNXAtRate is invoked, it works as expected" time="0.0860" classname="when exchangeSynthsForSNXAtRate is invoked, it works as expected">
    </testcase>
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount exchangeSynthsForSNXAtRate when the purchaser supplies a rate when purchaser supplies a rate lower than the current rate" time="0.0630" classname="when purchaser supplies a rate lower than the current rate">
    </testcase>
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount exchangeSynthsForSNXAtRate when the purchaser supplies a rate when purchaser supplies a rate higher than the current rate" time="0.0660" classname="when purchaser supplies a rate higher than the current rate">
    </testcase>
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount exchangeSynthsForSNXAtRate when the purchaser supplies a rate when the purchaser supplies a rate and the rate is changed in by the oracle" time="0.0920" classname="when the purchaser supplies a rate and the rate is changed in by the oracle">
    </testcase>
  </testsuite>
  <testsuite name="withdrawMyDepositedSynths()" timestamp="2022-02-04T17:11:12" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.0000" failures="0">
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount withdrawMyDepositedSynths() Ensure user can withdraw their Synth deposit" time="0.0900" classname="Ensure user can withdraw their Synth deposit">
    </testcase>
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount withdrawMyDepositedSynths() Ensure user can withdraw their Synth deposit even if they sent an amount smaller than the minimum required" time="0.0880" classname="Ensure user can withdraw their Synth deposit even if they sent an amount smaller than the minimum required">
    </testcase>
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount withdrawMyDepositedSynths() Ensure user can withdraw their multiple Synth deposits when they sent amounts smaller than the minimum required" time="0.1840" classname="Ensure user can withdraw their multiple Synth deposits when they sent amounts smaller than the minimum required">
    </testcase>
  </testsuite>
  <testsuite name="when the system is suspended" timestamp="2022-02-04T17:11:12" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.0000" failures="0">
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount withdrawMyDepositedSynths() when the system is suspended when withdrawMyDepositedSynths() is invoked, it reverts with operation prohibited" time="0.0360" classname="when withdrawMyDepositedSynths() is invoked, it reverts with operation prohibited">
    </testcase>
  </testsuite>
  <testsuite name="when the system is resumed" timestamp="2022-02-04T17:11:13" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.2510" failures="0">
    <testcase name="Contract: Depot Ensure user can exchange ETH for Synths where the amount withdrawMyDepositedSynths() when the system is suspended when the system is resumed when withdrawMyDepositedSynths() is invoked, it works as expected" time="0.0340" classname="when withdrawMyDepositedSynths() is invoked, it works as expected">
    </testcase>
  </testsuite>
  <testsuite name="Ensure user can exchange ETH for SNX" timestamp="2022-02-04T17:11:13" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.0000" failures="0">
    <testcase name="Contract: Depot Ensure user can exchange ETH for SNX ensure user get the correct amount of SNX after sending ETH" time="0.0970" classname="ensure user get the correct amount of SNX after sending ETH">
    </testcase>
  </testsuite>
  <testsuite name="when the system is suspended" timestamp="2022-02-04T17:11:13" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.0000" failures="0">
    <testcase name="Contract: Depot Ensure user can exchange ETH for SNX when the system is suspended when exchangeEtherForSNX() is invoked, it reverts with operation prohibited" time="0.1270" classname="when exchangeEtherForSNX() is invoked, it reverts with operation prohibited">
    </testcase>
  </testsuite>
  <testsuite name="when the system is resumed" timestamp="2022-02-04T17:11:13" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.2050" failures="0">
    <testcase name="Contract: Depot Ensure user can exchange ETH for SNX when the system is suspended when the system is resumed when exchangeEtherForSNX() is invoked, it works as expected" time="0.0750" classname="when exchangeEtherForSNX() is invoked, it works as expected">
    </testcase>
  </testsuite>
  <testsuite name="Ensure user can exchange Synths for Synthetix" timestamp="2022-02-04T17:11:14" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.0000" failures="0">
    <testcase name="Contract: Depot Ensure user can exchange Synths for Synthetix ensure user gets the correct amount of SNX after sending 10 sUSD" time="0.0930" classname="ensure user gets the correct amount of SNX after sending 10 sUSD">
    </testcase>
  </testsuite>
  <testsuite name="when the system is suspended" timestamp="2022-02-04T17:11:14" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.0000" failures="0">
    <testcase name="Contract: Depot Ensure user can exchange Synths for Synthetix when the system is suspended when exchangeSynthsForSNX() is invoked, it reverts with operation prohibited" time="0.0690" classname="when exchangeSynthsForSNX() is invoked, it reverts with operation prohibited">
    </testcase>
  </testsuite>
  <testsuite name="when the system is resumed" timestamp="2022-02-04T17:11:14" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.3070" failures="0">
    <testcase name="Contract: Depot Ensure user can exchange Synths for Synthetix when the system is suspended when the system is resumed when exchangeSynthsForSNX() is invoked, it works as expected" time="0.0730" classname="when exchangeSynthsForSNX() is invoked, it works as expected">
    </testcase>
  </testsuite>
  <testsuite name="withdrawSynthetix" timestamp="2022-02-04T17:11:14" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Depot.js" time="0.6420" failures="0">
    <testcase name="Contract: Depot withdrawSynthetix when non owner withdrawSynthetix calls then revert" time="0.3940" classname="when non owner withdrawSynthetix calls then revert">
    </testcase>
    <testcase name="Contract: Depot withdrawSynthetix when owner calls withdrawSynthetix then withdrawSynthetix" time="0.0490" classname="when owner calls withdrawSynthetix then withdrawSynthetix">
    </testcase>
  </testsuite>
  <testsuite name="Contract: DynamicFee" timestamp="2022-02-04T17:11:15" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/DynamicFee.js" time="0.1490" failures="0">
    <testcase name="Contract: DynamicFee Can get price differential" time="0.0150" classname="Can get price differential">
    </testcase>
    <testcase name="Contract: DynamicFee Fee is similar to dynamic-fee-calc.csv rounds 22-11, all below threshold" time="0.0200" classname="Fee is similar to dynamic-fee-calc.csv rounds 22-11, all below threshold">
    </testcase>
    <testcase name="Contract: DynamicFee Fee is similar to dynamic-fee-calc.csv rounds 23-14, last one above threshold" time="0.0190" classname="Fee is similar to dynamic-fee-calc.csv rounds 23-14, last one above threshold">
    </testcase>
    <testcase name="Contract: DynamicFee Fee is similar to dynamic-fee-calc.csv rounds 32-22, first one above threshold" time="0.0160" classname="Fee is similar to dynamic-fee-calc.csv rounds 32-22, first one above threshold">
    </testcase>
    <testcase name="Contract: DynamicFee Fee is similar to dynamic-fee-calc.csv rounds 72-63, 70% above threshold" time="0.0170" classname="Fee is similar to dynamic-fee-calc.csv rounds 72-63, 70% above threshold">
    </testcase>
    <testcase name="Contract: DynamicFee Fee is similar to dynamic-fee-calc.csv rounds 67-58, 50% above threshold" time="0.0170" classname="Fee is similar to dynamic-fee-calc.csv rounds 67-58, 50% above threshold">
    </testcase>
  </testsuite>
  <testsuite name="Contract: EternalStorage" timestamp="2022-02-04T17:11:15" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EternalStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: EternalStorage ensure only known functions are mutative" time="0.0500" classname="ensure only known functions are mutative">
    </testcase>
    <testcase name="Contract: EternalStorage should revert when owner parameter is passed the zero address" time="0.0190" classname="should revert when owner parameter is passed the zero address">
    </testcase>
    <testcase name="Contract: EternalStorage should set owner address on deployment" time="0.0270" classname="should set owner address on deployment">
    </testcase>
    <testcase name="Contract: EternalStorage should set the associatedContract address on deployment" time="0.0230" classname="should set the associatedContract address on deployment">
    </testcase>
  </testsuite>
  <testsuite name="given an instance" timestamp="2022-02-04T17:11:15" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EternalStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when storing a uint" timestamp="2022-02-04T17:11:16" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EternalStorage.js" time="0.4400" failures="0">
    <testcase name="Contract: EternalStorage given an instance when storing a uint then any account can read the uint with the recordKey" time="0.0050" classname="then any account can read the uint with the recordKey">
    </testcase>
    <testcase name="Contract: EternalStorage given an instance when storing a uint then the associatedContract can delete the uint with the recordKey" time="0.0190" classname="then the associatedContract can delete the uint with the recordKey">
    </testcase>
    <testcase name="Contract: EternalStorage given an instance when storing a uint when a non associated address attempts to delete the value then revert" time="0.3790" classname="when a non associated address attempts to delete the value then revert">
    </testcase>
  </testsuite>
  <testsuite name="when storing a string" timestamp="2022-02-04T17:11:16" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EternalStorage.js" time="0.4570" failures="0">
    <testcase name="Contract: EternalStorage given an instance when storing a string then any account can read the string with the recordKey" time="0.0080" classname="then any account can read the string with the recordKey">
    </testcase>
    <testcase name="Contract: EternalStorage given an instance when storing a string then the associatedContract can delete the string with the recordKey" time="0.0140" classname="then the associatedContract can delete the string with the recordKey">
    </testcase>
    <testcase name="Contract: EternalStorage given an instance when storing a string when a non associated address attempts to delete the value then revert" time="0.3800" classname="when a non associated address attempts to delete the value then revert">
    </testcase>
  </testsuite>
  <testsuite name="when storing an address" timestamp="2022-02-04T17:11:16" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EternalStorage.js" time="0.4380" failures="0">
    <testcase name="Contract: EternalStorage given an instance when storing an address then any account can read the address with the recordKey" time="0.0060" classname="then any account can read the address with the recordKey">
    </testcase>
    <testcase name="Contract: EternalStorage given an instance when storing an address then the associatedContract can delete the address with the recordKey" time="0.0180" classname="then the associatedContract can delete the address with the recordKey">
    </testcase>
    <testcase name="Contract: EternalStorage given an instance when storing an address when a non associated address attempts to delete the value then revert" time="0.3610" classname="when a non associated address attempts to delete the value then revert">
    </testcase>
  </testsuite>
  <testsuite name="when storing bytes" timestamp="2022-02-04T17:11:17" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EternalStorage.js" time="0.4350" failures="0">
    <testcase name="Contract: EternalStorage given an instance when storing bytes then any account can read the bytes with the recordKey" time="0.0050" classname="then any account can read the bytes with the recordKey">
    </testcase>
    <testcase name="Contract: EternalStorage given an instance when storing bytes then the associatedContract can delete the bytes with the recordKey" time="0.0140" classname="then the associatedContract can delete the bytes with the recordKey">
    </testcase>
    <testcase name="Contract: EternalStorage given an instance when storing bytes when a non associated address attempts to delete the value then revert" time="0.3620" classname="when a non associated address attempts to delete the value then revert">
    </testcase>
  </testsuite>
  <testsuite name="when storing bytes32" timestamp="2022-02-04T17:11:17" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EternalStorage.js" time="0.4550" failures="0">
    <testcase name="Contract: EternalStorage given an instance when storing bytes32 then any account can read the bytes32 with the recordKey" time="0.0040" classname="then any account can read the bytes32 with the recordKey">
    </testcase>
    <testcase name="Contract: EternalStorage given an instance when storing bytes32 then the associatedContract can delete the bytes32 with the recordKey" time="0.0140" classname="then the associatedContract can delete the bytes32 with the recordKey">
    </testcase>
    <testcase name="Contract: EternalStorage given an instance when storing bytes32 when a non associated address attempts to delete the value then revert" time="0.4020" classname="when a non associated address attempts to delete the value then revert">
    </testcase>
  </testsuite>
  <testsuite name="when storing bool" timestamp="2022-02-04T17:11:18" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EternalStorage.js" time="0.4260" failures="0">
    <testcase name="Contract: EternalStorage given an instance when storing bool then any account can read the bytes32 with the recordKey" time="0.0050" classname="then any account can read the bytes32 with the recordKey">
    </testcase>
    <testcase name="Contract: EternalStorage given an instance when storing bool then the associatedContract can delete the bytes32 with the recordKey" time="0.0120" classname="then the associatedContract can delete the bytes32 with the recordKey">
    </testcase>
    <testcase name="Contract: EternalStorage given an instance when storing bool when a non associated address attempts to delete the value then revert" time="0.3670" classname="when a non associated address attempts to delete the value then revert">
    </testcase>
  </testsuite>
  <testsuite name="when storing a int" timestamp="2022-02-04T17:11:18" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EternalStorage.js" time="0.4460" failures="0">
    <testcase name="Contract: EternalStorage given an instance when storing a int then any account can read the uint with the recordKey" time="0.0080" classname="then any account can read the uint with the recordKey">
    </testcase>
    <testcase name="Contract: EternalStorage given an instance when storing a int then the associatedContract can delete the uint with the recordKey" time="0.0130" classname="then the associatedContract can delete the uint with the recordKey">
    </testcase>
    <testcase name="Contract: EternalStorage given an instance when storing a int when a non associated address attempts to delete the value then revert" time="0.3860" classname="when a non associated address attempts to delete the value then revert">
    </testcase>
  </testsuite>
  <testsuite name="Contract: EtherWrapper" timestamp="2022-02-04T17:11:19" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EtherWrapper.js" time="0.0000" failures="0">
    <testcase name="Contract: EtherWrapper ensure only expected functions are mutative" time="0.0970" classname="ensure only expected functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="On deployment of Contract" timestamp="2022-02-04T17:11:24" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EtherWrapper.js" time="0.0000" failures="0">
    <testcase name="Contract: EtherWrapper On deployment of Contract should set constructor params on deployment" time="0.0260" classname="should set constructor params on deployment">
    </testcase>
    <testcase name="Contract: EtherWrapper On deployment of Contract should access its dependencies via the address resolver" time="0.0320" classname="should access its dependencies via the address resolver">
    </testcase>
  </testsuite>
  <testsuite name="should have a default" timestamp="2022-02-04T17:11:25" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EtherWrapper.js" time="0.0000" failures="0">
    <testcase name="Contract: EtherWrapper On deployment of Contract should have a default maxETH of 5,000 ETH" time="0.0070" classname="maxETH of 5,000 ETH">
    </testcase>
    <testcase name="Contract: EtherWrapper On deployment of Contract should have a default capacity of 5,000 ETH" time="0.0120" classname="capacity of 5,000 ETH">
    </testcase>
    <testcase name="Contract: EtherWrapper On deployment of Contract should have a default mintFeeRate of 50 bps" time="0.0070" classname="mintFeeRate of 50 bps">
    </testcase>
    <testcase name="Contract: EtherWrapper On deployment of Contract should have a default burnFeeRate of 50 bps" time="0.0120" classname="burnFeeRate of 50 bps">
    </testcase>
  </testsuite>
  <testsuite name="totalIssuedSynths" timestamp="2022-02-04T17:11:25" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EtherWrapper.js" time="0.0290" failures="0">
    <testcase name="Contract: EtherWrapper On deployment of Contract should have a default totalIssuedSynths sETH = 0" time="0.0040" classname="sETH = 0">
    </testcase>
    <testcase name="Contract: EtherWrapper On deployment of Contract should have a default totalIssuedSynths sUSD = 0" time="0.0040" classname="sUSD = 0">
    </testcase>
  </testsuite>
  <testsuite name="totalIssuedSynths" timestamp="2022-02-04T17:11:25" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EtherWrapper.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mint(1 sETH) is called" timestamp="2022-02-04T17:11:25" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EtherWrapper.js" time="0.0000" failures="0">
    <testcase name="Contract: EtherWrapper totalIssuedSynths when mint(1 sETH) is called total issued sETH = 1.0" time="0.0040" classname="total issued sETH = 1.0">
    </testcase>
    <testcase name="Contract: EtherWrapper totalIssuedSynths when mint(1 sETH) is called fees escrowed = 0.005" time="0.0070" classname="fees escrowed = 0.005">
    </testcase>
  </testsuite>
  <testsuite name="then burn(`reserves + fees` WETH) is called" timestamp="2022-02-04T17:11:25" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EtherWrapper.js" time="0.0000" failures="0">
    <testcase name="Contract: EtherWrapper totalIssuedSynths when mint(1 sETH) is called then burn(`reserves + fees` WETH) is called total issued sETH = 0.0" time="0.0050" classname="total issued sETH = 0.0">
    </testcase>
    <testcase name="Contract: EtherWrapper totalIssuedSynths when mint(1 sETH) is called then burn(`reserves + fees` WETH) is called fees escrowed = 0.01" time="0.0040" classname="fees escrowed = 0.01">
    </testcase>
  </testsuite>
  <testsuite name="then distributeFees is called" timestamp="2022-02-04T17:11:25" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EtherWrapper.js" time="0.5070" failures="0">
    <testcase name="Contract: EtherWrapper totalIssuedSynths when mint(1 sETH) is called then burn(`reserves + fees` WETH) is called then distributeFees is called total issued sUSD = $15" time="0.0040" classname="total issued sUSD = $15">
    </testcase>
    <testcase name="Contract: EtherWrapper totalIssuedSynths when mint(1 sETH) is called then burn(`reserves + fees` WETH) is called then distributeFees is called fees escrowed = 0.0" time="0.0050" classname="fees escrowed = 0.0">
    </testcase>
  </testsuite>
  <testsuite name="mint" timestamp="2022-02-04T17:11:26" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EtherWrapper.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when amount is less than than capacity" timestamp="2022-02-04T17:11:26" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EtherWrapper.js" time="0.6810" failures="0">
    <testcase name="Contract: EtherWrapper mint when amount is less than than capacity locks `amount` WETH in the contract" time="0.0060" classname="locks `amount` WETH in the contract">
    </testcase>
    <testcase name="Contract: EtherWrapper mint when amount is less than than capacity mints amount(1-mintFeeRate) sETH into the user’s wallet" time="0.0060" classname="mints amount(1-mintFeeRate) sETH into the user’s wallet">
    </testcase>
    <testcase name="Contract: EtherWrapper mint when amount is less than than capacity escrows `amount * mintFeeRate` worth of sETH as fees" time="0.0070" classname="escrows `amount * mintFeeRate` worth of sETH as fees">
    </testcase>
    <testcase name="Contract: EtherWrapper mint when amount is less than than capacity has a capacity of (capacity - amount) after" time="0.0130" classname="has a capacity of (capacity - amount) after">
    </testcase>
    <testcase name="Contract: EtherWrapper mint when amount is less than than capacity emits Minted event" time="0.0010" classname="emits Minted event">
    </testcase>
  </testsuite>
  <testsuite name="amount is larger than or equal to capacity" timestamp="2022-02-04T17:11:26" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EtherWrapper.js" time="0.4940" failures="0">
    <testcase name="Contract: EtherWrapper mint amount is larger than or equal to capacity locks `capacity` ETH in the contract" time="0.0010" classname="locks `capacity` ETH in the contract">
    </testcase>
    <testcase name="Contract: EtherWrapper mint amount is larger than or equal to capacity mints capacity(1-mintFeeRate) sETH into the user’s wallet" time="0.0110" classname="mints capacity(1-mintFeeRate) sETH into the user’s wallet">
    </testcase>
    <testcase name="Contract: EtherWrapper mint amount is larger than or equal to capacity escrows `capacity * mintFeeRate` worth of sETH as fees" time="0.0050" classname="escrows `capacity * mintFeeRate` worth of sETH as fees">
    </testcase>
    <testcase name="Contract: EtherWrapper mint amount is larger than or equal to capacity has a capacity of 0 after" time="0.0060" classname="has a capacity of 0 after">
    </testcase>
  </testsuite>
  <testsuite name="when capacity = 0" timestamp="2022-02-04T17:11:27" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EtherWrapper.js" time="0.0720" failures="0">
    <testcase name="Contract: EtherWrapper mint when capacity = 0 reverts" time="0.0460" classname="reverts">
    </testcase>
  </testsuite>
  <testsuite name="burn" timestamp="2022-02-04T17:11:27" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EtherWrapper.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the contract has 0 WETH" timestamp="2022-02-04T17:11:27" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EtherWrapper.js" time="0.0270" failures="0">
    <testcase name="Contract: EtherWrapper burn when the contract has 0 WETH reverts" time="0.0190" classname="reverts">
    </testcase>
  </testsuite>
  <testsuite name="when the contract has WETH reserves" timestamp="2022-02-04T17:11:27" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EtherWrapper.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when amount is strictly lower than reserves(1+burnFeeRate)" timestamp="2022-02-04T17:11:27" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EtherWrapper.js" time="1.0290" failures="0">
    <testcase name="Contract: EtherWrapper burn when the contract has WETH reserves when amount is strictly lower than reserves(1+burnFeeRate) burns `amount` of sETH from user" time="0.0020" classname="burns `amount` of sETH from user">
    </testcase>
    <testcase name="Contract: EtherWrapper burn when the contract has WETH reserves when amount is strictly lower than reserves(1+burnFeeRate) sends amount(1-burnFeeRate) WETH to user" time="0.0020" classname="sends amount(1-burnFeeRate) WETH to user">
    </testcase>
    <testcase name="Contract: EtherWrapper burn when the contract has WETH reserves when amount is strictly lower than reserves(1+burnFeeRate) escrows `amount * burnFeeRate` worth of sETH as fees" time="0.0050" classname="escrows `amount * burnFeeRate` worth of sETH as fees">
    </testcase>
    <testcase name="Contract: EtherWrapper burn when the contract has WETH reserves when amount is strictly lower than reserves(1+burnFeeRate) increases capacity by `amount - fees` WETH" time="0.0080" classname="increases capacity by `amount - fees` WETH">
    </testcase>
    <testcase name="Contract: EtherWrapper burn when the contract has WETH reserves when amount is strictly lower than reserves(1+burnFeeRate) emits Burned event" time="0.0020" classname="emits Burned event">
    </testcase>
  </testsuite>
  <testsuite name="when amount is larger than or equal to reserves(1+burnFeeRate)" timestamp="2022-02-04T17:11:28" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EtherWrapper.js" time="1.0350" failures="0">
    <testcase name="Contract: EtherWrapper burn when the contract has WETH reserves when amount is larger than or equal to reserves(1+burnFeeRate) burns `reserves(1+burnFeeRate)` amount of sETH from user" time="0.0020" classname="burns `reserves(1+burnFeeRate)` amount of sETH from user">
    </testcase>
    <testcase name="Contract: EtherWrapper burn when the contract has WETH reserves when amount is larger than or equal to reserves(1+burnFeeRate) sends `reserves` WETH to user" time="0.0020" classname="sends `reserves` WETH to user">
    </testcase>
    <testcase name="Contract: EtherWrapper burn when the contract has WETH reserves when amount is larger than or equal to reserves(1+burnFeeRate) escrows `amount * burnFeeRate` worth of sETH as fees" time="0.0110" classname="escrows `amount * burnFeeRate` worth of sETH as fees">
    </testcase>
    <testcase name="Contract: EtherWrapper burn when the contract has WETH reserves when amount is larger than or equal to reserves(1+burnFeeRate) has a max capacity after" time="0.0240" classname="has a max capacity after">
    </testcase>
    <testcase name="Contract: EtherWrapper burn when the contract has WETH reserves when amount is larger than or equal to reserves(1+burnFeeRate) is left with 0 reserves remaining" time="0.0060" classname="is left with 0 reserves remaining">
    </testcase>
  </testsuite>
  <testsuite name="precision and rounding" timestamp="2022-02-04T17:11:29" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EtherWrapper.js" time="0.2640" failures="0">
    <testcase name="Contract: EtherWrapper burn when the contract has WETH reserves precision and rounding emits a Burn event which burns 0.9 sETH" time="0.0020" classname="emits a Burn event which burns 0.9 sETH">
    </testcase>
  </testsuite>
  <testsuite name="distributeFees" timestamp="2022-02-04T17:11:29" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/EtherWrapper.js" time="0.2010" failures="0">
    <testcase name="Contract: EtherWrapper distributeFees burns `feesEscrowed` sETH" time="0.0010" classname="burns `feesEscrowed` sETH">
    </testcase>
    <testcase name="Contract: EtherWrapper distributeFees issues sUSD to the feepool" time="0.0090" classname="issues sUSD to the feepool">
    </testcase>
    <testcase name="Contract: EtherWrapper distributeFees sETHIssued is reduced by `feesEscrowed`" time="0.0040" classname="sETHIssued is reduced by `feesEscrowed`">
    </testcase>
    <testcase name="Contract: EtherWrapper distributeFees feesEscrowed = 0" time="0.0060" classname="feesEscrowed = 0">
    </testcase>
  </testsuite>
  <testsuite name="Contract: Exchanger (spec tests)" timestamp="2022-02-04T17:11:29" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing)" timestamp="2022-02-04T17:11:29" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="waitingPeriodSecs" timestamp="2022-02-04T17:11:36" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) waitingPeriodSecs the default is configured correctly" time="0.0230" classname="the default is configured correctly">
    </testcase>
  </testsuite>
  <testsuite name="given it is configured to 90" timestamp="2022-02-04T17:11:37" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and there is an exchange" timestamp="2022-02-04T17:11:37" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) waitingPeriodSecs given it is configured to 90 and there is an exchange then the maxSecsLeftInWaitingPeriod is close to 90" time="0.0180" classname="then the maxSecsLeftInWaitingPeriod is close to 90">
    </testcase>
  </testsuite>
  <testsuite name="and 87 seconds elapses" timestamp="2022-02-04T17:11:38" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settle() is called" timestamp="2022-02-04T17:11:38" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.6480" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) waitingPeriodSecs given it is configured to 90 and there is an exchange and 87 seconds elapses when settle() is called then it reverts" time="0.0550" classname="then it reverts">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) waitingPeriodSecs given it is configured to 90 and there is an exchange and 87 seconds elapses when settle() is called and the maxSecsLeftInWaitingPeriod is close to 1" time="0.0110" classname="and the maxSecsLeftInWaitingPeriod is close to 1">
    </testcase>
  </testsuite>
  <testsuite name="when a further 5 seconds elapse" timestamp="2022-02-04T17:11:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settle() is called" timestamp="2022-02-04T17:11:40" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.8900" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) waitingPeriodSecs given it is configured to 90 and there is an exchange and 87 seconds elapses when a further 5 seconds elapse when settle() is called it successed" time="0.0740" classname="it successed">
    </testcase>
  </testsuite>
  <testsuite name="When the waiting period is set to 0" timestamp="2022-02-04T17:11:40" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) When the waiting period is set to 0 is set correctly" time="0.0080" classname="is set correctly">
    </testcase>
  </testsuite>
  <testsuite name="When exchanging" timestamp="2022-02-04T17:11:41" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) When the waiting period is set to 0 When exchanging creates no new entries" time="0.0250" classname="creates no new entries">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) When the waiting period is set to 0 When exchanging can exchange back without waiting" time="0.3090" classname="can exchange back without waiting">
    </testcase>
  </testsuite>
  <testsuite name="When the waiting period is switched on again" timestamp="2022-02-04T17:11:44" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) When the waiting period is set to 0 When exchanging When the waiting period is switched on again is set correctly" time="0.0210" classname="is set correctly">
    </testcase>
  </testsuite>
  <testsuite name="a new exchange takes place" timestamp="2022-02-04T17:11:46" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) When the waiting period is set to 0 When exchanging When the waiting period is switched on again a new exchange takes place creates a new entry" time="0.0620" classname="creates a new entry">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) When the waiting period is set to 0 When exchanging When the waiting period is switched on again a new exchange takes place then it emits an ExchangeEntryAppended" time="0.1910" classname="then it emits an ExchangeEntryAppended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) When the waiting period is set to 0 When exchanging When the waiting period is switched on again a new exchange takes place reverts if the user tries to settle before the waiting period has expired" time="0.0540" classname="reverts if the user tries to settle before the waiting period has expired">
    </testcase>
  </testsuite>
  <testsuite name="When the waiting period is set back to 0" timestamp="2022-02-04T17:11:52" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) When the waiting period is set to 0 When exchanging When the waiting period is switched on again a new exchange takes place When the waiting period is set back to 0 there should be only one sETH entry" time="0.0100" classname="there should be only one sETH entry">
    </testcase>
  </testsuite>
  <testsuite name="new trades take place" timestamp="2022-02-04T17:11:54" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="3.9260" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) When the waiting period is set to 0 When exchanging When the waiting period is switched on again a new exchange takes place When the waiting period is set back to 0 new trades take place should settle the pending exchanges and remove all entries" time="0.0210" classname="should settle the pending exchanges and remove all entries">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) When the waiting period is set to 0 When exchanging When the waiting period is switched on again a new exchange takes place When the waiting period is set back to 0 new trades take place should not create any new entries" time="0.0100" classname="should not create any new entries">
    </testcase>
  </testsuite>
  <testsuite name="priceDeviationThresholdFactor()" timestamp="2022-02-04T17:11:58" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceDeviationThresholdFactor() the default is configured correctly" time="0.0060" classname="the default is configured correctly">
    </testcase>
  </testsuite>
  <testsuite name="when a user exchanges into sETH over the default threshold factor" timestamp="2022-02-04T17:11:58" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.6610" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceDeviationThresholdFactor() when a user exchanges into sETH over the default threshold factor then the synth is suspended" time="0.0110" classname="then the synth is suspended">
    </testcase>
  </testsuite>
  <testsuite name="when a user exchanges into sETH under the default threshold factor" timestamp="2022-02-04T17:11:59" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.6320" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceDeviationThresholdFactor() when a user exchanges into sETH under the default threshold factor then the synth is suspended" time="0.0070" classname="then the synth is suspended">
    </testcase>
  </testsuite>
  <testsuite name="changing the factor works" timestamp="2022-02-04T17:12:00" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the factor is set to 3.1" timestamp="2022-02-04T17:12:00" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges into sETH over the default threshold factor, but under the new one" timestamp="2022-02-04T17:12:00" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.7010" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceDeviationThresholdFactor() changing the factor works when the factor is set to 3.1 when a user exchanges into sETH over the default threshold factor, but under the new one then the synth is not suspended" time="0.0150" classname="then the synth is not suspended">
    </testcase>
  </testsuite>
  <testsuite name="when a user exchanges into sETH under the default threshold factor, but under the new one" timestamp="2022-02-04T17:12:00" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.7460" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceDeviationThresholdFactor() changing the factor works when the factor is set to 3.1 when a user exchanges into sETH under the default threshold factor, but under the new one then the synth is not suspended" time="0.0090" classname="then the synth is not suspended">
    </testcase>
  </testsuite>
  <testsuite name="maxSecsLeftInWaitingPeriod()" timestamp="2022-02-04T17:12:01" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the waiting period is configured to 60" timestamp="2022-02-04T17:12:01" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when there are no exchanges" timestamp="2022-02-04T17:12:01" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.5400" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when there are no exchanges then it returns 0" time="0.0090" classname="then it returns 0">
    </testcase>
  </testsuite>
  <testsuite name="when a user with sUSD has performed an exchange into sEUR" timestamp="2022-02-04T17:12:02" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when a user with sUSD has performed an exchange into sEUR reports hasWaitingPeriodOrSettlementOwing" time="0.0150" classname="reports hasWaitingPeriodOrSettlementOwing">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when a user with sUSD has performed an exchange into sEUR then fetching maxSecs for that user into sEUR returns 60" time="0.0190" classname="then fetching maxSecs for that user into sEUR returns 60">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when a user with sUSD has performed an exchange into sEUR and fetching maxSecs for that user into the source synth returns 0" time="0.0140" classname="and fetching maxSecs for that user into the source synth returns 0">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when a user with sUSD has performed an exchange into sEUR and fetching maxSecs for that user into other synths returns 0" time="0.0780" classname="and fetching maxSecs for that user into other synths returns 0">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when a user with sUSD has performed an exchange into sEUR and fetching maxSec for other users into that synth are unaffected" time="0.0780" classname="and fetching maxSec for other users into that synth are unaffected">
    </testcase>
  </testsuite>
  <testsuite name="when 55 seconds has elapsed" timestamp="2022-02-04T17:12:06" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when a user with sUSD has performed an exchange into sEUR when 55 seconds has elapsed then it returns 5" time="0.0210" classname="then it returns 5">
    </testcase>
  </testsuite>
  <testsuite name="when another user does the same exchange" timestamp="2022-02-04T17:12:06" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.9830" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when a user with sUSD has performed an exchange into sEUR when 55 seconds has elapsed when another user does the same exchange then it still returns 5 for the original user" time="0.0090" classname="then it still returns 5 for the original user">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when a user with sUSD has performed an exchange into sEUR when 55 seconds has elapsed when another user does the same exchange and yet the new user has 60 secs" time="0.0130" classname="and yet the new user has 60 secs">
    </testcase>
  </testsuite>
  <testsuite name="when another 5 seconds elapses" timestamp="2022-02-04T17:12:09" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when a user with sUSD has performed an exchange into sEUR when 55 seconds has elapsed when another 5 seconds elapses then it returns 0" time="0.0090" classname="then it returns 0">
    </testcase>
  </testsuite>
  <testsuite name="when another 10 seconds elapses" timestamp="2022-02-04T17:12:10" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.7940" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when a user with sUSD has performed an exchange into sEUR when 55 seconds has elapsed when another 5 seconds elapses when another 10 seconds elapses then it still returns 0" time="0.0080" classname="then it still returns 0">
    </testcase>
  </testsuite>
  <testsuite name="when the same user exchanges into the new synth" timestamp="2022-02-04T17:12:11" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.1010" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when a user with sUSD has performed an exchange into sEUR when 55 seconds has elapsed when the same user exchanges into the new synth then the secs remaining returns 60 again" time="0.0190" classname="then the secs remaining returns 60 again">
    </testcase>
  </testsuite>
  <testsuite name="Given exchangeFeeRates are configured and when calling feeRateForExchange()" timestamp="2022-02-04T17:12:12" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.6600" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) Given exchangeFeeRates are configured and when calling feeRateForExchange() for two long synths, returns the regular exchange fee" time="0.0790" classname="for two long synths, returns the regular exchange fee">
    </testcase>
  </testsuite>
  <testsuite name="given exchange fee rates are configured into categories" timestamp="2022-02-04T17:12:13" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when calling getAmountsForExchange" timestamp="2022-02-04T17:12:13" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the destination is a crypto synth" timestamp="2022-02-04T17:12:13" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.9970" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) given exchange fee rates are configured into categories when calling getAmountsForExchange and the destination is a crypto synth then return the amountReceived" time="0.0160" classname="then return the amountReceived">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) given exchange fee rates are configured into categories when calling getAmountsForExchange and the destination is a crypto synth then return the fee" time="0.0240" classname="then return the fee">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) given exchange fee rates are configured into categories when calling getAmountsForExchange and the destination is a crypto synth then return the feeRate" time="0.0490" classname="then return the feeRate">
    </testcase>
  </testsuite>
  <testsuite name="and the destination is a fiat synth" timestamp="2022-02-04T17:12:16" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="3.1740" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) given exchange fee rates are configured into categories when calling getAmountsForExchange and the destination is a fiat synth then return the amountReceived" time="0.0230" classname="then return the amountReceived">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) given exchange fee rates are configured into categories when calling getAmountsForExchange and the destination is a fiat synth then return the fee" time="0.0540" classname="then return the fee">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) given exchange fee rates are configured into categories when calling getAmountsForExchange and the destination is a fiat synth then return the feeRate" time="0.0680" classname="then return the feeRate">
    </testcase>
  </testsuite>
  <testsuite name="when tripling an exchange rate" timestamp="2022-02-04T17:12:19" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.7670" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) given exchange fee rates are configured into categories when calling getAmountsForExchange when tripling an exchange rate then return the fee tripled" time="0.1140" classname="then return the fee tripled">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) given exchange fee rates are configured into categories when calling getAmountsForExchange when tripling an exchange rate then return the feeRate tripled" time="0.0990" classname="then return the feeRate tripled">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) given exchange fee rates are configured into categories when calling getAmountsForExchange when tripling an exchange rate then return the amountReceived less triple the fee" time="0.1190" classname="then return the amountReceived less triple the fee">
    </testcase>
  </testsuite>
  <testsuite name="dynamic fee when rates change" timestamp="2022-02-04T17:12:22" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change initial fee is correct" time="0.0970" classname="initial fee is correct">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change no exchange happens when dynamic fee is too high" time="1.1870" classname="no exchange happens when dynamic fee is too high">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change dynamic fee decays with time" time="1.0090" classname="dynamic fee decays with time">
    </testcase>
  </testsuite>
  <testsuite name="fee is caluclated correctly when rates spike or drop" timestamp="2022-02-04T17:12:26" tests="10" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="10.2950" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change fee is caluclated correctly when rates spike or drop .3% spike is below threshold" time="0.2300" classname=".3% spike is below threshold">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change fee is caluclated correctly when rates spike or drop .3% drop is below threshold" time="0.3500" classname=".3% drop is below threshold">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change fee is caluclated correctly when rates spike or drop 1% spike result in correct dynamic fee" time="0.2230" classname="1% spike result in correct dynamic fee">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change fee is caluclated correctly when rates spike or drop 1% drop result in correct dynamic fee" time="0.1370" classname="1% drop result in correct dynamic fee">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change fee is caluclated correctly when rates spike or drop 5% spike result in correct dynamic fee" time="0.2430" classname="5% spike result in correct dynamic fee">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change fee is caluclated correctly when rates spike or drop 5% drop result in correct dynamic fee" time="0.1470" classname="5% drop result in correct dynamic fee">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change fee is caluclated correctly when rates spike or drop 10% spike is over the max and is too volatile" time="0.3310" classname="10% spike is over the max and is too volatile">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change fee is caluclated correctly when rates spike or drop 10% drop result in correct dynamic fee" time="0.3300" classname="10% drop result in correct dynamic fee">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change fee is caluclated correctly when rates spike or drop trading between two spiked rates is correctly calculated " time="0.4050" classname="trading between two spiked rates is correctly calculated ">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change fee is caluclated correctly when rates spike or drop trading between two spiked respects max fee and volatility flag" time="0.8500" classname="trading between two spiked respects max fee and volatility flag">
    </testcase>
  </testsuite>
  <testsuite name="settlement" timestamp="2022-02-04T17:12:36" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="suspension conditions" timestamp="2022-02-04T17:12:36" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:12:36" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement suspension conditions when System is suspended then calling settle() reverts" time="0.0510" classname="then calling settle() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:12:37" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.6380" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement suspension conditions when System is suspended when System is resumed then calling exchange() succeeds" time="0.0320" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Synth is suspended" timestamp="2022-02-04T17:12:38" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement suspension conditions when Synth is suspended then calling settle() reverts" time="0.0420" classname="then calling settle() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Synth is resumed" timestamp="2022-02-04T17:12:38" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.6320" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement suspension conditions when Synth is suspended when Synth is resumed then calling exchange() succeeds" time="0.0250" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Synth(sBTC) is suspended" timestamp="2022-02-04T17:12:39" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.7000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement suspension conditions when Synth(sBTC) is suspended then settling other synths still works" time="0.0620" classname="then settling other synths still works">
    </testcase>
  </testsuite>
  <testsuite name="when Synth(sBTC) is suspended for exchanging" timestamp="2022-02-04T17:12:39" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.5920" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement suspension conditions when Synth(sBTC) is suspended for exchanging then settling it still works" time="0.0240" classname="then settling it still works">
    </testcase>
  </testsuite>
  <testsuite name="given the sEUR rate is 2, and sETH is 100, sBTC is 9000" timestamp="2022-02-04T17:12:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the exchange fee rate is 1% for easier human consumption" timestamp="2022-02-04T17:12:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the waitingPeriodSecs is set to 60" timestamp="2022-02-04T17:12:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="various rebate &amp; reclaim scenarios" timestamp="2022-02-04T17:12:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the debt cache is replaced with a spy" timestamp="2022-02-04T17:12:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the priceDeviationThresholdFactor is set to a factor of 2.5" timestamp="2022-02-04T17:12:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1" timestamp="2022-02-04T17:12:40" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 then settlement reclaimAmount shows 0 reclaim and 0 refund" time="0.0600" classname="then settlement reclaimAmount shows 0 reclaim and 0 refund">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when sEUR is attempted to be exchanged away by the user, it reverts" time="0.3390" classname="when sEUR is attempted to be exchanged away by the user, it reverts">
    </testcase>
  </testsuite>
  <testsuite name="when settle() is invoked on sEUR" timestamp="2022-02-04T17:12:43" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.7080" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when settle() is invoked on sEUR then it reverts as the waiting period has not ended" time="0.0520" classname="then it reverts as the waiting period has not ended">
    </testcase>
  </testsuite>
  <testsuite name="when the waiting period elapses" timestamp="2022-02-04T17:12:45" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settle() is invoked on sEUR" timestamp="2022-02-04T17:12:45" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="3.1000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the waiting period elapses when settle() is invoked on sEUR then it completes with one settlement" time="0.0070" classname="then it completes with one settlement">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the waiting period elapses when settle() is invoked on sEUR and the debt cache sync is not called" time="0.0010" classname="and the debt cache sync is not called">
    </testcase>
  </testsuite>
  <testsuite name="when settle() is invoked on the src synth - sUSD" timestamp="2022-02-04T17:12:48" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.3730" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when settle() is invoked on the src synth - sUSD then it completes with no reclaim or rebate" time="0.0380" classname="then it completes with no reclaim or rebate">
    </testcase>
  </testsuite>
  <testsuite name="when settle() is invoked on sEUR by another user" timestamp="2022-02-04T17:12:49" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.4780" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when settle() is invoked on sEUR by another user then it completes with no reclaim or rebate" time="0.0430" classname="then it completes with no reclaim or rebate">
    </testcase>
  </testsuite>
  <testsuite name="when the price doubles for sUSD:sEUR to 4:1" timestamp="2022-02-04T17:12:51" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price doubles for sUSD:sEUR to 4:1 then settlement reclaimAmount shows a reclaim of half the entire balance of sEUR" time="0.0780" classname="then settlement reclaimAmount shows a reclaim of half the entire balance of sEUR">
    </testcase>
  </testsuite>
  <testsuite name="when settle() is invoked" timestamp="2022-02-04T17:12:53" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.4040" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price doubles for sUSD:sEUR to 4:1 when settle() is invoked then it reverts as the waiting period has not ended" time="0.0310" classname="then it reverts as the waiting period has not ended">
    </testcase>
  </testsuite>
  <testsuite name="when another minute passes" timestamp="2022-02-04T17:12:55" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settle() is invoked" timestamp="2022-02-04T17:12:55" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="4.1650" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price doubles for sUSD:sEUR to 4:1 when another minute passes when settle() is invoked then it settles with a reclaim" time="0.0120" classname="then it settles with a reclaim">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price doubles for sUSD:sEUR to 4:1 when another minute passes when settle() is invoked then it settles with a ExchangeEntrySettled event with reclaim" time="0.0050" classname="then it settles with a ExchangeEntrySettled event with reclaim">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price doubles for sUSD:sEUR to 4:1 when another minute passes when settle() is invoked and the debt cache is called" time="0.0020" classname="and the debt cache is called">
    </testcase>
  </testsuite>
  <testsuite name="when settle() is invoked and the exchange fee rate has changed" timestamp="2022-02-04T17:12:59" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.5770" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price doubles for sUSD:sEUR to 4:1 when another minute passes when settle() is invoked and the exchange fee rate has changed then it settles with a reclaim" time="0.2260" classname="then it settles with a reclaim">
    </testcase>
  </testsuite>
  <testsuite name="when an exchange out of sEUR for more than the balance after settlement,but less than the total initially" timestamp="2022-02-04T17:13:01" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.7190" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price doubles for sUSD:sEUR to 4:1 when another minute passes when an exchange out of sEUR for more than the balance after settlement,but less than the total initially then it succeeds, exchanging the entire amount after settlement" time="0.0360" classname="then it succeeds, exchanging the entire amount after settlement">
    </testcase>
  </testsuite>
  <testsuite name="when an exchange out of sEUR for more than the balance after settlement,and more than the total initially and the exchangefee rate changed" timestamp="2022-02-04T17:13:02" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.9180" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price doubles for sUSD:sEUR to 4:1 when another minute passes when an exchange out of sEUR for more than the balance after settlement,and more than the total initially and the exchangefee rate changed then it succeeds, exchanging the entire amount after settlement" time="0.0720" classname="then it succeeds, exchanging the entire amount after settlement">
    </testcase>
  </testsuite>
  <testsuite name="when an exchange out of sEUR for less than the balance after settlement" timestamp="2022-02-04T17:13:04" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.6780" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price doubles for sUSD:sEUR to 4:1 when another minute passes when an exchange out of sEUR for less than the balance after settlement then it succeeds, exchanging the amount given" time="0.0930" classname="then it succeeds, exchanging the amount given">
    </testcase>
  </testsuite>
  <testsuite name="when the price halves for sUSD:sEUR to 1:1" timestamp="2022-02-04T17:13:06" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price halves for sUSD:sEUR to 1:1 then settlement rebateAmount shows a rebate of half the entire balance of sEUR" time="0.0530" classname="then settlement rebateAmount shows a rebate of half the entire balance of sEUR">
    </testcase>
  </testsuite>
  <testsuite name="when the user makes a 2nd exchange of 100 sUSD into sUSD:sEUR at 1:1" timestamp="2022-02-04T17:13:07" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and then the price increases for sUSD:sEUR to 2:1" timestamp="2022-02-04T17:13:07" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settlement is invoked" timestamp="2022-02-04T17:13:07" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when another minute passes" timestamp="2022-02-04T17:13:07" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settle() is invoked" timestamp="2022-02-04T17:13:07" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.5480" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price halves for sUSD:sEUR to 1:1 when the user makes a 2nd exchange of 100 sUSD into sUSD:sEUR at 1:1 and then the price increases for sUSD:sEUR to 2:1 when settlement is invoked when another minute passes when settle() is invoked then it settles with two ExchangeEntrySettled events one for reclaim and one for rebate" time="0.0040" classname="then it settles with two ExchangeEntrySettled events one for reclaim and one for rebate">
    </testcase>
  </testsuite>
  <testsuite name="when settlement is invoked" timestamp="2022-02-04T17:13:09" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price halves for sUSD:sEUR to 1:1 when settlement is invoked then it reverts as the waiting period has not ended" time="0.0670" classname="then it reverts as the waiting period has not ended">
    </testcase>
  </testsuite>
  <testsuite name="when another minute passes" timestamp="2022-02-04T17:13:10" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settle() is invoked" timestamp="2022-02-04T17:13:10" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="3.0800" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price halves for sUSD:sEUR to 1:1 when settlement is invoked when another minute passes when settle() is invoked then it settles with a rebate" time="0.0340" classname="then it settles with a rebate">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price halves for sUSD:sEUR to 1:1 when settlement is invoked when another minute passes when settle() is invoked then it settles with a ExchangeEntrySettled event with rebate" time="0.0030" classname="then it settles with a ExchangeEntrySettled event with rebate">
    </testcase>
  </testsuite>
  <testsuite name="when an exchange out of sEUR for their expected balance before exchange" timestamp="2022-02-04T17:13:13" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.4270" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price halves for sUSD:sEUR to 1:1 when settlement is invoked when another minute passes when an exchange out of sEUR for their expected balance before exchange then it succeeds, exchanging the entire amount plus the rebate" time="0.1020" classname="then it succeeds, exchanging the entire amount plus the rebate">
    </testcase>
  </testsuite>
  <testsuite name="when an exchange out of sEUR for some amount less than their balance before exchange" timestamp="2022-02-04T17:13:16" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.6710" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price halves for sUSD:sEUR to 1:1 when settlement is invoked when another minute passes when an exchange out of sEUR for some amount less than their balance before exchange then it succeeds, exchanging the amount plus the rebate" time="0.0560" classname="then it succeeds, exchanging the amount plus the rebate">
    </testcase>
  </testsuite>
  <testsuite name="when the price returns to sUSD:sEUR to 2:1" timestamp="2022-02-04T17:13:17" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price halves for sUSD:sEUR to 1:1 when the price returns to sUSD:sEUR to 2:1 then settlement reclaimAmount shows 0 reclaim and 0 refund" time="0.0490" classname="then settlement reclaimAmount shows 0 reclaim and 0 refund">
    </testcase>
  </testsuite>
  <testsuite name="when another minute elapses and the sETH price changes" timestamp="2022-02-04T17:13:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price halves for sUSD:sEUR to 1:1 when the price returns to sUSD:sEUR to 2:1 when another minute elapses and the sETH price changes then settlement reclaimAmount still shows 0 reclaim and 0 refund as the timeout period ended" time="0.0490" classname="then settlement reclaimAmount still shows 0 reclaim and 0 refund as the timeout period ended">
    </testcase>
  </testsuite>
  <testsuite name="when settle() is invoked" timestamp="2022-02-04T17:13:22" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.6760" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price halves for sUSD:sEUR to 1:1 when the price returns to sUSD:sEUR to 2:1 when another minute elapses and the sETH price changes when settle() is invoked then it settles with no reclaim or rebate" time="0.0660" classname="then it settles with no reclaim or rebate">
    </testcase>
  </testsuite>
  <testsuite name="given the first user has 1000 sEUR" timestamp="2022-02-04T17:13:24" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the first user exchanges 100 sEUR into sEUR:sBTC at 9000:2" timestamp="2022-02-04T17:13:24" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 given the first user has 1000 sEUR when the first user exchanges 100 sEUR into sEUR:sBTC at 9000:2 then settlement reclaimAmount shows 0 reclaim and 0 refund" time="0.0750" classname="then settlement reclaimAmount shows 0 reclaim and 0 refund">
    </testcase>
  </testsuite>
  <testsuite name="when the price doubles for sUSD:sEUR to 4:1" timestamp="2022-02-04T17:13:25" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 given the first user has 1000 sEUR when the first user exchanges 100 sEUR into sEUR:sBTC at 9000:2 when the price doubles for sUSD:sEUR to 4:1 then settlement shows a rebate rebateAmount" time="0.0560" classname="then settlement shows a rebate rebateAmount">
    </testcase>
  </testsuite>
  <testsuite name="when settlement is invoked" timestamp="2022-02-04T17:13:26" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.6200" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 given the first user has 1000 sEUR when the first user exchanges 100 sEUR into sEUR:sBTC at 9000:2 when the price doubles for sUSD:sEUR to 4:1 when settlement is invoked then it reverts as the waiting period has not ended" time="0.0440" classname="then it reverts as the waiting period has not ended">
    </testcase>
  </testsuite>
  <testsuite name="when the price gains for sBTC more than the loss of the sEUR change" timestamp="2022-02-04T17:13:28" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 given the first user has 1000 sEUR when the first user exchanges 100 sEUR into sEUR:sBTC at 9000:2 when the price doubles for sUSD:sEUR to 4:1 when the price gains for sBTC more than the loss of the sEUR change then the reclaimAmount is whats left when subtracting the rebate" time="0.0780" classname="then the reclaimAmount is whats left when subtracting the rebate">
    </testcase>
  </testsuite>
  <testsuite name="when the same user exchanges some sUSD into sBTC - the same destination" timestamp="2022-02-04T17:13:30" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 given the first user has 1000 sEUR when the first user exchanges 100 sEUR into sEUR:sBTC at 9000:2 when the price doubles for sUSD:sEUR to 4:1 when the price gains for sBTC more than the loss of the sEUR change when the same user exchanges some sUSD into sBTC - the same destination then the reclaimAmount is unchanged" time="0.0890" classname="then the reclaimAmount is unchanged">
    </testcase>
  </testsuite>
  <testsuite name="when the price of sBTC lowers, turning the profit to a loss" timestamp="2022-02-04T17:13:31" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 given the first user has 1000 sEUR when the first user exchanges 100 sEUR into sEUR:sBTC at 9000:2 when the price doubles for sUSD:sEUR to 4:1 when the price gains for sBTC more than the loss of the sEUR change when the same user exchanges some sUSD into sBTC - the same destination when the price of sBTC lowers, turning the profit to a loss then the rebateAmount calculation of settlementOwing on sBTC includes both exchanges" time="0.0980" classname="then the rebateAmount calculation of settlementOwing on sBTC includes both exchanges">
    </testcase>
  </testsuite>
  <testsuite name="when another minute passes" timestamp="2022-02-04T17:13:33" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settle() is invoked for sBTC" timestamp="2022-02-04T17:13:33" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.9810" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 given the first user has 1000 sEUR when the first user exchanges 100 sEUR into sEUR:sBTC at 9000:2 when the price doubles for sUSD:sEUR to 4:1 when the price gains for sBTC more than the loss of the sEUR change when the same user exchanges some sUSD into sBTC - the same destination when the price of sBTC lowers, turning the profit to a loss when another minute passes when settle() is invoked for sBTC then it settles with a rebate @gasprofile" time="0.1930" classname="then it settles with a rebate @gasprofile">
    </testcase>
  </testsuite>
  <testsuite name="when another minute passes and the exchange fee rate has increased" timestamp="2022-02-04T17:13:35" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settle() is invoked for sBTC" timestamp="2022-02-04T17:13:35" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.0100" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 given the first user has 1000 sEUR when the first user exchanges 100 sEUR into sEUR:sBTC at 9000:2 when the price doubles for sUSD:sEUR to 4:1 when the price gains for sBTC more than the loss of the sEUR change when the same user exchanges some sUSD into sBTC - the same destination when the price of sBTC lowers, turning the profit to a loss when another minute passes and the exchange fee rate has increased when settle() is invoked for sBTC then it settles with a rebate using the exchange fee rate at time of trade" time="0.2530" classname="then it settles with a rebate using the exchange fee rate at time of trade">
    </testcase>
  </testsuite>
  <testsuite name="and the max number of exchange entries is 5" timestamp="2022-02-04T17:13:37" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user tries to exchange 100 sEUR into sBTC 5 times" timestamp="2022-02-04T17:13:37" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 given the first user has 1000 sEUR and the max number of exchange entries is 5 when a user tries to exchange 100 sEUR into sBTC 5 times then all succeed" time="0.0000" classname="then all succeed">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 given the first user has 1000 sEUR and the max number of exchange entries is 5 when a user tries to exchange 100 sEUR into sBTC 5 times when one more is tried, then if fails" time="1.5500" classname="when one more is tried, then if fails">
    </testcase>
  </testsuite>
  <testsuite name="when more than 60s elapses" timestamp="2022-02-04T17:13:44" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the user invokes settle() on the dest synth" timestamp="2022-02-04T17:13:44" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="3.6460" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 given the first user has 1000 sEUR and the max number of exchange entries is 5 when a user tries to exchange 100 sEUR into sBTC 5 times when more than 60s elapses and the user invokes settle() on the dest synth then when the user performs 5 more exchanges into the same synth, it succeeds" time="1.0850" classname="then when the user performs 5 more exchanges into the same synth, it succeeds">
    </testcase>
  </testsuite>
  <testsuite name="calculateAmountAfterSettlement()" timestamp="2022-02-04T17:13:48" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="given a user has 1000 sEUR" timestamp="2022-02-04T17:13:48" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when calculatAmountAfterSettlement is invoked with and amount &lt; 1000 and no refund" timestamp="2022-02-04T17:13:48" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.5460" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) calculateAmountAfterSettlement() given a user has 1000 sEUR when calculatAmountAfterSettlement is invoked with and amount &lt; 1000 and no refund then the response is the given amount of 500" time="0.0000" classname="then the response is the given amount of 500">
    </testcase>
  </testsuite>
  <testsuite name="when calculatAmountAfterSettlement is invoked with and amount &lt; 1000 and a refund" timestamp="2022-02-04T17:13:48" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.5290" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) calculateAmountAfterSettlement() given a user has 1000 sEUR when calculatAmountAfterSettlement is invoked with and amount &lt; 1000 and a refund then the response is the given amount of 500 plus the refund" time="0.0000" classname="then the response is the given amount of 500 plus the refund">
    </testcase>
  </testsuite>
  <testsuite name="when calculatAmountAfterSettlement is invoked with and amount &gt; 1000 and no refund" timestamp="2022-02-04T17:13:49" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.5910" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) calculateAmountAfterSettlement() given a user has 1000 sEUR when calculatAmountAfterSettlement is invoked with and amount &gt; 1000 and no refund then the response is the balance of 1000" time="0.0000" classname="then the response is the balance of 1000">
    </testcase>
  </testsuite>
  <testsuite name="when calculatAmountAfterSettlement is invoked with and amount &gt; 1000 and a refund" timestamp="2022-02-04T17:13:49" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.4520" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) calculateAmountAfterSettlement() given a user has 1000 sEUR when calculatAmountAfterSettlement is invoked with and amount &gt; 1000 and a refund then the response is the given amount of 1000 plus the refund" time="0.0000" classname="then the response is the given amount of 1000 plus the refund">
    </testcase>
  </testsuite>
  <testsuite name="exchange()" timestamp="2022-02-04T17:13:50" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() exchange() cannot be invoked directly by any account" time="0.6930" classname="exchange() cannot be invoked directly by any account">
    </testcase>
  </testsuite>
  <testsuite name="suspension conditions on Synthetix.exchange()" timestamp="2022-02-04T17:13:51" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:13:51" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() suspension conditions on Synthetix.exchange() when System is suspended then calling exchange() reverts" time="0.0230" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:13:52" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.9300" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() suspension conditions on Synthetix.exchange() when System is suspended when System is resumed then calling exchange() succeeds" time="0.2200" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Exchange is suspended" timestamp="2022-02-04T17:13:53" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() suspension conditions on Synthetix.exchange() when Exchange is suspended then calling exchange() reverts" time="0.0300" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Exchange is resumed" timestamp="2022-02-04T17:13:53" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.9140" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() suspension conditions on Synthetix.exchange() when Exchange is suspended when Exchange is resumed then calling exchange() succeeds" time="0.2710" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when SynthExchange is suspended" timestamp="2022-02-04T17:13:54" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() suspension conditions on Synthetix.exchange() when SynthExchange is suspended then calling exchange() reverts" time="0.0270" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when SynthExchange is resumed" timestamp="2022-02-04T17:13:55" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.9420" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() suspension conditions on Synthetix.exchange() when SynthExchange is suspended when SynthExchange is resumed then calling exchange() succeeds" time="0.1990" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Synth is suspended" timestamp="2022-02-04T17:13:56" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() suspension conditions on Synthetix.exchange() when Synth is suspended then calling exchange() reverts" time="0.0290" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Synth is resumed" timestamp="2022-02-04T17:13:56" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.0070" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() suspension conditions on Synthetix.exchange() when Synth is suspended when Synth is resumed then calling exchange() succeeds" time="0.2920" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Synth(sBTC) is suspended" timestamp="2022-02-04T17:13:57" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.2270" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() suspension conditions on Synthetix.exchange() when Synth(sBTC) is suspended then exchanging other synths still works" time="0.5620" classname="then exchanging other synths still works">
    </testcase>
  </testsuite>
  <testsuite name="various exchange scenarios" timestamp="2022-02-04T17:13:59" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user has 1000 sUSD" timestamp="2022-02-04T17:13:59" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD should allow a user to exchange the synths they hold in one flavour for another" time="0.4000" classname="should allow a user to exchange the synths they hold in one flavour for another">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD should emit a SynthExchange event @gasprofile" time="0.2600" classname="should emit a SynthExchange event @gasprofile">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD should emit an ExchangeTracking event @gasprofile" time="0.3680" classname="should emit an ExchangeTracking event @gasprofile">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD when a user tries to exchange more than they have, then it fails" time="0.2510" classname="when a user tries to exchange more than they have, then it fails">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD when a user tries to exchange more than they have, then it fails" time="0.2820" classname="when a user tries to exchange more than they have, then it fails">
    </testcase>
  </testsuite>
  <testsuite name="rate stale scenarios for exchange" timestamp="2022-02-04T17:14:03" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when rates have gone stale for all synths" timestamp="2022-02-04T17:14:03" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchange when rates have gone stale for all synths attempting to exchange from sUSD into sAUD reverts with dest stale" time="0.1790" classname="attempting to exchange from sUSD into sAUD reverts with dest stale">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchange when rates have gone stale for all synths settling still works " time="0.0410" classname="settling still works ">
    </testcase>
  </testsuite>
  <testsuite name="when that synth has a fresh rate" timestamp="2022-02-04T17:14:05" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the user exchange into that synth" timestamp="2022-02-04T17:14:05" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="after the waiting period expires and the synth has gone stale" timestamp="2022-02-04T17:14:05" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.1500" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchange when rates have gone stale for all synths when that synth has a fresh rate when the user exchange into that synth after the waiting period expires and the synth has gone stale exchange back to sUSD fails as the source has no rate" time="0.1910" classname="exchange back to sUSD fails as the source has no rate">
    </testcase>
  </testsuite>
  <testsuite name="rate stale scenarios for exchangeOnBehalf" timestamp="2022-02-04T17:14:06" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when rates have gone stale for all synths" timestamp="2022-02-04T17:14:06" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchangeOnBehalf when rates have gone stale for all synths attempting to exchangeOnBehalf from sUSD into sAUD reverts with dest stale" time="0.2430" classname="attempting to exchangeOnBehalf from sUSD into sAUD reverts with dest stale">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchangeOnBehalf when rates have gone stale for all synths settling still works " time="0.0340" classname="settling still works ">
    </testcase>
  </testsuite>
  <testsuite name="when that synth has a fresh rate" timestamp="2022-02-04T17:14:08" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the user exchangeOnBehalf into that synth" timestamp="2022-02-04T17:14:08" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="after the waiting period expires and the synth has gone stale" timestamp="2022-02-04T17:14:08" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.0870" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchangeOnBehalf when rates have gone stale for all synths when that synth has a fresh rate when the user exchangeOnBehalf into that synth after the waiting period expires and the synth has gone stale exchangeOnBehalf back to sUSD fails as the source has no rate" time="0.1480" classname="exchangeOnBehalf back to sUSD fails as the source has no rate">
    </testcase>
  </testsuite>
  <testsuite name="rate stale scenarios for exchangeWithTracking" timestamp="2022-02-04T17:14:09" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when rates have gone stale for all synths" timestamp="2022-02-04T17:14:09" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchangeWithTracking when rates have gone stale for all synths attempting to exchangeWithTracking from sUSD into sAUD reverts with dest stale" time="0.2370" classname="attempting to exchangeWithTracking from sUSD into sAUD reverts with dest stale">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchangeWithTracking when rates have gone stale for all synths settling still works " time="0.0260" classname="settling still works ">
    </testcase>
  </testsuite>
  <testsuite name="when that synth has a fresh rate" timestamp="2022-02-04T17:14:11" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the user exchangeWithTracking into that synth" timestamp="2022-02-04T17:14:11" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="after the waiting period expires and the synth has gone stale" timestamp="2022-02-04T17:14:11" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.0650" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchangeWithTracking when rates have gone stale for all synths when that synth has a fresh rate when the user exchangeWithTracking into that synth after the waiting period expires and the synth has gone stale exchangeWithTracking back to sUSD fails as the source has no rate" time="0.0840" classname="exchangeWithTracking back to sUSD fails as the source has no rate">
    </testcase>
  </testsuite>
  <testsuite name="rate stale scenarios for exchangeOnBehalfWithTracking" timestamp="2022-02-04T17:14:13" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when rates have gone stale for all synths" timestamp="2022-02-04T17:14:13" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchangeOnBehalfWithTracking when rates have gone stale for all synths attempting to exchangeOnBehalfWithTracking from sUSD into sAUD reverts with dest stale" time="0.1900" classname="attempting to exchangeOnBehalfWithTracking from sUSD into sAUD reverts with dest stale">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchangeOnBehalfWithTracking when rates have gone stale for all synths settling still works " time="0.0230" classname="settling still works ">
    </testcase>
  </testsuite>
  <testsuite name="when that synth has a fresh rate" timestamp="2022-02-04T17:14:14" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the user exchangeOnBehalfWithTracking into that synth" timestamp="2022-02-04T17:14:14" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="after the waiting period expires and the synth has gone stale" timestamp="2022-02-04T17:14:14" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.0970" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchangeOnBehalfWithTracking when rates have gone stale for all synths when that synth has a fresh rate when the user exchangeOnBehalfWithTracking into that synth after the waiting period expires and the synth has gone stale exchangeOnBehalfWithTracking back to sUSD fails as the source has no rate" time="0.1050" classname="exchangeOnBehalfWithTracking back to sUSD fails as the source has no rate">
    </testcase>
  </testsuite>
  <testsuite name="exchanging on behalf" timestamp="2022-02-04T17:14:15" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when not approved it should revert on" timestamp="2022-02-04T17:14:15" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.7900" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when not approved it should revert on exchangeOnBehalf" time="0.0440" classname="exchangeOnBehalf">
    </testcase>
  </testsuite>
  <testsuite name="when delegate address approved to exchangeOnBehalf" timestamp="2022-02-04T17:14:16" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when delegate address approved to exchangeOnBehalf should revert if non-delegate invokes exchangeOnBehalf" time="1.5720" classname="should revert if non-delegate invokes exchangeOnBehalf">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when delegate address approved to exchangeOnBehalf should exchangeOnBehalf and authoriser recieves the destSynth" time="0.4920" classname="should exchangeOnBehalf and authoriser recieves the destSynth">
    </testcase>
  </testsuite>
  <testsuite name="suspension conditions on Synthetix.exchangeOnBehalf()" timestamp="2022-02-04T17:14:20" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:14:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalf() when System is suspended then calling exchange() reverts" time="0.0170" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:14:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.2000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalf() when System is suspended when System is resumed then calling exchange() succeeds" time="0.3300" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Exchange is suspended" timestamp="2022-02-04T17:14:21" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalf() when Exchange is suspended then calling exchange() reverts" time="0.0310" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Exchange is resumed" timestamp="2022-02-04T17:14:22" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.0070" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalf() when Exchange is suspended when Exchange is resumed then calling exchange() succeeds" time="0.2650" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when SynthExchange is suspended" timestamp="2022-02-04T17:14:23" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalf() when SynthExchange is suspended then calling exchange() reverts" time="0.0320" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when SynthExchange is resumed" timestamp="2022-02-04T17:14:24" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.9290" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalf() when SynthExchange is suspended when SynthExchange is resumed then calling exchange() succeeds" time="0.2520" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Synth is suspended" timestamp="2022-02-04T17:14:25" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalf() when Synth is suspended then calling exchange() reverts" time="0.0430" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Synth is resumed" timestamp="2022-02-04T17:14:26" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.8990" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalf() when Synth is suspended when Synth is resumed then calling exchange() succeeds" time="0.2110" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Synth(sBTC) is suspended" timestamp="2022-02-04T17:14:26" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.8380" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalf() when Synth(sBTC) is suspended then exchanging other synths on behalf still works" time="0.2430" classname="then exchanging other synths on behalf still works">
    </testcase>
  </testsuite>
  <testsuite name="exchanging on behalf with tracking" timestamp="2022-02-04T17:14:27" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when not approved it should revert on" timestamp="2022-02-04T17:14:27" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.6500" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when not approved it should revert on exchangeOnBehalfWithTracking" time="0.0470" classname="exchangeOnBehalfWithTracking">
    </testcase>
  </testsuite>
  <testsuite name="when delegate address approved to exchangeOnBehalf" timestamp="2022-02-04T17:14:28" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when delegate address approved to exchangeOnBehalf should revert if non-delegate invokes exchangeOnBehalf" time="1.4370" classname="should revert if non-delegate invokes exchangeOnBehalf">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when delegate address approved to exchangeOnBehalf should exchangeOnBehalf and authoriser recieves the destSynth" time="0.4160" classname="should exchangeOnBehalf and authoriser recieves the destSynth">
    </testcase>
  </testsuite>
  <testsuite name="suspension conditions on Synthetix.exchangeOnBehalfWithTracking()" timestamp="2022-02-04T17:14:31" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:14:31" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalfWithTracking() when System is suspended then calling exchange() reverts" time="0.0440" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:14:32" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.8380" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalfWithTracking() when System is suspended when System is resumed then calling exchange() succeeds" time="0.2260" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Exchange is suspended" timestamp="2022-02-04T17:14:32" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalfWithTracking() when Exchange is suspended then calling exchange() reverts" time="0.0240" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Exchange is resumed" timestamp="2022-02-04T17:14:33" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.1180" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalfWithTracking() when Exchange is suspended when Exchange is resumed then calling exchange() succeeds" time="0.2760" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when SynthExchange is suspended" timestamp="2022-02-04T17:14:34" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalfWithTracking() when SynthExchange is suspended then calling exchange() reverts" time="0.0270" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when SynthExchange is resumed" timestamp="2022-02-04T17:14:35" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.9260" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalfWithTracking() when SynthExchange is suspended when SynthExchange is resumed then calling exchange() succeeds" time="0.2180" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Synth is suspended" timestamp="2022-02-04T17:14:36" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalfWithTracking() when Synth is suspended then calling exchange() reverts" time="0.0230" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Synth is resumed" timestamp="2022-02-04T17:14:36" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.8790" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalfWithTracking() when Synth is suspended when Synth is resumed then calling exchange() succeeds" time="0.2450" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Synth(sBTC) is suspended" timestamp="2022-02-04T17:14:37" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.9830" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalfWithTracking() when Synth(sBTC) is suspended then exchanging other synths on behalf still works" time="0.2550" classname="then exchanging other synths on behalf still works">
    </testcase>
  </testsuite>
  <testsuite name="edge case: when an aggregator has a 0 rate" timestamp="2022-02-04T17:14:39" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when an aggregator is added to the exchangeRates" timestamp="2022-02-04T17:14:39" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when exchanging into that synth" timestamp="2022-02-04T17:14:39" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.6330" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() edge case: when an aggregator has a 0 rate when an aggregator is added to the exchangeRates when exchanging into that synth getAmountsForExchange reverts due to invalid rate" time="0.8830" classname="getAmountsForExchange reverts due to invalid rate">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() edge case: when an aggregator has a 0 rate when an aggregator is added to the exchangeRates when exchanging into that synth then it causes a suspension from price deviation as the price is 9" time="0.3420" classname="then it causes a suspension from price deviation as the price is 9">
    </testcase>
  </testsuite>
  <testsuite name="when exchanging out of that synth" timestamp="2022-02-04T17:14:42" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.2430" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() edge case: when an aggregator has a 0 rate when an aggregator is added to the exchangeRates when exchanging out of that synth getAmountsForExchange reverts due to invalid rate" time="0.0460" classname="getAmountsForExchange reverts due to invalid rate">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchange() edge case: when an aggregator has a 0 rate when an aggregator is added to the exchangeRates when exchanging out of that synth then it causes a suspension from price deviation" time="0.0650" classname="then it causes a suspension from price deviation">
    </testcase>
  </testsuite>
  <testsuite name="exchangeWithVirtual()" timestamp="2022-02-04T17:14:44" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user has 1000 sUSD" timestamp="2022-02-04T17:14:44" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the waiting period is set to 60s" timestamp="2022-02-04T17:14:44" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges into sAUD using virtual synths with a tracking code" timestamp="2022-02-04T17:14:44" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeWithVirtual() when a user has 1000 sUSD when the waiting period is set to 60s when a user exchanges into sAUD using virtual synths with a tracking code then it emits an ExchangeEntryAppended for the new Virtual Synth" time="0.0020" classname="then it emits an ExchangeEntryAppended for the new Virtual Synth">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeWithVirtual() when a user has 1000 sUSD when the waiting period is set to 60s when a user exchanges into sAUD using virtual synths with a tracking code then it emits an SynthExchange into the new Virtual Synth" time="0.0280" classname="then it emits an SynthExchange into the new Virtual Synth">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeWithVirtual() when a user has 1000 sUSD when the waiting period is set to 60s when a user exchanges into sAUD using virtual synths with a tracking code then an ExchangeTracking is emitted with the correct code" time="0.0000" classname="then an ExchangeTracking is emitted with the correct code">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeWithVirtual() when a user has 1000 sUSD when the waiting period is set to 60s when a user exchanges into sAUD using virtual synths with a tracking code and it emits the VirtualSynthCreated event" time="0.0340" classname="and it emits the VirtualSynthCreated event">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeWithVirtual() when a user has 1000 sUSD when the waiting period is set to 60s when a user exchanges into sAUD using virtual synths with a tracking code and the balance of the user is nothing" time="0.0590" classname="and the balance of the user is nothing">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeWithVirtual() when a user has 1000 sUSD when the waiting period is set to 60s when a user exchanges into sAUD using virtual synths with a tracking code and the user has no fee reclamation entries" time="0.0410" classname="and the user has no fee reclamation entries">
    </testcase>
  </testsuite>
  <testsuite name="with the new virtual synth" timestamp="2022-02-04T17:14:51" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeWithVirtual() when a user has 1000 sUSD when the waiting period is set to 60s when a user exchanges into sAUD using virtual synths with a tracking code with the new virtual synth and the balance of the vSynth is the whole amount" time="0.0190" classname="and the balance of the vSynth is the whole amount">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeWithVirtual() when a user has 1000 sUSD when the waiting period is set to 60s when a user exchanges into sAUD using virtual synths with a tracking code with the new virtual synth then it is created with the correct parameters" time="0.0720" classname="then it is created with the correct parameters">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeWithVirtual() when a user has 1000 sUSD when the waiting period is set to 60s when a user exchanges into sAUD using virtual synths with a tracking code with the new virtual synth and the vSynth has 1 fee reclamation entries" time="0.0570" classname="and the vSynth has 1 fee reclamation entries">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeWithVirtual() when a user has 1000 sUSD when the waiting period is set to 60s when a user exchanges into sAUD using virtual synths with a tracking code with the new virtual synth and the secsLeftInWaitingPeriod() returns the waitingPeriodSecs" time="0.0300" classname="and the secsLeftInWaitingPeriod() returns the waitingPeriodSecs">
    </testcase>
  </testsuite>
  <testsuite name="when the waiting period expires" timestamp="2022-02-04T17:14:56" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeWithVirtual() when a user has 1000 sUSD when the waiting period is set to 60s when a user exchanges into sAUD using virtual synths with a tracking code with the new virtual synth when the waiting period expires and the secsLeftInWaitingPeriod() returns 0" time="0.0210" classname="and the secsLeftInWaitingPeriod() returns 0">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeWithVirtual() when a user has 1000 sUSD when the waiting period is set to 60s when a user exchanges into sAUD using virtual synths with a tracking code with the new virtual synth when the waiting period expires and readyToSettle() is true" time="0.0240" classname="and readyToSettle() is true">
    </testcase>
  </testsuite>
  <testsuite name="when the vSynth is settled for the holder" timestamp="2022-02-04T17:14:58" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="6.8170" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeWithVirtual() when a user has 1000 sUSD when the waiting period is set to 60s when a user exchanges into sAUD using virtual synths with a tracking code with the new virtual synth when the waiting period expires when the vSynth is settled for the holder then the user has all the synths" time="0.0180" classname="then the user has all the synths">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeWithVirtual() when a user has 1000 sUSD when the waiting period is set to 60s when a user exchanges into sAUD using virtual synths with a tracking code with the new virtual synth when the waiting period expires when the vSynth is settled for the holder and the vSynth is settled" time="0.0130" classname="and the vSynth is settled">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeWithVirtual() when a user has 1000 sUSD when the waiting period is set to 60s when a user exchanges into sAUD using virtual synths with a tracking code with the new virtual synth when the waiting period expires when the vSynth is settled for the holder and ExchangeEntrySettled is emitted" time="0.0000" classname="and ExchangeEntrySettled is emitted">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeWithVirtual() when a user has 1000 sUSD when the waiting period is set to 60s when a user exchanges into sAUD using virtual synths with a tracking code with the new virtual synth when the waiting period expires when the vSynth is settled for the holder and the entry is settled for the vSynth" time="0.0180" classname="and the entry is settled for the vSynth">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeWithVirtual() when a user has 1000 sUSD when the waiting period is set to 60s when a user exchanges into sAUD using virtual synths with a tracking code with the new virtual synth when the waiting period expires when the vSynth is settled for the holder and the user still has no fee reclamation entries" time="0.0160" classname="and the user still has no fee reclamation entries">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeWithVirtual() when a user has 1000 sUSD when the waiting period is set to 60s when a user exchanges into sAUD using virtual synths with a tracking code with the new virtual synth when the waiting period expires when the vSynth is settled for the holder and no more supply exists in the vSynth" time="0.0140" classname="and no more supply exists in the vSynth">
    </testcase>
  </testsuite>
  <testsuite name="when a user exchanges without a tracking code" timestamp="2022-02-04T17:15:04" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.8040" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeWithVirtual() when a user has 1000 sUSD when the waiting period is set to 60s when a user exchanges without a tracking code then no ExchangeTracking is emitted (as no tracking code supplied)" time="0.0000" classname="then no ExchangeTracking is emitted (as no tracking code supplied)">
    </testcase>
  </testsuite>
  <testsuite name="exchangeAtomically()" timestamp="2022-02-04T17:15:05" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="atomicMaxVolumePerBlock()" timestamp="2022-02-04T17:15:05" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeAtomically() atomicMaxVolumePerBlock() the default is configured correctly" time="0.0110" classname="the default is configured correctly">
    </testcase>
  </testsuite>
  <testsuite name="when atomic max volume per block is changed in the system settings" timestamp="2022-02-04T17:15:06" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.5520" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeAtomically() atomicMaxVolumePerBlock() when atomic max volume per block is changed in the system settings then atomicMaxVolumePerBlock() is correctly updated" time="0.0160" classname="then atomicMaxVolumePerBlock() is correctly updated">
    </testcase>
  </testsuite>
  <testsuite name="when a user has 1000 sUSD" timestamp="2022-02-04T17:15:06" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the necessary configuration been set" timestamp="2022-02-04T17:15:06" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the user exchanges into sETH using an atomic exchange with a tracking code" timestamp="2022-02-04T17:15:06" tests="7" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="9.4060" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeAtomically() when a user has 1000 sUSD when the necessary configuration been set when the user exchanges into sETH using an atomic exchange with a tracking code completed the exchange atomically" time="0.0160" classname="completed the exchange atomically">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeAtomically() when a user has 1000 sUSD when the necessary configuration been set when the user exchanges into sETH using an atomic exchange with a tracking code used the correct atomic exchange rate" time="0.0010" classname="used the correct atomic exchange rate">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeAtomically() when a user has 1000 sUSD when the necessary configuration been set when the user exchanges into sETH using an atomic exchange with a tracking code used correct fee rate" time="0.0800" classname="used correct fee rate">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeAtomically() when a user has 1000 sUSD when the necessary configuration been set when the user exchanges into sETH using an atomic exchange with a tracking code emits an SynthExchange directly to the user" time="0.0170" classname="emits an SynthExchange directly to the user">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeAtomically() when a user has 1000 sUSD when the necessary configuration been set when the user exchanges into sETH using an atomic exchange with a tracking code emits an AtomicSynthExchange directly to the user" time="0.0090" classname="emits an AtomicSynthExchange directly to the user">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeAtomically() when a user has 1000 sUSD when the necessary configuration been set when the user exchanges into sETH using an atomic exchange with a tracking code emits an ExchangeTracking event with the correct code" time="0.0290" classname="emits an ExchangeTracking event with the correct code">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeAtomically() when a user has 1000 sUSD when the necessary configuration been set when the user exchanges into sETH using an atomic exchange with a tracking code created no new entries and user has no fee reclamation entires" time="0.0210" classname="created no new entries and user has no fee reclamation entires">
    </testcase>
  </testsuite>
  <testsuite name="when a fee override has been set for atomic exchanges" timestamp="2022-02-04T17:15:16" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.2670" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeAtomically() when a user has 1000 sUSD when the necessary configuration been set when a fee override has been set for atomic exchanges used correct fee rate" time="0.0000" classname="used correct fee rate">
    </testcase>
  </testsuite>
  <testsuite name="when a user exchanges without a tracking code" timestamp="2022-02-04T17:15:17" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.2950" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) exchangeAtomically() when a user has 1000 sUSD when the necessary configuration been set when a user exchanges without a tracking code then no ExchangeTracking is emitted (as no tracking code supplied)" time="0.0030" classname="then no ExchangeTracking is emitted (as no tracking code supplied)">
    </testcase>
  </testsuite>
  <testsuite name="priceSpikeDeviation" timestamp="2022-02-04T17:15:18" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="resetLastExchangeRate() SIP-139" timestamp="2022-02-04T17:15:18" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.8270" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation resetLastExchangeRate() SIP-139 cannot be invoked by any user" time="0.6460" classname="cannot be invoked by any user">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation resetLastExchangeRate() SIP-139 when invoked without valid exchange rates, it reverts" time="0.0810" classname="when invoked without valid exchange rates, it reverts">
    </testcase>
  </testsuite>
  <testsuite name="when the price of sETH is 100" timestamp="2022-02-04T17:15:20" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when price spike deviation is set to a factor of 2" timestamp="2022-02-04T17:15:20" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="lastExchangeRate is persisted during exchanges" timestamp="2022-02-04T17:15:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges initially has no entries" time="0.0220" classname="initially has no entries">
    </testcase>
  </testsuite>
  <testsuite name="when a user exchanges into sETH from sUSD" timestamp="2022-02-04T17:15:21" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.8540" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges into sETH from sUSD then the source side has a rate persisted" time="0.0260" classname="then the source side has a rate persisted">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges into sETH from sUSD and the dest side has a rate persisted" time="0.0160" classname="and the dest side has a rate persisted">
    </testcase>
  </testsuite>
  <testsuite name="when a user exchanges from sETH into another synth" timestamp="2022-02-04T17:15:23" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges from sETH into another synth then the source side has a rate persisted" time="0.0150" classname="then the source side has a rate persisted">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges from sETH into another synth and the dest side has a rate persisted" time="0.0120" classname="and the dest side has a rate persisted">
    </testcase>
  </testsuite>
  <testsuite name="when the price of sETH changes slightly" timestamp="2022-02-04T17:15:25" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and another user exchanges sETH to sUSD" timestamp="2022-02-04T17:15:25" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.5280" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges from sETH into another synth when the price of sETH changes slightly and another user exchanges sETH to sUSD then the source side has a new rate persisted" time="0.0290" classname="then the source side has a new rate persisted">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges from sETH into another synth when the price of sETH changes slightly and another user exchanges sETH to sUSD and the dest side has a rate persisted" time="0.0300" classname="and the dest side has a rate persisted">
    </testcase>
  </testsuite>
  <testsuite name="when the price of sETH is over a deviation" timestamp="2022-02-04T17:15:27" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and another user exchanges sETH to sEUR" timestamp="2022-02-04T17:15:27" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.2920" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges from sETH into another synth when the price of sETH is over a deviation and another user exchanges sETH to sEUR then the source side has not persisted the rate" time="0.0090" classname="then the source side has not persisted the rate">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges from sETH into another synth when the price of sETH is over a deviation and another user exchanges sETH to sEUR then the dest side has not persisted the rate" time="0.0290" classname="then the dest side has not persisted the rate">
    </testcase>
  </testsuite>
  <testsuite name="when the price of sEUR is over a deviation" timestamp="2022-02-04T17:15:30" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and another user exchanges sEUR to sETH" timestamp="2022-02-04T17:15:30" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges from sETH into another synth when the price of sEUR is over a deviation and another user exchanges sEUR to sETH then the source side has persisted the rate" time="0.0120" classname="then the source side has persisted the rate">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges from sETH into another synth when the price of sEUR is over a deviation and another user exchanges sEUR to sETH and the dest side has not persisted the rate" time="0.0060" classname="and the dest side has not persisted the rate">
    </testcase>
  </testsuite>
  <testsuite name="when the owner invokes resetLastExchangeRate([sEUR, sETH])" timestamp="2022-02-04T17:15:32" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="3.3520" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges from sETH into another synth when the price of sEUR is over a deviation and another user exchanges sEUR to sETH when the owner invokes resetLastExchangeRate([sEUR, sETH]) then the sEUR last exchange rate is updated to the current price" time="0.0050" classname="then the sEUR last exchange rate is updated to the current price">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges from sETH into another synth when the price of sEUR is over a deviation and another user exchanges sEUR to sETH when the owner invokes resetLastExchangeRate([sEUR, sETH]) and the sETH rate has not changed" time="0.0040" classname="and the sETH rate has not changed">
    </testcase>
  </testsuite>
  <testsuite name="the isSynthRateInvalid() view correctly returns status" timestamp="2022-02-04T17:15:35" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 the isSynthRateInvalid() view correctly returns status when called with a synth with only a single rate, returns false" time="0.0300" classname="when called with a synth with only a single rate, returns false">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 the isSynthRateInvalid() view correctly returns status when called with a synth with no rate (i.e. 0), returns true" time="0.0190" classname="when called with a synth with no rate (i.e. 0), returns true">
    </testcase>
  </testsuite>
  <testsuite name="when a synth rate changes outside of the range" timestamp="2022-02-04T17:15:37" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 the isSynthRateInvalid() view correctly returns status when a synth rate changes outside of the range when called with that synth, returns true" time="0.0380" classname="when called with that synth, returns true">
    </testcase>
  </testsuite>
  <testsuite name="when the synth rate changes back into the range" timestamp="2022-02-04T17:15:37" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.8600" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 the isSynthRateInvalid() view correctly returns status when a synth rate changes outside of the range when the synth rate changes back into the range then when called with the target, still returns true" time="0.0390" classname="then when called with the target, still returns true">
    </testcase>
  </testsuite>
  <testsuite name="when there is a last rate into sETH via an exchange" timestamp="2022-02-04T17:15:38" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a synth rate changes outside of the range and then returns to the range" timestamp="2022-02-04T17:15:38" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.0320" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 the isSynthRateInvalid() view correctly returns status when there is a last rate into sETH via an exchange when a synth rate changes outside of the range and then returns to the range then when called with the target, returns false" time="0.0180" classname="then when called with the target, returns false">
    </testcase>
  </testsuite>
  <testsuite name="when there is a last price out of sETH via an exchange" timestamp="2022-02-04T17:15:39" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a synth price changes outside of the range and then returns to the range" timestamp="2022-02-04T17:15:39" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.0540" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 the isSynthRateInvalid() view correctly returns status when there is a last price out of sETH via an exchange when a synth price changes outside of the range and then returns to the range then when called with the target, returns false" time="0.0220" classname="then when called with the target, returns false">
    </testcase>
  </testsuite>
  <testsuite name="suspension is triggered via exchanging" timestamp="2022-02-04T17:15:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="given the user has some sETH" timestamp="2022-02-04T17:15:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with no prior exchange history" timestamp="2022-02-04T17:15:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="on the dest side" timestamp="2022-02-04T17:15:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="upwards movement" timestamp="2022-02-04T17:15:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 199 (factor: 1.99)" timestamp="2022-02-04T17:15:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:15:40" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.0370" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges then neither synth is suspended" time="0.0180" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 200 (factor: 2)" timestamp="2022-02-04T17:15:42" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:15:42" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.9200" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges then the synth is suspended" time="0.0100" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges and no exchange took place" time="0.0010" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 300 (factor: 3)" timestamp="2022-02-04T17:15:44" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:15:44" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.8870" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges then the synth is suspended" time="0.0070" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="downwards movement" timestamp="2022-02-04T17:15:46" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50.25 (factor: -1.99)" timestamp="2022-02-04T17:15:46" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:15:46" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.1700" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges then neither synth is suspended" time="0.0210" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50 (factor: -2)" timestamp="2022-02-04T17:15:48" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:15:48" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.8400" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges then the synth is suspended" time="0.0060" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 33.33 (factor: -3)" timestamp="2022-02-04T17:15:50" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:15:50" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.8910" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges then the synth is suspended" time="0.0110" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="on the src side" timestamp="2022-02-04T17:15:52" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="upwards movement" timestamp="2022-02-04T17:15:52" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 199 (factor: 1.99)" timestamp="2022-02-04T17:15:52" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:15:52" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="3.1170" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges then neither synth is suspended" time="0.0310" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 200 (factor: 2)" timestamp="2022-02-04T17:15:55" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:15:55" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.7030" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges then the synth is suspended" time="0.0790" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 300 (factor: 3)" timestamp="2022-02-04T17:15:57" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:15:57" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.7280" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges then the synth is suspended" time="0.0210" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="downwards movement" timestamp="2022-02-04T17:15:59" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50.25 (factor: -1.99)" timestamp="2022-02-04T17:15:59" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:15:59" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.2000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges then neither synth is suspended" time="0.0300" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50 (factor: -2)" timestamp="2022-02-04T17:16:01" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:01" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.8310" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges then the synth is suspended" time="0.0040" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 33.33 (factor: -3)" timestamp="2022-02-04T17:16:03" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:03" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.9260" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges then the synth is suspended" time="0.0060" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when a recent price rate is set way outside of the threshold" timestamp="2022-02-04T17:16:05" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and then put back to normal" timestamp="2022-02-04T17:16:05" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 100 (factor: 1)" timestamp="2022-02-04T17:16:05" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:05" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.0520" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history when a recent price rate is set way outside of the threshold and then put back to normal when the rate of sETH                             is 100 (factor: 1) when a user exchanges then the synth is suspended" time="0.0180" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history when a recent price rate is set way outside of the threshold and then put back to normal when the rate of sETH                             is 100 (factor: 1) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="with a prior exchange from another user into the source" timestamp="2022-02-04T17:16:07" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="on the dest side" timestamp="2022-02-04T17:16:07" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="upwards movement" timestamp="2022-02-04T17:16:07" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 199 (factor: 1.99)" timestamp="2022-02-04T17:16:07" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:07" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.7890" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges then neither synth is suspended" time="0.0560" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 200 (factor: 2)" timestamp="2022-02-04T17:16:09" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:09" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.2640" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges then the synth is suspended" time="0.0260" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 300 (factor: 3)" timestamp="2022-02-04T17:16:12" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:12" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.2110" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges then the synth is suspended" time="0.0140" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="downwards movement" timestamp="2022-02-04T17:16:14" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50.25 (factor: -1.99)" timestamp="2022-02-04T17:16:14" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:14" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.4520" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges then neither synth is suspended" time="0.0430" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50 (factor: -2)" timestamp="2022-02-04T17:16:16" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:16" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.1430" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges then the synth is suspended" time="0.0180" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 33.33 (factor: -3)" timestamp="2022-02-04T17:16:18" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:18" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="3.2040" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges then the synth is suspended" time="0.0120" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="on the src side" timestamp="2022-02-04T17:16:22" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="upwards movement" timestamp="2022-02-04T17:16:22" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 199 (factor: 1.99)" timestamp="2022-02-04T17:16:22" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:22" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.3350" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges then neither synth is suspended" time="0.0100" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 200 (factor: 2)" timestamp="2022-02-04T17:16:24" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:24" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.0300" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges then the synth is suspended" time="0.0050" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 300 (factor: 3)" timestamp="2022-02-04T17:16:26" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:26" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.0190" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges then the synth is suspended" time="0.0100" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="downwards movement" timestamp="2022-02-04T17:16:28" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50.25 (factor: -1.99)" timestamp="2022-02-04T17:16:28" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:28" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.7190" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges then neither synth is suspended" time="0.0440" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50 (factor: -2)" timestamp="2022-02-04T17:16:31" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:31" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.6920" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges then the synth is suspended" time="0.0100" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 33.33 (factor: -3)" timestamp="2022-02-04T17:16:33" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:33" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.5500" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges then the synth is suspended" time="0.0370" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges and no exchange took place" time="0.0010" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="with a prior exchange from another user out of the source" timestamp="2022-02-04T17:16:36" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="on the dest side" timestamp="2022-02-04T17:16:36" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="upwards movement" timestamp="2022-02-04T17:16:36" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 199 (factor: 1.99)" timestamp="2022-02-04T17:16:36" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:36" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="3.5910" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges then neither synth is suspended" time="0.0410" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 200 (factor: 2)" timestamp="2022-02-04T17:16:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:40" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.4940" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges then the synth is suspended" time="0.0150" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 300 (factor: 3)" timestamp="2022-02-04T17:16:42" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:42" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.3920" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges then the synth is suspended" time="0.0110" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="downwards movement" timestamp="2022-02-04T17:16:44" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50.25 (factor: -1.99)" timestamp="2022-02-04T17:16:44" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:44" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="4.3900" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges then neither synth is suspended" time="0.0150" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50 (factor: -2)" timestamp="2022-02-04T17:16:49" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:49" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.3360" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges then the synth is suspended" time="0.0070" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 33.33 (factor: -3)" timestamp="2022-02-04T17:16:51" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:51" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.9690" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges then the synth is suspended" time="0.0070" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="on the src side" timestamp="2022-02-04T17:16:54" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="upwards movement" timestamp="2022-02-04T17:16:54" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 199 (factor: 1.99)" timestamp="2022-02-04T17:16:54" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:54" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.6620" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges then neither synth is suspended" time="0.0140" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 200 (factor: 2)" timestamp="2022-02-04T17:16:57" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:16:57" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="3.1720" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges then the synth is suspended" time="0.0260" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 300 (factor: 3)" timestamp="2022-02-04T17:17:00" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:17:00" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.5700" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges then the synth is suspended" time="0.0950" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="downwards movement" timestamp="2022-02-04T17:17:03" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50.25 (factor: -1.99)" timestamp="2022-02-04T17:17:03" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:17:03" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="3.1860" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges then neither synth is suspended" time="0.0380" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges and an exchange took place" time="0.0010" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50 (factor: -2)" timestamp="2022-02-04T17:17:06" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:17:06" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.5980" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges then the synth is suspended" time="0.0190" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 33.33 (factor: -3)" timestamp="2022-02-04T17:17:08" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:17:08" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.4980" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges then the synth is suspended" time="0.0080" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="suspension invoked by anyone via suspendSynthWithInvalidRate()" timestamp="2022-02-04T17:17:11" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension invoked by anyone via suspendSynthWithInvalidRate() when called with invalid synth, then reverts" time="0.0590" classname="when called with invalid synth, then reverts">
    </testcase>
  </testsuite>
  <testsuite name="when called with a synth with no price" timestamp="2022-02-04T17:17:12" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.7420" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension invoked by anyone via suspendSynthWithInvalidRate() when called with a synth with no price then suspension works as expected" time="0.0090" classname="then suspension works as expected">
    </testcase>
  </testsuite>
  <testsuite name="when the system is suspended" timestamp="2022-02-04T17:17:12" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension invoked by anyone via suspendSynthWithInvalidRate() when the system is suspended then suspended a synth fails" time="0.0330" classname="then suspended a synth fails">
    </testcase>
  </testsuite>
  <testsuite name="when system is resumed" timestamp="2022-02-04T17:17:13" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.0450" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension invoked by anyone via suspendSynthWithInvalidRate() when the system is suspended when system is resumed then suspension works as expected" time="0.0320" classname="then suspension works as expected">
    </testcase>
  </testsuite>
  <testsuite name="settlement ignores deviations" timestamp="2022-02-04T17:17:14" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchange 100 sUSD into sETH" timestamp="2022-02-04T17:17:14" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the sETH rate moves up by a factor of 2 to 200" timestamp="2022-02-04T17:17:14" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.3800" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations when a user exchange 100 sUSD into sETH and the sETH rate moves up by a factor of 2 to 200 then settlementOwing is 0 for rebate and reclaim, with 1 entry" time="0.0630" classname="then settlementOwing is 0 for rebate and reclaim, with 1 entry">
    </testcase>
  </testsuite>
  <testsuite name="multiple entries to settle" timestamp="2022-02-04T17:17:16" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the sETH rate moves down by 20%" timestamp="2022-02-04T17:17:16" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the waiting period expires" timestamp="2022-02-04T17:17:16" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations when a user exchange 100 sUSD into sETH multiple entries to settle when the sETH rate moves down by 20% and the waiting period expires then settlementOwing is existing rebate with 0 reclaim, with 1 entries" time="0.0490" classname="then settlementOwing is existing rebate with 0 reclaim, with 1 entries">
    </testcase>
  </testsuite>
  <testsuite name="and the user makes another exchange into sETH" timestamp="2022-02-04T17:17:17" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the sETH rate moves up by a factor of 2 to 200, causing the second entry to be skipped" timestamp="2022-02-04T17:17:17" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.5930" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations when a user exchange 100 sUSD into sETH multiple entries to settle when the sETH rate moves down by 20% and the waiting period expires and the user makes another exchange into sETH and the sETH rate moves up by a factor of 2 to 200, causing the second entry to be skipped then settlementOwing is existing rebate with 0 reclaim, with 2 entries" time="0.0930" classname="then settlementOwing is existing rebate with 0 reclaim, with 2 entries">
    </testcase>
  </testsuite>
  <testsuite name="and the sETH rate goes back up 25% (from 80 to 100)" timestamp="2022-02-04T17:17:19" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the waiting period expires" timestamp="2022-02-04T17:17:19" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations when a user exchange 100 sUSD into sETH multiple entries to settle when the sETH rate moves down by 20% and the waiting period expires and the user makes another exchange into sETH and the sETH rate goes back up 25% (from 80 to 100) and the waiting period expires then settlementOwing is existing rebate, existing reclaim, and 2 entries" time="0.1080" classname="then settlementOwing is existing rebate, existing reclaim, and 2 entries">
    </testcase>
  </testsuite>
  <testsuite name="and the user makes another exchange into sETH" timestamp="2022-02-04T17:17:20" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the sETH rate moves down by a factor of 2 to 50, causing the third entry to be skipped" timestamp="2022-02-04T17:17:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.8640" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations when a user exchange 100 sUSD into sETH multiple entries to settle when the sETH rate moves down by 20% and the waiting period expires and the user makes another exchange into sETH and the sETH rate goes back up 25% (from 80 to 100) and the waiting period expires and the user makes another exchange into sETH and the sETH rate moves down by a factor of 2 to 50, causing the third entry to be skipped then settlementOwing is existing rebate and reclaim, with 3 entries" time="0.1380" classname="then settlementOwing is existing rebate and reclaim, with 3 entries">
    </testcase>
  </testsuite>
  <testsuite name="edge case: aggregator returns 0 for settlement price" timestamp="2022-02-04T17:17:22" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when an aggregator is added to the exchangeRates" timestamp="2022-02-04T17:17:22" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the aggregator has a rate (so the exchange succeeds)" timestamp="2022-02-04T17:17:22" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges out of the aggregated rate into sUSD" timestamp="2022-02-04T17:17:22" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the aggregated rate becomes 0" timestamp="2022-02-04T17:17:22" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations edge case: aggregator returns 0 for settlement price when an aggregator is added to the exchangeRates and the aggregator has a rate (so the exchange succeeds) when a user exchanges out of the aggregated rate into sUSD and the aggregated rate becomes 0 then settlementOwing is 0 for rebate and reclaim, with 1 entry" time="0.0360" classname="then settlementOwing is 0 for rebate and reclaim, with 1 entry">
    </testcase>
  </testsuite>
  <testsuite name="and the waiting period expires" timestamp="2022-02-04T17:17:23" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.1820" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations edge case: aggregator returns 0 for settlement price when an aggregator is added to the exchangeRates and the aggregator has a rate (so the exchange succeeds) when a user exchanges out of the aggregated rate into sUSD and the aggregated rate becomes 0 and the waiting period expires then the user can settle with no impact" time="0.1070" classname="then the user can settle with no impact">
    </testcase>
  </testsuite>
  <testsuite name="and the aggregated rate is received but for a much higher roundId, leaving a large gap in roundIds" timestamp="2022-02-04T17:17:24" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations edge case: aggregator returns 0 for settlement price when an aggregator is added to the exchangeRates and the aggregator has a rate (so the exchange succeeds) when a user exchanges out of the aggregated rate into sUSD and the aggregated rate is received but for a much higher roundId, leaving a large gap in roundIds then settlementOwing is 0 for rebate and reclaim, with 1 entry" time="0.0570" classname="then settlementOwing is 0 for rebate and reclaim, with 1 entry">
    </testcase>
  </testsuite>
  <testsuite name="and the waiting period expires" timestamp="2022-02-04T17:17:26" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.5550" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations edge case: aggregator returns 0 for settlement price when an aggregator is added to the exchangeRates and the aggregator has a rate (so the exchange succeeds) when a user exchanges out of the aggregated rate into sUSD and the aggregated rate is received but for a much higher roundId, leaving a large gap in roundIds and the waiting period expires then the user can settle with no impact" time="0.1260" classname="then the user can settle with no impact">
    </testcase>
  </testsuite>
  <testsuite name="when a user exchanges into the aggregated rate from sUSD" timestamp="2022-02-04T17:17:27" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the aggregated rate becomes 0" timestamp="2022-02-04T17:17:27" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations edge case: aggregator returns 0 for settlement price when an aggregator is added to the exchangeRates and the aggregator has a rate (so the exchange succeeds) when a user exchanges into the aggregated rate from sUSD and the aggregated rate becomes 0 then settlementOwing is 0 for rebate and reclaim, with 1 entry" time="0.0320" classname="then settlementOwing is 0 for rebate and reclaim, with 1 entry">
    </testcase>
  </testsuite>
  <testsuite name="and the waiting period expires" timestamp="2022-02-04T17:17:28" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.0620" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations edge case: aggregator returns 0 for settlement price when an aggregator is added to the exchangeRates and the aggregator has a rate (so the exchange succeeds) when a user exchanges into the aggregated rate from sUSD and the aggregated rate becomes 0 and the waiting period expires then the user can settle with no impact" time="0.2820" classname="then the user can settle with no impact">
    </testcase>
  </testsuite>
  <testsuite name="and the aggregated rate is received but for a much higher roundId, leaving a large gap in roundIds" timestamp="2022-02-04T17:17:31" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations edge case: aggregator returns 0 for settlement price when an aggregator is added to the exchangeRates and the aggregator has a rate (so the exchange succeeds) when a user exchanges into the aggregated rate from sUSD and the aggregated rate is received but for a much higher roundId, leaving a large gap in roundIds then settlementOwing is 0 for rebate and reclaim, with 1 entry" time="0.0520" classname="then settlementOwing is 0 for rebate and reclaim, with 1 entry">
    </testcase>
  </testsuite>
  <testsuite name="and the waiting period expires" timestamp="2022-02-04T17:17:32" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.0840" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations edge case: aggregator returns 0 for settlement price when an aggregator is added to the exchangeRates and the aggregator has a rate (so the exchange succeeds) when a user exchanges into the aggregated rate from sUSD and the aggregated rate is received but for a much higher roundId, leaving a large gap in roundIds and the waiting period expires then the user can settle with no impact" time="0.1140" classname="then the user can settle with no impact">
    </testcase>
  </testsuite>
  <testsuite name="Given synth exchange fee rates to set" timestamp="2022-02-04T17:17:33" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Given synth exchange fee rates to update" timestamp="2022-02-04T17:17:33" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.3440" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) Given synth exchange fee rates to set Given synth exchange fee rates to update when 1 exchange rate to update then overwrite existing rate" time="0.0300" classname="when 1 exchange rate to update then overwrite existing rate">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L1 configuration (Synthetix, ExchangerWithFeeRecAlternatives, ExchangeRatesWithDexPricing) Given synth exchange fee rates to set Given synth exchange fee rates to update when multiple exchange rates then store them to be readable" time="0.0940" classname="when multiple exchange rates then store them to be readable">
    </testcase>
  </testsuite>
  <testsuite name="With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates)" timestamp="2022-02-04T17:17:34" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="waitingPeriodSecs" timestamp="2022-02-04T17:17:43" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) waitingPeriodSecs the default is configured correctly" time="0.0380" classname="the default is configured correctly">
    </testcase>
  </testsuite>
  <testsuite name="given it is configured to 90" timestamp="2022-02-04T17:17:44" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and there is an exchange" timestamp="2022-02-04T17:17:44" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) waitingPeriodSecs given it is configured to 90 and there is an exchange then the maxSecsLeftInWaitingPeriod is close to 90" time="0.0710" classname="then the maxSecsLeftInWaitingPeriod is close to 90">
    </testcase>
  </testsuite>
  <testsuite name="and 87 seconds elapses" timestamp="2022-02-04T17:17:45" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settle() is called" timestamp="2022-02-04T17:17:45" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.1350" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) waitingPeriodSecs given it is configured to 90 and there is an exchange and 87 seconds elapses when settle() is called then it reverts" time="0.0640" classname="then it reverts">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) waitingPeriodSecs given it is configured to 90 and there is an exchange and 87 seconds elapses when settle() is called and the maxSecsLeftInWaitingPeriod is close to 1" time="0.0150" classname="and the maxSecsLeftInWaitingPeriod is close to 1">
    </testcase>
  </testsuite>
  <testsuite name="when a further 5 seconds elapse" timestamp="2022-02-04T17:17:47" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settle() is called" timestamp="2022-02-04T17:17:47" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.0410" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) waitingPeriodSecs given it is configured to 90 and there is an exchange and 87 seconds elapses when a further 5 seconds elapse when settle() is called it successed" time="0.1320" classname="it successed">
    </testcase>
  </testsuite>
  <testsuite name="When the waiting period is set to 0" timestamp="2022-02-04T17:17:48" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) When the waiting period is set to 0 is set correctly" time="0.0070" classname="is set correctly">
    </testcase>
  </testsuite>
  <testsuite name="When exchanging" timestamp="2022-02-04T17:17:49" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) When the waiting period is set to 0 When exchanging creates no new entries" time="0.0500" classname="creates no new entries">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) When the waiting period is set to 0 When exchanging can exchange back without waiting" time="0.3080" classname="can exchange back without waiting">
    </testcase>
  </testsuite>
  <testsuite name="When the waiting period is switched on again" timestamp="2022-02-04T17:17:52" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) When the waiting period is set to 0 When exchanging When the waiting period is switched on again is set correctly" time="0.0130" classname="is set correctly">
    </testcase>
  </testsuite>
  <testsuite name="a new exchange takes place" timestamp="2022-02-04T17:17:54" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) When the waiting period is set to 0 When exchanging When the waiting period is switched on again a new exchange takes place creates a new entry" time="0.0490" classname="creates a new entry">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) When the waiting period is set to 0 When exchanging When the waiting period is switched on again a new exchange takes place then it emits an ExchangeEntryAppended" time="1.0610" classname="then it emits an ExchangeEntryAppended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) When the waiting period is set to 0 When exchanging When the waiting period is switched on again a new exchange takes place reverts if the user tries to settle before the waiting period has expired" time="0.0420" classname="reverts if the user tries to settle before the waiting period has expired">
    </testcase>
  </testsuite>
  <testsuite name="When the waiting period is set back to 0" timestamp="2022-02-04T17:18:00" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) When the waiting period is set to 0 When exchanging When the waiting period is switched on again a new exchange takes place When the waiting period is set back to 0 there should be only one sETH entry" time="0.0120" classname="there should be only one sETH entry">
    </testcase>
  </testsuite>
  <testsuite name="new trades take place" timestamp="2022-02-04T17:18:01" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="3.8830" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) When the waiting period is set to 0 When exchanging When the waiting period is switched on again a new exchange takes place When the waiting period is set back to 0 new trades take place should settle the pending exchanges and remove all entries" time="0.0370" classname="should settle the pending exchanges and remove all entries">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) When the waiting period is set to 0 When exchanging When the waiting period is switched on again a new exchange takes place When the waiting period is set back to 0 new trades take place should not create any new entries" time="0.0140" classname="should not create any new entries">
    </testcase>
  </testsuite>
  <testsuite name="priceDeviationThresholdFactor()" timestamp="2022-02-04T17:18:05" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceDeviationThresholdFactor() the default is configured correctly" time="0.0090" classname="the default is configured correctly">
    </testcase>
  </testsuite>
  <testsuite name="when a user exchanges into sETH over the default threshold factor" timestamp="2022-02-04T17:18:05" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.7010" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceDeviationThresholdFactor() when a user exchanges into sETH over the default threshold factor then the synth is suspended" time="0.0100" classname="then the synth is suspended">
    </testcase>
  </testsuite>
  <testsuite name="when a user exchanges into sETH under the default threshold factor" timestamp="2022-02-04T17:18:06" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.6420" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceDeviationThresholdFactor() when a user exchanges into sETH under the default threshold factor then the synth is suspended" time="0.0060" classname="then the synth is suspended">
    </testcase>
  </testsuite>
  <testsuite name="changing the factor works" timestamp="2022-02-04T17:18:07" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the factor is set to 3.1" timestamp="2022-02-04T17:18:07" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges into sETH over the default threshold factor, but under the new one" timestamp="2022-02-04T17:18:07" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.6850" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceDeviationThresholdFactor() changing the factor works when the factor is set to 3.1 when a user exchanges into sETH over the default threshold factor, but under the new one then the synth is not suspended" time="0.0110" classname="then the synth is not suspended">
    </testcase>
  </testsuite>
  <testsuite name="when a user exchanges into sETH under the default threshold factor, but under the new one" timestamp="2022-02-04T17:18:08" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.7520" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceDeviationThresholdFactor() changing the factor works when the factor is set to 3.1 when a user exchanges into sETH under the default threshold factor, but under the new one then the synth is not suspended" time="0.0090" classname="then the synth is not suspended">
    </testcase>
  </testsuite>
  <testsuite name="maxSecsLeftInWaitingPeriod()" timestamp="2022-02-04T17:18:08" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the waiting period is configured to 60" timestamp="2022-02-04T17:18:08" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when there are no exchanges" timestamp="2022-02-04T17:18:08" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.5320" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when there are no exchanges then it returns 0" time="0.0110" classname="then it returns 0">
    </testcase>
  </testsuite>
  <testsuite name="when a user with sUSD has performed an exchange into sEUR" timestamp="2022-02-04T17:18:09" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when a user with sUSD has performed an exchange into sEUR reports hasWaitingPeriodOrSettlementOwing" time="0.0240" classname="reports hasWaitingPeriodOrSettlementOwing">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when a user with sUSD has performed an exchange into sEUR then fetching maxSecs for that user into sEUR returns 60" time="0.0180" classname="then fetching maxSecs for that user into sEUR returns 60">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when a user with sUSD has performed an exchange into sEUR and fetching maxSecs for that user into the source synth returns 0" time="0.0170" classname="and fetching maxSecs for that user into the source synth returns 0">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when a user with sUSD has performed an exchange into sEUR and fetching maxSecs for that user into other synths returns 0" time="0.0610" classname="and fetching maxSecs for that user into other synths returns 0">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when a user with sUSD has performed an exchange into sEUR and fetching maxSec for other users into that synth are unaffected" time="0.0940" classname="and fetching maxSec for other users into that synth are unaffected">
    </testcase>
  </testsuite>
  <testsuite name="when 55 seconds has elapsed" timestamp="2022-02-04T17:18:13" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when a user with sUSD has performed an exchange into sEUR when 55 seconds has elapsed then it returns 5" time="0.0240" classname="then it returns 5">
    </testcase>
  </testsuite>
  <testsuite name="when another user does the same exchange" timestamp="2022-02-04T17:18:14" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.2050" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when a user with sUSD has performed an exchange into sEUR when 55 seconds has elapsed when another user does the same exchange then it still returns 5 for the original user" time="0.0530" classname="then it still returns 5 for the original user">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when a user with sUSD has performed an exchange into sEUR when 55 seconds has elapsed when another user does the same exchange and yet the new user has 60 secs" time="0.0240" classname="and yet the new user has 60 secs">
    </testcase>
  </testsuite>
  <testsuite name="when another 5 seconds elapses" timestamp="2022-02-04T17:18:16" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when a user with sUSD has performed an exchange into sEUR when 55 seconds has elapsed when another 5 seconds elapses then it returns 0" time="0.0080" classname="then it returns 0">
    </testcase>
  </testsuite>
  <testsuite name="when another 10 seconds elapses" timestamp="2022-02-04T17:18:17" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.8870" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when a user with sUSD has performed an exchange into sEUR when 55 seconds has elapsed when another 5 seconds elapses when another 10 seconds elapses then it still returns 0" time="0.0140" classname="then it still returns 0">
    </testcase>
  </testsuite>
  <testsuite name="when the same user exchanges into the new synth" timestamp="2022-02-04T17:18:18" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.1180" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) maxSecsLeftInWaitingPeriod() when the waiting period is configured to 60 when a user with sUSD has performed an exchange into sEUR when 55 seconds has elapsed when the same user exchanges into the new synth then the secs remaining returns 60 again" time="0.0240" classname="then the secs remaining returns 60 again">
    </testcase>
  </testsuite>
  <testsuite name="Given exchangeFeeRates are configured and when calling feeRateForExchange()" timestamp="2022-02-04T17:18:19" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.7340" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) Given exchangeFeeRates are configured and when calling feeRateForExchange() for two long synths, returns the regular exchange fee" time="0.0630" classname="for two long synths, returns the regular exchange fee">
    </testcase>
  </testsuite>
  <testsuite name="given exchange fee rates are configured into categories" timestamp="2022-02-04T17:18:20" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when calling getAmountsForExchange" timestamp="2022-02-04T17:18:20" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the destination is a crypto synth" timestamp="2022-02-04T17:18:20" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="4.2950" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) given exchange fee rates are configured into categories when calling getAmountsForExchange and the destination is a crypto synth then return the amountReceived" time="0.0160" classname="then return the amountReceived">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) given exchange fee rates are configured into categories when calling getAmountsForExchange and the destination is a crypto synth then return the fee" time="0.0390" classname="then return the fee">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) given exchange fee rates are configured into categories when calling getAmountsForExchange and the destination is a crypto synth then return the feeRate" time="0.1540" classname="then return the feeRate">
    </testcase>
  </testsuite>
  <testsuite name="and the destination is a fiat synth" timestamp="2022-02-04T17:18:24" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="3.2370" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) given exchange fee rates are configured into categories when calling getAmountsForExchange and the destination is a fiat synth then return the amountReceived" time="0.0330" classname="then return the amountReceived">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) given exchange fee rates are configured into categories when calling getAmountsForExchange and the destination is a fiat synth then return the fee" time="0.0700" classname="then return the fee">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) given exchange fee rates are configured into categories when calling getAmountsForExchange and the destination is a fiat synth then return the feeRate" time="0.1070" classname="then return the feeRate">
    </testcase>
  </testsuite>
  <testsuite name="when tripling an exchange rate" timestamp="2022-02-04T17:18:27" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.8600" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) given exchange fee rates are configured into categories when calling getAmountsForExchange when tripling an exchange rate then return the fee tripled" time="0.1820" classname="then return the fee tripled">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) given exchange fee rates are configured into categories when calling getAmountsForExchange when tripling an exchange rate then return the feeRate tripled" time="0.1790" classname="then return the feeRate tripled">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) given exchange fee rates are configured into categories when calling getAmountsForExchange when tripling an exchange rate then return the amountReceived less triple the fee" time="0.2130" classname="then return the amountReceived less triple the fee">
    </testcase>
  </testsuite>
  <testsuite name="dynamic fee when rates change" timestamp="2022-02-04T17:18:30" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change initial fee is correct" time="0.1260" classname="initial fee is correct">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change no exchange happens when dynamic fee is too high" time="1.0900" classname="no exchange happens when dynamic fee is too high">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change dynamic fee decays with time" time="0.9480" classname="dynamic fee decays with time">
    </testcase>
  </testsuite>
  <testsuite name="fee is caluclated correctly when rates spike or drop" timestamp="2022-02-04T17:18:34" tests="10" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="10.1830" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change fee is caluclated correctly when rates spike or drop .3% spike is below threshold" time="0.2650" classname=".3% spike is below threshold">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change fee is caluclated correctly when rates spike or drop .3% drop is below threshold" time="0.2650" classname=".3% drop is below threshold">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change fee is caluclated correctly when rates spike or drop 1% spike result in correct dynamic fee" time="0.2060" classname="1% spike result in correct dynamic fee">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change fee is caluclated correctly when rates spike or drop 1% drop result in correct dynamic fee" time="0.1710" classname="1% drop result in correct dynamic fee">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change fee is caluclated correctly when rates spike or drop 5% spike result in correct dynamic fee" time="0.2220" classname="5% spike result in correct dynamic fee">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change fee is caluclated correctly when rates spike or drop 5% drop result in correct dynamic fee" time="0.2190" classname="5% drop result in correct dynamic fee">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change fee is caluclated correctly when rates spike or drop 10% spike is over the max and is too volatile" time="0.2750" classname="10% spike is over the max and is too volatile">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change fee is caluclated correctly when rates spike or drop 10% drop result in correct dynamic fee" time="0.2830" classname="10% drop result in correct dynamic fee">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change fee is caluclated correctly when rates spike or drop trading between two spiked rates is correctly calculated " time="0.3710" classname="trading between two spiked rates is correctly calculated ">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) given exchange fee rates are configured into categories when calling getAmountsForExchange dynamic fee when rates change fee is caluclated correctly when rates spike or drop trading between two spiked respects max fee and volatility flag" time="1.0260" classname="trading between two spiked respects max fee and volatility flag">
    </testcase>
  </testsuite>
  <testsuite name="settlement" timestamp="2022-02-04T17:18:44" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="suspension conditions" timestamp="2022-02-04T17:18:44" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:18:44" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement suspension conditions when System is suspended then calling settle() reverts" time="0.0290" classname="then calling settle() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:18:45" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.8150" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement suspension conditions when System is suspended when System is resumed then calling exchange() succeeds" time="0.0350" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Synth is suspended" timestamp="2022-02-04T17:18:46" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement suspension conditions when Synth is suspended then calling settle() reverts" time="0.0300" classname="then calling settle() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Synth is resumed" timestamp="2022-02-04T17:18:47" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.6850" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement suspension conditions when Synth is suspended when Synth is resumed then calling exchange() succeeds" time="0.0240" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Synth(sBTC) is suspended" timestamp="2022-02-04T17:18:47" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.7510" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement suspension conditions when Synth(sBTC) is suspended then settling other synths still works" time="0.0590" classname="then settling other synths still works">
    </testcase>
  </testsuite>
  <testsuite name="when Synth(sBTC) is suspended for exchanging" timestamp="2022-02-04T17:18:48" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.7350" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement suspension conditions when Synth(sBTC) is suspended for exchanging then settling it still works" time="0.0290" classname="then settling it still works">
    </testcase>
  </testsuite>
  <testsuite name="given the sEUR rate is 2, and sETH is 100, sBTC is 9000" timestamp="2022-02-04T17:18:49" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the exchange fee rate is 1% for easier human consumption" timestamp="2022-02-04T17:18:49" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the waitingPeriodSecs is set to 60" timestamp="2022-02-04T17:18:49" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="various rebate &amp; reclaim scenarios" timestamp="2022-02-04T17:18:49" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the debt cache is replaced with a spy" timestamp="2022-02-04T17:18:49" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the priceDeviationThresholdFactor is set to a factor of 2.5" timestamp="2022-02-04T17:18:49" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1" timestamp="2022-02-04T17:18:49" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 then settlement reclaimAmount shows 0 reclaim and 0 refund" time="0.0770" classname="then settlement reclaimAmount shows 0 reclaim and 0 refund">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when sEUR is attempted to be exchanged away by the user, it reverts" time="0.1780" classname="when sEUR is attempted to be exchanged away by the user, it reverts">
    </testcase>
  </testsuite>
  <testsuite name="when settle() is invoked on sEUR" timestamp="2022-02-04T17:18:53" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.2360" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when settle() is invoked on sEUR then it reverts as the waiting period has not ended" time="0.0370" classname="then it reverts as the waiting period has not ended">
    </testcase>
  </testsuite>
  <testsuite name="when the waiting period elapses" timestamp="2022-02-04T17:18:54" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settle() is invoked on sEUR" timestamp="2022-02-04T17:18:54" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.8660" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the waiting period elapses when settle() is invoked on sEUR then it completes with one settlement" time="0.0070" classname="then it completes with one settlement">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the waiting period elapses when settle() is invoked on sEUR and the debt cache sync is not called" time="0.0000" classname="and the debt cache sync is not called">
    </testcase>
  </testsuite>
  <testsuite name="when settle() is invoked on the src synth - sUSD" timestamp="2022-02-04T17:18:57" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.2950" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when settle() is invoked on the src synth - sUSD then it completes with no reclaim or rebate" time="0.0430" classname="then it completes with no reclaim or rebate">
    </testcase>
  </testsuite>
  <testsuite name="when settle() is invoked on sEUR by another user" timestamp="2022-02-04T17:18:58" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.4750" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when settle() is invoked on sEUR by another user then it completes with no reclaim or rebate" time="0.0730" classname="then it completes with no reclaim or rebate">
    </testcase>
  </testsuite>
  <testsuite name="when the price doubles for sUSD:sEUR to 4:1" timestamp="2022-02-04T17:19:00" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price doubles for sUSD:sEUR to 4:1 then settlement reclaimAmount shows a reclaim of half the entire balance of sEUR" time="0.0440" classname="then settlement reclaimAmount shows a reclaim of half the entire balance of sEUR">
    </testcase>
  </testsuite>
  <testsuite name="when settle() is invoked" timestamp="2022-02-04T17:19:01" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.3920" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price doubles for sUSD:sEUR to 4:1 when settle() is invoked then it reverts as the waiting period has not ended" time="0.0370" classname="then it reverts as the waiting period has not ended">
    </testcase>
  </testsuite>
  <testsuite name="when another minute passes" timestamp="2022-02-04T17:19:02" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settle() is invoked" timestamp="2022-02-04T17:19:02" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="4.4760" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price doubles for sUSD:sEUR to 4:1 when another minute passes when settle() is invoked then it settles with a reclaim" time="0.0220" classname="then it settles with a reclaim">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price doubles for sUSD:sEUR to 4:1 when another minute passes when settle() is invoked then it settles with a ExchangeEntrySettled event with reclaim" time="0.0040" classname="then it settles with a ExchangeEntrySettled event with reclaim">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price doubles for sUSD:sEUR to 4:1 when another minute passes when settle() is invoked and the debt cache is called" time="0.0020" classname="and the debt cache is called">
    </testcase>
  </testsuite>
  <testsuite name="when settle() is invoked and the exchange fee rate has changed" timestamp="2022-02-04T17:19:07" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.4640" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price doubles for sUSD:sEUR to 4:1 when another minute passes when settle() is invoked and the exchange fee rate has changed then it settles with a reclaim" time="0.1700" classname="then it settles with a reclaim">
    </testcase>
  </testsuite>
  <testsuite name="when an exchange out of sEUR for more than the balance after settlement,but less than the total initially" timestamp="2022-02-04T17:19:08" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.6670" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price doubles for sUSD:sEUR to 4:1 when another minute passes when an exchange out of sEUR for more than the balance after settlement,but less than the total initially then it succeeds, exchanging the entire amount after settlement" time="0.0810" classname="then it succeeds, exchanging the entire amount after settlement">
    </testcase>
  </testsuite>
  <testsuite name="when an exchange out of sEUR for more than the balance after settlement,and more than the total initially and the exchangefee rate changed" timestamp="2022-02-04T17:19:10" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.6730" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price doubles for sUSD:sEUR to 4:1 when another minute passes when an exchange out of sEUR for more than the balance after settlement,and more than the total initially and the exchangefee rate changed then it succeeds, exchanging the entire amount after settlement" time="0.1050" classname="then it succeeds, exchanging the entire amount after settlement">
    </testcase>
  </testsuite>
  <testsuite name="when an exchange out of sEUR for less than the balance after settlement" timestamp="2022-02-04T17:19:12" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.7460" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price doubles for sUSD:sEUR to 4:1 when another minute passes when an exchange out of sEUR for less than the balance after settlement then it succeeds, exchanging the amount given" time="0.0450" classname="then it succeeds, exchanging the amount given">
    </testcase>
  </testsuite>
  <testsuite name="when the price halves for sUSD:sEUR to 1:1" timestamp="2022-02-04T17:19:14" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price halves for sUSD:sEUR to 1:1 then settlement rebateAmount shows a rebate of half the entire balance of sEUR" time="0.0660" classname="then settlement rebateAmount shows a rebate of half the entire balance of sEUR">
    </testcase>
  </testsuite>
  <testsuite name="when the user makes a 2nd exchange of 100 sUSD into sUSD:sEUR at 1:1" timestamp="2022-02-04T17:19:16" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and then the price increases for sUSD:sEUR to 2:1" timestamp="2022-02-04T17:19:16" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settlement is invoked" timestamp="2022-02-04T17:19:16" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when another minute passes" timestamp="2022-02-04T17:19:16" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settle() is invoked" timestamp="2022-02-04T17:19:16" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.6460" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price halves for sUSD:sEUR to 1:1 when the user makes a 2nd exchange of 100 sUSD into sUSD:sEUR at 1:1 and then the price increases for sUSD:sEUR to 2:1 when settlement is invoked when another minute passes when settle() is invoked then it settles with two ExchangeEntrySettled events one for reclaim and one for rebate" time="0.0050" classname="then it settles with two ExchangeEntrySettled events one for reclaim and one for rebate">
    </testcase>
  </testsuite>
  <testsuite name="when settlement is invoked" timestamp="2022-02-04T17:19:17" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price halves for sUSD:sEUR to 1:1 when settlement is invoked then it reverts as the waiting period has not ended" time="0.0440" classname="then it reverts as the waiting period has not ended">
    </testcase>
  </testsuite>
  <testsuite name="when another minute passes" timestamp="2022-02-04T17:19:19" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settle() is invoked" timestamp="2022-02-04T17:19:19" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.9370" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price halves for sUSD:sEUR to 1:1 when settlement is invoked when another minute passes when settle() is invoked then it settles with a rebate" time="0.0180" classname="then it settles with a rebate">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price halves for sUSD:sEUR to 1:1 when settlement is invoked when another minute passes when settle() is invoked then it settles with a ExchangeEntrySettled event with rebate" time="0.0040" classname="then it settles with a ExchangeEntrySettled event with rebate">
    </testcase>
  </testsuite>
  <testsuite name="when an exchange out of sEUR for their expected balance before exchange" timestamp="2022-02-04T17:19:22" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.7370" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price halves for sUSD:sEUR to 1:1 when settlement is invoked when another minute passes when an exchange out of sEUR for their expected balance before exchange then it succeeds, exchanging the entire amount plus the rebate" time="0.0510" classname="then it succeeds, exchanging the entire amount plus the rebate">
    </testcase>
  </testsuite>
  <testsuite name="when an exchange out of sEUR for some amount less than their balance before exchange" timestamp="2022-02-04T17:19:23" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.6870" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price halves for sUSD:sEUR to 1:1 when settlement is invoked when another minute passes when an exchange out of sEUR for some amount less than their balance before exchange then it succeeds, exchanging the amount plus the rebate" time="0.0960" classname="then it succeeds, exchanging the amount plus the rebate">
    </testcase>
  </testsuite>
  <testsuite name="when the price returns to sUSD:sEUR to 2:1" timestamp="2022-02-04T17:19:25" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price halves for sUSD:sEUR to 1:1 when the price returns to sUSD:sEUR to 2:1 then settlement reclaimAmount shows 0 reclaim and 0 refund" time="0.0580" classname="then settlement reclaimAmount shows 0 reclaim and 0 refund">
    </testcase>
  </testsuite>
  <testsuite name="when another minute elapses and the sETH price changes" timestamp="2022-02-04T17:19:26" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price halves for sUSD:sEUR to 1:1 when the price returns to sUSD:sEUR to 2:1 when another minute elapses and the sETH price changes then settlement reclaimAmount still shows 0 reclaim and 0 refund as the timeout period ended" time="0.0510" classname="then settlement reclaimAmount still shows 0 reclaim and 0 refund as the timeout period ended">
    </testcase>
  </testsuite>
  <testsuite name="when settle() is invoked" timestamp="2022-02-04T17:19:28" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.4350" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 when the first user exchanges 100 sUSD into sUSD:sEUR at 2:1 when the price halves for sUSD:sEUR to 1:1 when the price returns to sUSD:sEUR to 2:1 when another minute elapses and the sETH price changes when settle() is invoked then it settles with no reclaim or rebate" time="0.0840" classname="then it settles with no reclaim or rebate">
    </testcase>
  </testsuite>
  <testsuite name="given the first user has 1000 sEUR" timestamp="2022-02-04T17:19:29" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the first user exchanges 100 sEUR into sEUR:sBTC at 9000:2" timestamp="2022-02-04T17:19:29" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 given the first user has 1000 sEUR when the first user exchanges 100 sEUR into sEUR:sBTC at 9000:2 then settlement reclaimAmount shows 0 reclaim and 0 refund" time="0.0560" classname="then settlement reclaimAmount shows 0 reclaim and 0 refund">
    </testcase>
  </testsuite>
  <testsuite name="when the price doubles for sUSD:sEUR to 4:1" timestamp="2022-02-04T17:19:31" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 given the first user has 1000 sEUR when the first user exchanges 100 sEUR into sEUR:sBTC at 9000:2 when the price doubles for sUSD:sEUR to 4:1 then settlement shows a rebate rebateAmount" time="0.0530" classname="then settlement shows a rebate rebateAmount">
    </testcase>
  </testsuite>
  <testsuite name="when settlement is invoked" timestamp="2022-02-04T17:19:32" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.3190" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 given the first user has 1000 sEUR when the first user exchanges 100 sEUR into sEUR:sBTC at 9000:2 when the price doubles for sUSD:sEUR to 4:1 when settlement is invoked then it reverts as the waiting period has not ended" time="0.0460" classname="then it reverts as the waiting period has not ended">
    </testcase>
  </testsuite>
  <testsuite name="when the price gains for sBTC more than the loss of the sEUR change" timestamp="2022-02-04T17:19:33" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 given the first user has 1000 sEUR when the first user exchanges 100 sEUR into sEUR:sBTC at 9000:2 when the price doubles for sUSD:sEUR to 4:1 when the price gains for sBTC more than the loss of the sEUR change then the reclaimAmount is whats left when subtracting the rebate" time="0.0590" classname="then the reclaimAmount is whats left when subtracting the rebate">
    </testcase>
  </testsuite>
  <testsuite name="when the same user exchanges some sUSD into sBTC - the same destination" timestamp="2022-02-04T17:19:35" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 given the first user has 1000 sEUR when the first user exchanges 100 sEUR into sEUR:sBTC at 9000:2 when the price doubles for sUSD:sEUR to 4:1 when the price gains for sBTC more than the loss of the sEUR change when the same user exchanges some sUSD into sBTC - the same destination then the reclaimAmount is unchanged" time="0.1130" classname="then the reclaimAmount is unchanged">
    </testcase>
  </testsuite>
  <testsuite name="when the price of sBTC lowers, turning the profit to a loss" timestamp="2022-02-04T17:19:36" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 given the first user has 1000 sEUR when the first user exchanges 100 sEUR into sEUR:sBTC at 9000:2 when the price doubles for sUSD:sEUR to 4:1 when the price gains for sBTC more than the loss of the sEUR change when the same user exchanges some sUSD into sBTC - the same destination when the price of sBTC lowers, turning the profit to a loss then the rebateAmount calculation of settlementOwing on sBTC includes both exchanges" time="0.1270" classname="then the rebateAmount calculation of settlementOwing on sBTC includes both exchanges">
    </testcase>
  </testsuite>
  <testsuite name="when another minute passes" timestamp="2022-02-04T17:19:38" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settle() is invoked for sBTC" timestamp="2022-02-04T17:19:38" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.7370" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 given the first user has 1000 sEUR when the first user exchanges 100 sEUR into sEUR:sBTC at 9000:2 when the price doubles for sUSD:sEUR to 4:1 when the price gains for sBTC more than the loss of the sEUR change when the same user exchanges some sUSD into sBTC - the same destination when the price of sBTC lowers, turning the profit to a loss when another minute passes when settle() is invoked for sBTC then it settles with a rebate @gasprofile" time="0.2290" classname="then it settles with a rebate @gasprofile">
    </testcase>
  </testsuite>
  <testsuite name="when another minute passes and the exchange fee rate has increased" timestamp="2022-02-04T17:19:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settle() is invoked for sBTC" timestamp="2022-02-04T17:19:40" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.6070" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 given the first user has 1000 sEUR when the first user exchanges 100 sEUR into sEUR:sBTC at 9000:2 when the price doubles for sUSD:sEUR to 4:1 when the price gains for sBTC more than the loss of the sEUR change when the same user exchanges some sUSD into sBTC - the same destination when the price of sBTC lowers, turning the profit to a loss when another minute passes and the exchange fee rate has increased when settle() is invoked for sBTC then it settles with a rebate using the exchange fee rate at time of trade" time="0.1430" classname="then it settles with a rebate using the exchange fee rate at time of trade">
    </testcase>
  </testsuite>
  <testsuite name="and the max number of exchange entries is 5" timestamp="2022-02-04T17:19:42" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user tries to exchange 100 sEUR into sBTC 5 times" timestamp="2022-02-04T17:19:42" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 given the first user has 1000 sEUR and the max number of exchange entries is 5 when a user tries to exchange 100 sEUR into sBTC 5 times then all succeed" time="0.0000" classname="then all succeed">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 given the first user has 1000 sEUR and the max number of exchange entries is 5 when a user tries to exchange 100 sEUR into sBTC 5 times when one more is tried, then if fails" time="0.4430" classname="when one more is tried, then if fails">
    </testcase>
  </testsuite>
  <testsuite name="when more than 60s elapses" timestamp="2022-02-04T17:19:47" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the user invokes settle() on the dest synth" timestamp="2022-02-04T17:19:47" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="3.2940" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) settlement given the sEUR rate is 2, and sETH is 100, sBTC is 9000 and the exchange fee rate is 1% for easier human consumption and the waitingPeriodSecs is set to 60 various rebate &amp; reclaim scenarios when the debt cache is replaced with a spy and the priceDeviationThresholdFactor is set to a factor of 2.5 given the first user has 1000 sEUR and the max number of exchange entries is 5 when a user tries to exchange 100 sEUR into sBTC 5 times when more than 60s elapses and the user invokes settle() on the dest synth then when the user performs 5 more exchanges into the same synth, it succeeds" time="1.0360" classname="then when the user performs 5 more exchanges into the same synth, it succeeds">
    </testcase>
  </testsuite>
  <testsuite name="calculateAmountAfterSettlement()" timestamp="2022-02-04T17:19:50" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="given a user has 1000 sEUR" timestamp="2022-02-04T17:19:50" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when calculatAmountAfterSettlement is invoked with and amount &lt; 1000 and no refund" timestamp="2022-02-04T17:19:50" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.5410" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) calculateAmountAfterSettlement() given a user has 1000 sEUR when calculatAmountAfterSettlement is invoked with and amount &lt; 1000 and no refund then the response is the given amount of 500" time="0.0000" classname="then the response is the given amount of 500">
    </testcase>
  </testsuite>
  <testsuite name="when calculatAmountAfterSettlement is invoked with and amount &lt; 1000 and a refund" timestamp="2022-02-04T17:19:51" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.4880" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) calculateAmountAfterSettlement() given a user has 1000 sEUR when calculatAmountAfterSettlement is invoked with and amount &lt; 1000 and a refund then the response is the given amount of 500 plus the refund" time="0.0000" classname="then the response is the given amount of 500 plus the refund">
    </testcase>
  </testsuite>
  <testsuite name="when calculatAmountAfterSettlement is invoked with and amount &gt; 1000 and no refund" timestamp="2022-02-04T17:19:51" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.5830" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) calculateAmountAfterSettlement() given a user has 1000 sEUR when calculatAmountAfterSettlement is invoked with and amount &gt; 1000 and no refund then the response is the balance of 1000" time="0.0000" classname="then the response is the balance of 1000">
    </testcase>
  </testsuite>
  <testsuite name="when calculatAmountAfterSettlement is invoked with and amount &gt; 1000 and a refund" timestamp="2022-02-04T17:19:52" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.5190" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) calculateAmountAfterSettlement() given a user has 1000 sEUR when calculatAmountAfterSettlement is invoked with and amount &gt; 1000 and a refund then the response is the given amount of 1000 plus the refund" time="0.0010" classname="then the response is the given amount of 1000 plus the refund">
    </testcase>
  </testsuite>
  <testsuite name="exchange()" timestamp="2022-02-04T17:19:52" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() exchange() cannot be invoked directly by any account" time="0.7410" classname="exchange() cannot be invoked directly by any account">
    </testcase>
  </testsuite>
  <testsuite name="suspension conditions on Synthetix.exchange()" timestamp="2022-02-04T17:19:54" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:19:54" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() suspension conditions on Synthetix.exchange() when System is suspended then calling exchange() reverts" time="0.0230" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:19:54" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.8630" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() suspension conditions on Synthetix.exchange() when System is suspended when System is resumed then calling exchange() succeeds" time="0.2610" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Exchange is suspended" timestamp="2022-02-04T17:19:55" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() suspension conditions on Synthetix.exchange() when Exchange is suspended then calling exchange() reverts" time="0.0290" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Exchange is resumed" timestamp="2022-02-04T17:19:56" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.8510" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() suspension conditions on Synthetix.exchange() when Exchange is suspended when Exchange is resumed then calling exchange() succeeds" time="0.2320" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when SynthExchange is suspended" timestamp="2022-02-04T17:19:57" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() suspension conditions on Synthetix.exchange() when SynthExchange is suspended then calling exchange() reverts" time="0.0230" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when SynthExchange is resumed" timestamp="2022-02-04T17:19:57" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.9090" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() suspension conditions on Synthetix.exchange() when SynthExchange is suspended when SynthExchange is resumed then calling exchange() succeeds" time="0.2810" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Synth is suspended" timestamp="2022-02-04T17:19:58" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() suspension conditions on Synthetix.exchange() when Synth is suspended then calling exchange() reverts" time="0.0340" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Synth is resumed" timestamp="2022-02-04T17:19:59" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.9240" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() suspension conditions on Synthetix.exchange() when Synth is suspended when Synth is resumed then calling exchange() succeeds" time="0.2390" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Synth(sBTC) is suspended" timestamp="2022-02-04T17:20:00" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.3610" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() suspension conditions on Synthetix.exchange() when Synth(sBTC) is suspended then exchanging other synths still works" time="0.5900" classname="then exchanging other synths still works">
    </testcase>
  </testsuite>
  <testsuite name="various exchange scenarios" timestamp="2022-02-04T17:20:01" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user has 1000 sUSD" timestamp="2022-02-04T17:20:01" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD should allow a user to exchange the synths they hold in one flavour for another" time="0.4690" classname="should allow a user to exchange the synths they hold in one flavour for another">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD should emit a SynthExchange event @gasprofile" time="0.2740" classname="should emit a SynthExchange event @gasprofile">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD should emit an ExchangeTracking event @gasprofile" time="0.3670" classname="should emit an ExchangeTracking event @gasprofile">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD when a user tries to exchange more than they have, then it fails" time="0.2470" classname="when a user tries to exchange more than they have, then it fails">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD when a user tries to exchange more than they have, then it fails" time="0.2760" classname="when a user tries to exchange more than they have, then it fails">
    </testcase>
  </testsuite>
  <testsuite name="rate stale scenarios for exchange" timestamp="2022-02-04T17:20:07" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when rates have gone stale for all synths" timestamp="2022-02-04T17:20:07" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchange when rates have gone stale for all synths attempting to exchange from sUSD into sAUD reverts with dest stale" time="0.1270" classname="attempting to exchange from sUSD into sAUD reverts with dest stale">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchange when rates have gone stale for all synths settling still works " time="0.0270" classname="settling still works ">
    </testcase>
  </testsuite>
  <testsuite name="when that synth has a fresh rate" timestamp="2022-02-04T17:20:08" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the user exchange into that synth" timestamp="2022-02-04T17:20:08" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="after the waiting period expires and the synth has gone stale" timestamp="2022-02-04T17:20:08" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.9960" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchange when rates have gone stale for all synths when that synth has a fresh rate when the user exchange into that synth after the waiting period expires and the synth has gone stale exchange back to sUSD fails as the source has no rate" time="0.1310" classname="exchange back to sUSD fails as the source has no rate">
    </testcase>
  </testsuite>
  <testsuite name="rate stale scenarios for exchangeOnBehalf" timestamp="2022-02-04T17:20:09" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when rates have gone stale for all synths" timestamp="2022-02-04T17:20:09" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchangeOnBehalf when rates have gone stale for all synths attempting to exchangeOnBehalf from sUSD into sAUD reverts with dest stale" time="0.2910" classname="attempting to exchangeOnBehalf from sUSD into sAUD reverts with dest stale">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchangeOnBehalf when rates have gone stale for all synths settling still works " time="0.0290" classname="settling still works ">
    </testcase>
  </testsuite>
  <testsuite name="when that synth has a fresh rate" timestamp="2022-02-04T17:20:11" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the user exchangeOnBehalf into that synth" timestamp="2022-02-04T17:20:11" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="after the waiting period expires and the synth has gone stale" timestamp="2022-02-04T17:20:11" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.2290" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchangeOnBehalf when rates have gone stale for all synths when that synth has a fresh rate when the user exchangeOnBehalf into that synth after the waiting period expires and the synth has gone stale exchangeOnBehalf back to sUSD fails as the source has no rate" time="0.1470" classname="exchangeOnBehalf back to sUSD fails as the source has no rate">
    </testcase>
  </testsuite>
  <testsuite name="rate stale scenarios for exchangeWithTracking" timestamp="2022-02-04T17:20:12" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when rates have gone stale for all synths" timestamp="2022-02-04T17:20:12" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchangeWithTracking when rates have gone stale for all synths attempting to exchangeWithTracking from sUSD into sAUD reverts with dest stale" time="0.2200" classname="attempting to exchangeWithTracking from sUSD into sAUD reverts with dest stale">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchangeWithTracking when rates have gone stale for all synths settling still works " time="0.0300" classname="settling still works ">
    </testcase>
  </testsuite>
  <testsuite name="when that synth has a fresh rate" timestamp="2022-02-04T17:20:14" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the user exchangeWithTracking into that synth" timestamp="2022-02-04T17:20:14" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="after the waiting period expires and the synth has gone stale" timestamp="2022-02-04T17:20:14" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.5580" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchangeWithTracking when rates have gone stale for all synths when that synth has a fresh rate when the user exchangeWithTracking into that synth after the waiting period expires and the synth has gone stale exchangeWithTracking back to sUSD fails as the source has no rate" time="0.1560" classname="exchangeWithTracking back to sUSD fails as the source has no rate">
    </testcase>
  </testsuite>
  <testsuite name="rate stale scenarios for exchangeOnBehalfWithTracking" timestamp="2022-02-04T17:20:15" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when rates have gone stale for all synths" timestamp="2022-02-04T17:20:15" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchangeOnBehalfWithTracking when rates have gone stale for all synths attempting to exchangeOnBehalfWithTracking from sUSD into sAUD reverts with dest stale" time="0.2440" classname="attempting to exchangeOnBehalfWithTracking from sUSD into sAUD reverts with dest stale">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchangeOnBehalfWithTracking when rates have gone stale for all synths settling still works " time="0.0490" classname="settling still works ">
    </testcase>
  </testsuite>
  <testsuite name="when that synth has a fresh rate" timestamp="2022-02-04T17:20:17" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the user exchangeOnBehalfWithTracking into that synth" timestamp="2022-02-04T17:20:17" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="after the waiting period expires and the synth has gone stale" timestamp="2022-02-04T17:20:17" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.1290" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD rate stale scenarios for exchangeOnBehalfWithTracking when rates have gone stale for all synths when that synth has a fresh rate when the user exchangeOnBehalfWithTracking into that synth after the waiting period expires and the synth has gone stale exchangeOnBehalfWithTracking back to sUSD fails as the source has no rate" time="0.1280" classname="exchangeOnBehalfWithTracking back to sUSD fails as the source has no rate">
    </testcase>
  </testsuite>
  <testsuite name="exchanging on behalf" timestamp="2022-02-04T17:20:18" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when not approved it should revert on" timestamp="2022-02-04T17:20:18" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.6330" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when not approved it should revert on exchangeOnBehalf" time="0.0380" classname="exchangeOnBehalf">
    </testcase>
  </testsuite>
  <testsuite name="when delegate address approved to exchangeOnBehalf" timestamp="2022-02-04T17:20:19" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when delegate address approved to exchangeOnBehalf should revert if non-delegate invokes exchangeOnBehalf" time="1.5310" classname="should revert if non-delegate invokes exchangeOnBehalf">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when delegate address approved to exchangeOnBehalf should exchangeOnBehalf and authoriser recieves the destSynth" time="0.4240" classname="should exchangeOnBehalf and authoriser recieves the destSynth">
    </testcase>
  </testsuite>
  <testsuite name="suspension conditions on Synthetix.exchangeOnBehalf()" timestamp="2022-02-04T17:20:22" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:20:22" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalf() when System is suspended then calling exchange() reverts" time="0.0240" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:20:23" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.0260" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalf() when System is suspended when System is resumed then calling exchange() succeeds" time="0.2170" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Exchange is suspended" timestamp="2022-02-04T17:20:24" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalf() when Exchange is suspended then calling exchange() reverts" time="0.0320" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Exchange is resumed" timestamp="2022-02-04T17:20:25" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.9260" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalf() when Exchange is suspended when Exchange is resumed then calling exchange() succeeds" time="0.2770" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when SynthExchange is suspended" timestamp="2022-02-04T17:20:26" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalf() when SynthExchange is suspended then calling exchange() reverts" time="0.0290" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when SynthExchange is resumed" timestamp="2022-02-04T17:20:26" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.9400" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalf() when SynthExchange is suspended when SynthExchange is resumed then calling exchange() succeeds" time="0.2370" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Synth is suspended" timestamp="2022-02-04T17:20:27" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalf() when Synth is suspended then calling exchange() reverts" time="0.0330" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Synth is resumed" timestamp="2022-02-04T17:20:28" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.9310" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalf() when Synth is suspended when Synth is resumed then calling exchange() succeeds" time="0.2460" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Synth(sBTC) is suspended" timestamp="2022-02-04T17:20:29" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.9270" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalf() when Synth(sBTC) is suspended then exchanging other synths on behalf still works" time="0.2550" classname="then exchanging other synths on behalf still works">
    </testcase>
  </testsuite>
  <testsuite name="exchanging on behalf with tracking" timestamp="2022-02-04T17:20:30" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when not approved it should revert on" timestamp="2022-02-04T17:20:30" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.6420" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when not approved it should revert on exchangeOnBehalfWithTracking" time="0.0600" classname="exchangeOnBehalfWithTracking">
    </testcase>
  </testsuite>
  <testsuite name="when delegate address approved to exchangeOnBehalf" timestamp="2022-02-04T17:20:30" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when delegate address approved to exchangeOnBehalf should revert if non-delegate invokes exchangeOnBehalf" time="1.5220" classname="should revert if non-delegate invokes exchangeOnBehalf">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when delegate address approved to exchangeOnBehalf should exchangeOnBehalf and authoriser recieves the destSynth" time="0.4250" classname="should exchangeOnBehalf and authoriser recieves the destSynth">
    </testcase>
  </testsuite>
  <testsuite name="suspension conditions on Synthetix.exchangeOnBehalfWithTracking()" timestamp="2022-02-04T17:20:34" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:20:34" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalfWithTracking() when System is suspended then calling exchange() reverts" time="0.0250" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:20:34" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.4110" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalfWithTracking() when System is suspended when System is resumed then calling exchange() succeeds" time="0.1840" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Exchange is suspended" timestamp="2022-02-04T17:20:37" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalfWithTracking() when Exchange is suspended then calling exchange() reverts" time="0.0420" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Exchange is resumed" timestamp="2022-02-04T17:20:37" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.7900" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalfWithTracking() when Exchange is suspended when Exchange is resumed then calling exchange() succeeds" time="0.2080" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when SynthExchange is suspended" timestamp="2022-02-04T17:20:38" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalfWithTracking() when SynthExchange is suspended then calling exchange() reverts" time="0.0210" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when SynthExchange is resumed" timestamp="2022-02-04T17:20:39" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.9390" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalfWithTracking() when SynthExchange is suspended when SynthExchange is resumed then calling exchange() succeeds" time="0.2190" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Synth is suspended" timestamp="2022-02-04T17:20:40" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalfWithTracking() when Synth is suspended then calling exchange() reverts" time="0.0270" classname="then calling exchange() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Synth is resumed" timestamp="2022-02-04T17:20:40" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.8990" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalfWithTracking() when Synth is suspended when Synth is resumed then calling exchange() succeeds" time="0.2330" classname="then calling exchange() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Synth(sBTC) is suspended" timestamp="2022-02-04T17:20:41" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.8650" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() various exchange scenarios when a user has 1000 sUSD exchanging on behalf with tracking when delegate address approved to exchangeOnBehalf suspension conditions on Synthetix.exchangeOnBehalfWithTracking() when Synth(sBTC) is suspended then exchanging other synths on behalf still works" time="0.2270" classname="then exchanging other synths on behalf still works">
    </testcase>
  </testsuite>
  <testsuite name="edge case: when an aggregator has a 0 rate" timestamp="2022-02-04T17:20:42" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when an aggregator is added to the exchangeRates" timestamp="2022-02-04T17:20:42" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when exchanging into that synth" timestamp="2022-02-04T17:20:42" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.6870" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() edge case: when an aggregator has a 0 rate when an aggregator is added to the exchangeRates when exchanging into that synth getAmountsForExchange reverts due to invalid rate" time="0.0330" classname="getAmountsForExchange reverts due to invalid rate">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() edge case: when an aggregator has a 0 rate when an aggregator is added to the exchangeRates when exchanging into that synth then it causes a suspension from price deviation as the price is 9" time="0.0890" classname="then it causes a suspension from price deviation as the price is 9">
    </testcase>
  </testsuite>
  <testsuite name="when exchanging out of that synth" timestamp="2022-02-04T17:20:44" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.9480" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() edge case: when an aggregator has a 0 rate when an aggregator is added to the exchangeRates when exchanging out of that synth getAmountsForExchange reverts due to invalid rate" time="0.0210" classname="getAmountsForExchange reverts due to invalid rate">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) exchange() edge case: when an aggregator has a 0 rate when an aggregator is added to the exchangeRates when exchanging out of that synth then it causes a suspension from price deviation" time="0.0800" classname="then it causes a suspension from price deviation">
    </testcase>
  </testsuite>
  <testsuite name="it cannot use exchangeWithVirtual()" timestamp="2022-02-04T17:20:46" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.6820" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) it cannot use exchangeWithVirtual() errors with not implemented when attempted to exchange" time="0.0330" classname="errors with not implemented when attempted to exchange">
    </testcase>
  </testsuite>
  <testsuite name="it cannot exchange atomically" timestamp="2022-02-04T17:20:46" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.7020" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) it cannot exchange atomically errors with not implemented when attempted to exchange" time="0.0310" classname="errors with not implemented when attempted to exchange">
    </testcase>
  </testsuite>
  <testsuite name="priceSpikeDeviation" timestamp="2022-02-04T17:20:47" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="resetLastExchangeRate() SIP-139" timestamp="2022-02-04T17:20:47" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.3570" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation resetLastExchangeRate() SIP-139 cannot be invoked by any user" time="0.8100" classname="cannot be invoked by any user">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation resetLastExchangeRate() SIP-139 when invoked without valid exchange rates, it reverts" time="0.0860" classname="when invoked without valid exchange rates, it reverts">
    </testcase>
  </testsuite>
  <testsuite name="when the price of sETH is 100" timestamp="2022-02-04T17:20:49" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when price spike deviation is set to a factor of 2" timestamp="2022-02-04T17:20:49" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="lastExchangeRate is persisted during exchanges" timestamp="2022-02-04T17:20:49" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges initially has no entries" time="0.0260" classname="initially has no entries">
    </testcase>
  </testsuite>
  <testsuite name="when a user exchanges into sETH from sUSD" timestamp="2022-02-04T17:20:50" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.0970" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges into sETH from sUSD then the source side has a rate persisted" time="0.0310" classname="then the source side has a rate persisted">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges into sETH from sUSD and the dest side has a rate persisted" time="0.0290" classname="and the dest side has a rate persisted">
    </testcase>
  </testsuite>
  <testsuite name="when a user exchanges from sETH into another synth" timestamp="2022-02-04T17:20:52" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges from sETH into another synth then the source side has a rate persisted" time="0.0390" classname="then the source side has a rate persisted">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges from sETH into another synth and the dest side has a rate persisted" time="0.0360" classname="and the dest side has a rate persisted">
    </testcase>
  </testsuite>
  <testsuite name="when the price of sETH changes slightly" timestamp="2022-02-04T17:20:54" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and another user exchanges sETH to sUSD" timestamp="2022-02-04T17:20:54" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="3.8020" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges from sETH into another synth when the price of sETH changes slightly and another user exchanges sETH to sUSD then the source side has a new rate persisted" time="0.0290" classname="then the source side has a new rate persisted">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges from sETH into another synth when the price of sETH changes slightly and another user exchanges sETH to sUSD and the dest side has a rate persisted" time="0.0340" classname="and the dest side has a rate persisted">
    </testcase>
  </testsuite>
  <testsuite name="when the price of sETH is over a deviation" timestamp="2022-02-04T17:20:58" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and another user exchanges sETH to sEUR" timestamp="2022-02-04T17:20:58" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.5590" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges from sETH into another synth when the price of sETH is over a deviation and another user exchanges sETH to sEUR then the source side has not persisted the rate" time="0.0050" classname="then the source side has not persisted the rate">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges from sETH into another synth when the price of sETH is over a deviation and another user exchanges sETH to sEUR then the dest side has not persisted the rate" time="0.0050" classname="then the dest side has not persisted the rate">
    </testcase>
  </testsuite>
  <testsuite name="when the price of sEUR is over a deviation" timestamp="2022-02-04T17:21:01" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and another user exchanges sEUR to sETH" timestamp="2022-02-04T17:21:01" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges from sETH into another synth when the price of sEUR is over a deviation and another user exchanges sEUR to sETH then the source side has persisted the rate" time="0.0100" classname="then the source side has persisted the rate">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges from sETH into another synth when the price of sEUR is over a deviation and another user exchanges sEUR to sETH and the dest side has not persisted the rate" time="0.0080" classname="and the dest side has not persisted the rate">
    </testcase>
  </testsuite>
  <testsuite name="when the owner invokes resetLastExchangeRate([sEUR, sETH])" timestamp="2022-02-04T17:21:03" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.4850" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges from sETH into another synth when the price of sEUR is over a deviation and another user exchanges sEUR to sETH when the owner invokes resetLastExchangeRate([sEUR, sETH]) then the sEUR last exchange rate is updated to the current price" time="0.0050" classname="then the sEUR last exchange rate is updated to the current price">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 lastExchangeRate is persisted during exchanges when a user exchanges from sETH into another synth when the price of sEUR is over a deviation and another user exchanges sEUR to sETH when the owner invokes resetLastExchangeRate([sEUR, sETH]) and the sETH rate has not changed" time="0.0080" classname="and the sETH rate has not changed">
    </testcase>
  </testsuite>
  <testsuite name="the isSynthRateInvalid() view correctly returns status" timestamp="2022-02-04T17:21:06" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 the isSynthRateInvalid() view correctly returns status when called with a synth with only a single rate, returns false" time="0.0450" classname="when called with a synth with only a single rate, returns false">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 the isSynthRateInvalid() view correctly returns status when called with a synth with no rate (i.e. 0), returns true" time="0.0070" classname="when called with a synth with no rate (i.e. 0), returns true">
    </testcase>
  </testsuite>
  <testsuite name="when a synth rate changes outside of the range" timestamp="2022-02-04T17:21:07" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 the isSynthRateInvalid() view correctly returns status when a synth rate changes outside of the range when called with that synth, returns true" time="0.0630" classname="when called with that synth, returns true">
    </testcase>
  </testsuite>
  <testsuite name="when the synth rate changes back into the range" timestamp="2022-02-04T17:21:08" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.8780" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 the isSynthRateInvalid() view correctly returns status when a synth rate changes outside of the range when the synth rate changes back into the range then when called with the target, still returns true" time="0.0600" classname="then when called with the target, still returns true">
    </testcase>
  </testsuite>
  <testsuite name="when there is a last rate into sETH via an exchange" timestamp="2022-02-04T17:21:09" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a synth rate changes outside of the range and then returns to the range" timestamp="2022-02-04T17:21:09" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.1110" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 the isSynthRateInvalid() view correctly returns status when there is a last rate into sETH via an exchange when a synth rate changes outside of the range and then returns to the range then when called with the target, returns false" time="0.0270" classname="then when called with the target, returns false">
    </testcase>
  </testsuite>
  <testsuite name="when there is a last price out of sETH via an exchange" timestamp="2022-02-04T17:21:10" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a synth price changes outside of the range and then returns to the range" timestamp="2022-02-04T17:21:10" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.0830" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 the isSynthRateInvalid() view correctly returns status when there is a last price out of sETH via an exchange when a synth price changes outside of the range and then returns to the range then when called with the target, returns false" time="0.0270" classname="then when called with the target, returns false">
    </testcase>
  </testsuite>
  <testsuite name="suspension is triggered via exchanging" timestamp="2022-02-04T17:21:11" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="given the user has some sETH" timestamp="2022-02-04T17:21:11" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with no prior exchange history" timestamp="2022-02-04T17:21:11" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="on the dest side" timestamp="2022-02-04T17:21:11" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="upwards movement" timestamp="2022-02-04T17:21:11" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 199 (factor: 1.99)" timestamp="2022-02-04T17:21:11" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:21:11" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.5150" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges then neither synth is suspended" time="0.0440" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 200 (factor: 2)" timestamp="2022-02-04T17:21:14" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:21:14" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.9050" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges then the synth is suspended" time="0.0050" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 300 (factor: 3)" timestamp="2022-02-04T17:21:16" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:21:16" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.9270" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges then the synth is suspended" time="0.0210" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="downwards movement" timestamp="2022-02-04T17:21:17" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50.25 (factor: -1.99)" timestamp="2022-02-04T17:21:17" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:21:17" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.2890" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges then neither synth is suspended" time="0.0200" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50 (factor: -2)" timestamp="2022-02-04T17:21:20" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:21:20" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.7790" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges then the synth is suspended" time="0.0190" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 33.33 (factor: -3)" timestamp="2022-02-04T17:21:22" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:21:22" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.9330" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges then the synth is suspended" time="0.0240" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the dest side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="on the src side" timestamp="2022-02-04T17:21:23" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="upwards movement" timestamp="2022-02-04T17:21:23" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 199 (factor: 1.99)" timestamp="2022-02-04T17:21:23" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:21:23" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="3.3190" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges then neither synth is suspended" time="0.0300" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 200 (factor: 2)" timestamp="2022-02-04T17:21:27" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:21:27" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.5380" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges then the synth is suspended" time="0.0050" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 300 (factor: 3)" timestamp="2022-02-04T17:21:28" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:21:28" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.9020" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges then the synth is suspended" time="0.0050" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="downwards movement" timestamp="2022-02-04T17:21:30" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50.25 (factor: -1.99)" timestamp="2022-02-04T17:21:30" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:21:30" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.1810" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges then neither synth is suspended" time="0.0150" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50 (factor: -2)" timestamp="2022-02-04T17:21:32" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:21:32" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.8810" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges then the synth is suspended" time="0.0060" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 33.33 (factor: -3)" timestamp="2022-02-04T17:21:34" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:21:34" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.9580" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges then the synth is suspended" time="0.0060" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history on the src side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when a recent price rate is set way outside of the threshold" timestamp="2022-02-04T17:21:36" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and then put back to normal" timestamp="2022-02-04T17:21:36" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 100 (factor: 1)" timestamp="2022-02-04T17:21:36" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:21:36" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.0770" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history when a recent price rate is set way outside of the threshold and then put back to normal when the rate of sETH                             is 100 (factor: 1) when a user exchanges then the synth is suspended" time="0.0060" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with no prior exchange history when a recent price rate is set way outside of the threshold and then put back to normal when the rate of sETH                             is 100 (factor: 1) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="with a prior exchange from another user into the source" timestamp="2022-02-04T17:21:38" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="on the dest side" timestamp="2022-02-04T17:21:38" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="upwards movement" timestamp="2022-02-04T17:21:38" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 199 (factor: 1.99)" timestamp="2022-02-04T17:21:38" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:21:38" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.7640" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges then neither synth is suspended" time="0.0550" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 200 (factor: 2)" timestamp="2022-02-04T17:21:41" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:21:41" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.2830" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges then the synth is suspended" time="0.0070" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 300 (factor: 3)" timestamp="2022-02-04T17:21:43" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:21:43" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.4340" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges then the synth is suspended" time="0.0160" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="downwards movement" timestamp="2022-02-04T17:21:46" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50.25 (factor: -1.99)" timestamp="2022-02-04T17:21:46" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:21:46" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.5280" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges then neither synth is suspended" time="0.0210" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50 (factor: -2)" timestamp="2022-02-04T17:21:48" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:21:48" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.2290" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges then the synth is suspended" time="0.0230" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 33.33 (factor: -3)" timestamp="2022-02-04T17:21:51" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:21:51" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="5.0410" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges then the synth is suspended" time="0.0220" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the dest side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="on the src side" timestamp="2022-02-04T17:21:56" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="upwards movement" timestamp="2022-02-04T17:21:56" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 199 (factor: 1.99)" timestamp="2022-02-04T17:21:56" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:21:56" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.8330" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges then neither synth is suspended" time="0.0390" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 200 (factor: 2)" timestamp="2022-02-04T17:21:58" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:21:58" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.2090" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges then the synth is suspended" time="0.0090" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 300 (factor: 3)" timestamp="2022-02-04T17:22:01" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:22:01" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.2120" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges then the synth is suspended" time="0.0230" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="downwards movement" timestamp="2022-02-04T17:22:03" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50.25 (factor: -1.99)" timestamp="2022-02-04T17:22:03" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:22:03" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.6460" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges then neither synth is suspended" time="0.0640" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50 (factor: -2)" timestamp="2022-02-04T17:22:05" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:22:05" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.1720" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges then the synth is suspended" time="0.0130" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 33.33 (factor: -3)" timestamp="2022-02-04T17:22:08" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:22:08" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.1480" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges then the synth is suspended" time="0.0140" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user into the source on the src side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="with a prior exchange from another user out of the source" timestamp="2022-02-04T17:22:10" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="on the dest side" timestamp="2022-02-04T17:22:10" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="upwards movement" timestamp="2022-02-04T17:22:10" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 199 (factor: 1.99)" timestamp="2022-02-04T17:22:10" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:22:10" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.7670" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges then neither synth is suspended" time="0.0240" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 200 (factor: 2)" timestamp="2022-02-04T17:22:13" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:22:13" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.2810" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges then the synth is suspended" time="0.0150" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 300 (factor: 3)" timestamp="2022-02-04T17:22:15" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:22:15" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.2790" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges then the synth is suspended" time="0.0280" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="downwards movement" timestamp="2022-02-04T17:22:17" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50.25 (factor: -1.99)" timestamp="2022-02-04T17:22:17" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:22:17" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.5980" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges then neither synth is suspended" time="0.0370" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50 (factor: -2)" timestamp="2022-02-04T17:22:20" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:22:20" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="3.2510" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges then the synth is suspended" time="0.0060" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 33.33 (factor: -3)" timestamp="2022-02-04T17:22:23" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:22:23" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.1710" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges then the synth is suspended" time="0.0070" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the dest side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="on the src side" timestamp="2022-02-04T17:22:25" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="upwards movement" timestamp="2022-02-04T17:22:25" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 199 (factor: 1.99)" timestamp="2022-02-04T17:22:25" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:22:25" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="3.1400" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges then neither synth is suspended" time="0.0330" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side upwards movement when the rate of sETH                             is 199 (factor: 1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 200 (factor: 2)" timestamp="2022-02-04T17:22:28" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:22:28" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.6170" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges then the synth is suspended" time="0.0110" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side upwards movement when the rate of sETH                             is 200 (factor: 2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 300 (factor: 3)" timestamp="2022-02-04T17:22:31" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:22:31" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.4470" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges then the synth is suspended" time="0.0160" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side upwards movement when the rate of sETH                             is 300 (factor: 3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="downwards movement" timestamp="2022-02-04T17:22:33" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50.25 (factor: -1.99)" timestamp="2022-02-04T17:22:33" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:22:33" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.8720" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges then neither synth is suspended" time="0.0460" classname="then neither synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side downwards movement when the rate of sETH                             is 50.25 (factor: -1.99) when a user exchanges and an exchange took place" time="0.0000" classname="and an exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 50 (factor: -2)" timestamp="2022-02-04T17:22:36" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:22:36" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.4600" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges then the synth is suspended" time="0.0180" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side downwards movement when the rate of sETH                             is 50 (factor: -2) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="when the rate of sETH                             is 33.33 (factor: -3)" timestamp="2022-02-04T17:22:39" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges" timestamp="2022-02-04T17:22:39" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.4770" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges then the synth is suspended" time="0.0310" classname="then the synth is suspended">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension is triggered via exchanging given the user has some sETH with a prior exchange from another user out of the source on the src side downwards movement when the rate of sETH                             is 33.33 (factor: -3) when a user exchanges and no exchange took place" time="0.0000" classname="and no exchange took place">
    </testcase>
  </testsuite>
  <testsuite name="suspension invoked by anyone via suspendSynthWithInvalidRate()" timestamp="2022-02-04T17:22:41" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension invoked by anyone via suspendSynthWithInvalidRate() when called with invalid synth, then reverts" time="0.0270" classname="when called with invalid synth, then reverts">
    </testcase>
  </testsuite>
  <testsuite name="when called with a synth with no price" timestamp="2022-02-04T17:22:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.8460" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension invoked by anyone via suspendSynthWithInvalidRate() when called with a synth with no price then suspension works as expected" time="0.0190" classname="then suspension works as expected">
    </testcase>
  </testsuite>
  <testsuite name="when the system is suspended" timestamp="2022-02-04T17:22:43" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension invoked by anyone via suspendSynthWithInvalidRate() when the system is suspended then suspended a synth fails" time="0.0580" classname="then suspended a synth fails">
    </testcase>
  </testsuite>
  <testsuite name="when system is resumed" timestamp="2022-02-04T17:22:44" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.8880" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 suspension invoked by anyone via suspendSynthWithInvalidRate() when the system is suspended when system is resumed then suspension works as expected" time="0.0460" classname="then suspension works as expected">
    </testcase>
  </testsuite>
  <testsuite name="settlement ignores deviations" timestamp="2022-02-04T17:22:45" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchange 100 sUSD into sETH" timestamp="2022-02-04T17:22:45" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the sETH rate moves up by a factor of 2 to 200" timestamp="2022-02-04T17:22:45" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="2.6070" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations when a user exchange 100 sUSD into sETH and the sETH rate moves up by a factor of 2 to 200 then settlementOwing is 0 for rebate and reclaim, with 1 entry" time="0.0810" classname="then settlementOwing is 0 for rebate and reclaim, with 1 entry">
    </testcase>
  </testsuite>
  <testsuite name="multiple entries to settle" timestamp="2022-02-04T17:22:47" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the sETH rate moves down by 20%" timestamp="2022-02-04T17:22:47" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the waiting period expires" timestamp="2022-02-04T17:22:47" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations when a user exchange 100 sUSD into sETH multiple entries to settle when the sETH rate moves down by 20% and the waiting period expires then settlementOwing is existing rebate with 0 reclaim, with 1 entries" time="0.0610" classname="then settlementOwing is existing rebate with 0 reclaim, with 1 entries">
    </testcase>
  </testsuite>
  <testsuite name="and the user makes another exchange into sETH" timestamp="2022-02-04T17:22:49" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the sETH rate moves up by a factor of 2 to 200, causing the second entry to be skipped" timestamp="2022-02-04T17:22:49" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.5570" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations when a user exchange 100 sUSD into sETH multiple entries to settle when the sETH rate moves down by 20% and the waiting period expires and the user makes another exchange into sETH and the sETH rate moves up by a factor of 2 to 200, causing the second entry to be skipped then settlementOwing is existing rebate with 0 reclaim, with 2 entries" time="0.0850" classname="then settlementOwing is existing rebate with 0 reclaim, with 2 entries">
    </testcase>
  </testsuite>
  <testsuite name="and the sETH rate goes back up 25% (from 80 to 100)" timestamp="2022-02-04T17:22:50" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the waiting period expires" timestamp="2022-02-04T17:22:50" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations when a user exchange 100 sUSD into sETH multiple entries to settle when the sETH rate moves down by 20% and the waiting period expires and the user makes another exchange into sETH and the sETH rate goes back up 25% (from 80 to 100) and the waiting period expires then settlementOwing is existing rebate, existing reclaim, and 2 entries" time="0.1050" classname="then settlementOwing is existing rebate, existing reclaim, and 2 entries">
    </testcase>
  </testsuite>
  <testsuite name="and the user makes another exchange into sETH" timestamp="2022-02-04T17:22:53" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the sETH rate moves down by a factor of 2 to 50, causing the third entry to be skipped" timestamp="2022-02-04T17:22:53" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.7060" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations when a user exchange 100 sUSD into sETH multiple entries to settle when the sETH rate moves down by 20% and the waiting period expires and the user makes another exchange into sETH and the sETH rate goes back up 25% (from 80 to 100) and the waiting period expires and the user makes another exchange into sETH and the sETH rate moves down by a factor of 2 to 50, causing the third entry to be skipped then settlementOwing is existing rebate and reclaim, with 3 entries" time="0.1170" classname="then settlementOwing is existing rebate and reclaim, with 3 entries">
    </testcase>
  </testsuite>
  <testsuite name="edge case: aggregator returns 0 for settlement price" timestamp="2022-02-04T17:22:55" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when an aggregator is added to the exchangeRates" timestamp="2022-02-04T17:22:55" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the aggregator has a rate (so the exchange succeeds)" timestamp="2022-02-04T17:22:55" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user exchanges out of the aggregated rate into sUSD" timestamp="2022-02-04T17:22:55" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the aggregated rate becomes 0" timestamp="2022-02-04T17:22:55" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations edge case: aggregator returns 0 for settlement price when an aggregator is added to the exchangeRates and the aggregator has a rate (so the exchange succeeds) when a user exchanges out of the aggregated rate into sUSD and the aggregated rate becomes 0 then settlementOwing is 0 for rebate and reclaim, with 1 entry" time="0.0320" classname="then settlementOwing is 0 for rebate and reclaim, with 1 entry">
    </testcase>
  </testsuite>
  <testsuite name="and the waiting period expires" timestamp="2022-02-04T17:22:56" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.0570" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations edge case: aggregator returns 0 for settlement price when an aggregator is added to the exchangeRates and the aggregator has a rate (so the exchange succeeds) when a user exchanges out of the aggregated rate into sUSD and the aggregated rate becomes 0 and the waiting period expires then the user can settle with no impact" time="0.0640" classname="then the user can settle with no impact">
    </testcase>
  </testsuite>
  <testsuite name="and the aggregated rate is received but for a much higher roundId, leaving a large gap in roundIds" timestamp="2022-02-04T17:22:57" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations edge case: aggregator returns 0 for settlement price when an aggregator is added to the exchangeRates and the aggregator has a rate (so the exchange succeeds) when a user exchanges out of the aggregated rate into sUSD and the aggregated rate is received but for a much higher roundId, leaving a large gap in roundIds then settlementOwing is 0 for rebate and reclaim, with 1 entry" time="0.0400" classname="then settlementOwing is 0 for rebate and reclaim, with 1 entry">
    </testcase>
  </testsuite>
  <testsuite name="and the waiting period expires" timestamp="2022-02-04T17:22:58" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.2800" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations edge case: aggregator returns 0 for settlement price when an aggregator is added to the exchangeRates and the aggregator has a rate (so the exchange succeeds) when a user exchanges out of the aggregated rate into sUSD and the aggregated rate is received but for a much higher roundId, leaving a large gap in roundIds and the waiting period expires then the user can settle with no impact" time="0.0610" classname="then the user can settle with no impact">
    </testcase>
  </testsuite>
  <testsuite name="when a user exchanges into the aggregated rate from sUSD" timestamp="2022-02-04T17:22:59" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the aggregated rate becomes 0" timestamp="2022-02-04T17:22:59" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations edge case: aggregator returns 0 for settlement price when an aggregator is added to the exchangeRates and the aggregator has a rate (so the exchange succeeds) when a user exchanges into the aggregated rate from sUSD and the aggregated rate becomes 0 then settlementOwing is 0 for rebate and reclaim, with 1 entry" time="0.0650" classname="then settlementOwing is 0 for rebate and reclaim, with 1 entry">
    </testcase>
  </testsuite>
  <testsuite name="and the waiting period expires" timestamp="2022-02-04T17:23:00" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.1810" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations edge case: aggregator returns 0 for settlement price when an aggregator is added to the exchangeRates and the aggregator has a rate (so the exchange succeeds) when a user exchanges into the aggregated rate from sUSD and the aggregated rate becomes 0 and the waiting period expires then the user can settle with no impact" time="0.0770" classname="then the user can settle with no impact">
    </testcase>
  </testsuite>
  <testsuite name="and the aggregated rate is received but for a much higher roundId, leaving a large gap in roundIds" timestamp="2022-02-04T17:23:02" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations edge case: aggregator returns 0 for settlement price when an aggregator is added to the exchangeRates and the aggregator has a rate (so the exchange succeeds) when a user exchanges into the aggregated rate from sUSD and the aggregated rate is received but for a much higher roundId, leaving a large gap in roundIds then settlementOwing is 0 for rebate and reclaim, with 1 entry" time="0.0400" classname="then settlementOwing is 0 for rebate and reclaim, with 1 entry">
    </testcase>
  </testsuite>
  <testsuite name="and the waiting period expires" timestamp="2022-02-04T17:23:03" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.1420" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) priceSpikeDeviation when the price of sETH is 100 when price spike deviation is set to a factor of 2 settlement ignores deviations edge case: aggregator returns 0 for settlement price when an aggregator is added to the exchangeRates and the aggregator has a rate (so the exchange succeeds) when a user exchanges into the aggregated rate from sUSD and the aggregated rate is received but for a much higher roundId, leaving a large gap in roundIds and the waiting period expires then the user can settle with no impact" time="0.0680" classname="then the user can settle with no impact">
    </testcase>
  </testsuite>
  <testsuite name="Given synth exchange fee rates to set" timestamp="2022-02-04T17:23:04" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Given synth exchange fee rates to update" timestamp="2022-02-04T17:23:04" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Exchanger.spec.js" time="1.6280" failures="0">
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) Given synth exchange fee rates to set Given synth exchange fee rates to update when 1 exchange rate to update then overwrite existing rate" time="0.0290" classname="when 1 exchange rate to update then overwrite existing rate">
    </testcase>
    <testcase name="Contract: Exchanger (spec tests) With L2 configuration (MintableSynthetix, Exchanger, ExchangeRates) Given synth exchange fee rates to set Given synth exchange fee rates to update when multiple exchange rates then store them to be readable" time="0.1270" classname="when multiple exchange rates then store them to be readable">
    </testcase>
  </testsuite>
  <testsuite name="Contract: Exchange Rates" timestamp="2022-02-04T17:23:05" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Using ExchangeRates" timestamp="2022-02-04T17:23:05" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates only expected functions should be mutative" time="0.0510" classname="only expected functions should be mutative">
    </testcase>
  </testsuite>
  <testsuite name="constructor" timestamp="2022-02-04T17:23:07" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0430" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates constructor should set constructor params on deployment" time="0.0030" classname="should set constructor params on deployment">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates constructor returns correct values for sUSD after deployment " time="0.0180" classname="returns correct values for sUSD after deployment ">
    </testcase>
  </testsuite>
  <testsuite name="rateStalePeriod" timestamp="2022-02-04T17:23:07" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates rateStalePeriod rateStalePeriod default is set correctly" time="0.0050" classname="rateStalePeriod default is set correctly">
    </testcase>
  </testsuite>
  <testsuite name="when rate stale is changed in the system settings" timestamp="2022-02-04T17:23:07" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0480" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates rateStalePeriod when rate stale is changed in the system settings then rateStalePeriod is correctly updated" time="0.0060" classname="then rateStalePeriod is correctly updated">
    </testcase>
  </testsuite>
  <testsuite name="rateIsStale()" timestamp="2022-02-04T17:23:07" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1670" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates rateIsStale() should never allow sUSD to go stale via rateIsStale" time="0.0150" classname="should never allow sUSD to go stale via rateIsStale">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates rateIsStale() ensure stale if not set" time="0.0710" classname="ensure stale if not set">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates rateIsStale() make sure anyone can check if rate is stale" time="0.0520" classname="make sure anyone can check if rate is stale">
    </testcase>
  </testsuite>
  <testsuite name="anyRateIsInvalid()" timestamp="2022-02-04T17:23:07" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="stale scenarios" timestamp="2022-02-04T17:23:07" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="2.8230" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates anyRateIsInvalid() stale scenarios anyRateIsInvalid conforms to rateStalePeriod" time="0.2520" classname="anyRateIsInvalid conforms to rateStalePeriod">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates anyRateIsInvalid() stale scenarios should be able to confirm no rates are stale from a subset" time="1.0240" classname="should be able to confirm no rates are stale from a subset">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates anyRateIsInvalid() stale scenarios should be able to confirm a single rate is stale from a set of rates" time="0.7030" classname="should be able to confirm a single rate is stale from a set of rates">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates anyRateIsInvalid() stale scenarios should be able to confirm a single rate (from a set of 1) is stale" time="0.1040" classname="should be able to confirm a single rate (from a set of 1) is stale">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates anyRateIsInvalid() stale scenarios make sure anyone can check if any rates are stale" time="0.0950" classname="make sure anyone can check if any rates are stale">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates anyRateIsInvalid() stale scenarios ensure rates are considered stale if not set" time="0.5100" classname="ensure rates are considered stale if not set">
    </testcase>
  </testsuite>
  <testsuite name="flagged scenarios" timestamp="2022-02-04T17:23:10" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when sJPY aggregator is added" timestamp="2022-02-04T17:23:10" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when aggregated synth has rates" timestamp="2022-02-04T17:23:10" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates anyRateIsInvalid() flagged scenarios when sJPY aggregator is added when aggregated synth has rates then rateIsInvalid is false" time="0.0340" classname="then rateIsInvalid is false">
    </testcase>
  </testsuite>
  <testsuite name="when the flags interface is set" timestamp="2022-02-04T17:23:10" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates anyRateIsInvalid() flagged scenarios when sJPY aggregator is added when aggregated synth has rates when the flags interface is set then rateIsInvalid is still false" time="0.0250" classname="then rateIsInvalid is still false">
    </testcase>
  </testsuite>
  <testsuite name="when the sJPY aggregator is flagged" timestamp="2022-02-04T17:23:10" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1060" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates anyRateIsInvalid() flagged scenarios when sJPY aggregator is added when aggregated synth has rates when the flags interface is set when the sJPY aggregator is flagged then rateIsInvalid is true" time="0.0140" classname="then rateIsInvalid is true">
    </testcase>
  </testsuite>
  <testsuite name="lastRateUpdateTimesForCurrencies()" timestamp="2022-02-04T17:23:10" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.7130" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates lastRateUpdateTimesForCurrencies() should return correct last rate update times for specific currencies" time="0.3210" classname="should return correct last rate update times for specific currencies">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates lastRateUpdateTimesForCurrencies() should return correct last rate update time for a specific currency" time="0.3430" classname="should return correct last rate update time for a specific currency">
    </testcase>
  </testsuite>
  <testsuite name="effectiveValue() and effectiveValueAndRates()" timestamp="2022-02-04T17:23:11" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a price is sent to the oracle" timestamp="2022-02-04T17:23:11" tests="7" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="3.3700" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates effectiveValue() and effectiveValueAndRates() when a price is sent to the oracle should correctly calculate an exchange rate in effectiveValue()" time="0.0440" classname="should correctly calculate an exchange rate in effectiveValue()">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates effectiveValue() and effectiveValueAndRates() when a price is sent to the oracle should calculate updated rates in effectiveValue()" time="0.1300" classname="should calculate updated rates in effectiveValue()">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates effectiveValue() and effectiveValueAndRates() when a price is sent to the oracle should return 0 when relying on a non-existant dest exchange rate in effectiveValue()" time="0.0180" classname="should return 0 when relying on a non-existant dest exchange rate in effectiveValue()">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates effectiveValue() and effectiveValueAndRates() when a price is sent to the oracle should revert when relying on a non-existing src rate in effectiveValue" time="0.0200" classname="should revert when relying on a non-existing src rate in effectiveValue">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates effectiveValue() and effectiveValueAndRates() when a price is sent to the oracle effectiveValueAndRates() should return rates as well with sUSD on one side" time="0.0190" classname="effectiveValueAndRates() should return rates as well with sUSD on one side">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates effectiveValue() and effectiveValueAndRates() when a price is sent to the oracle effectiveValueAndRates() should return rates as well with sUSD on the other side" time="0.0160" classname="effectiveValueAndRates() should return rates as well with sUSD on the other side">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates effectiveValue() and effectiveValueAndRates() when a price is sent to the oracle effectiveValueAndRates() should return rates as well with two live rates" time="0.0190" classname="effectiveValueAndRates() should return rates as well with two live rates">
    </testcase>
  </testsuite>
  <testsuite name="when the flags interface is set" timestamp="2022-02-04T17:23:15" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="aggregatorWarningFlags" timestamp="2022-02-04T17:23:15" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0330" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set aggregatorWarningFlags is set correctly" time="0.0060" classname="is set correctly">
    </testcase>
  </testsuite>
  <testsuite name="pricing aggregators" timestamp="2022-02-04T17:23:15" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators only an owner can add an aggregator" time="0.6690" classname="only an owner can add an aggregator">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators currenciesUsingAggregator for a rate returns an empty" time="0.0440" classname="currenciesUsingAggregator for a rate returns an empty">
    </testcase>
  </testsuite>
  <testsuite name="When an aggregator with more than 18 decimals is added" timestamp="2022-02-04T17:23:15" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0710" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators When an aggregator with more than 18 decimals is added an aggregator should return a value with 18 decimals or less" time="0.0440" classname="an aggregator should return a value with 18 decimals or less">
    </testcase>
  </testsuite>
  <testsuite name="when a user queries the first entry in aggregatorKeys" timestamp="2022-02-04T17:23:15" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0360" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when a user queries the first entry in aggregatorKeys then it is empty" time="0.0070" classname="then it is empty">
    </testcase>
  </testsuite>
  <testsuite name="when the owner attempts to add an invalid address for sJPY " timestamp="2022-02-04T17:23:15" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0980" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner attempts to add an invalid address for sJPY  then zero address is invalid" time="0.0210" classname="then zero address is invalid">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner attempts to add an invalid address for sJPY  and a non-aggregator address is invalid" time="0.0200" classname="and a non-aggregator address is invalid">
    </testcase>
  </testsuite>
  <testsuite name="when the owner adds sJPY added as an aggregator" timestamp="2022-02-04T17:23:16" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator then the list of aggregatorKeys lists it" time="0.0570" classname="then the list of aggregatorKeys lists it">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator and the AggregatorAdded event is emitted" time="0.0000" classname="and the AggregatorAdded event is emitted">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator only an owner can remove an aggregator" time="0.4750" classname="only an owner can remove an aggregator">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator and currenciesUsingAggregator for that aggregator returns sJPY" time="0.0060" classname="and currenciesUsingAggregator for that aggregator returns sJPY">
    </testcase>
  </testsuite>
  <testsuite name="when the owner adds the same aggregator to two other rates" timestamp="2022-02-04T17:23:16" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0880" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds the same aggregator to two other rates and currenciesUsingAggregator for that aggregator returns sJPY" time="0.0080" classname="and currenciesUsingAggregator for that aggregator returns sJPY">
    </testcase>
  </testsuite>
  <testsuite name="when the owner tries to remove an invalid aggregator" timestamp="2022-02-04T17:23:17" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0530" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner tries to remove an invalid aggregator then it reverts" time="0.0130" classname="then it reverts">
    </testcase>
  </testsuite>
  <testsuite name="when the owner adds sXTZ as an aggregator" timestamp="2022-02-04T17:23:17" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator then the list of aggregatorKeys lists it also" time="0.0340" classname="then the list of aggregatorKeys lists it also">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator and the AggregatorAdded event is emitted" time="0.0000" classname="and the AggregatorAdded event is emitted">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator and currenciesUsingAggregator for that aggregator returns sXTZ" time="0.0050" classname="and currenciesUsingAggregator for that aggregator returns sXTZ">
    </testcase>
  </testsuite>
  <testsuite name="when the ratesAndInvalidForCurrencies is queried" timestamp="2022-02-04T17:23:17" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.2310" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the ratesAndInvalidForCurrencies is queried then the rates are invalid" time="0.0020" classname="then the rates are invalid">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the ratesAndInvalidForCurrencies is queried and both are zero" time="0.0010" classname="and both are zero">
    </testcase>
  </testsuite>
  <testsuite name="when rateAndInvalid is queried" timestamp="2022-02-04T17:23:17" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.2070" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when rateAndInvalid is queried then the rates are invalid" time="0.0000" classname="then the rates are invalid">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when rateAndInvalid is queried and both are zero" time="0.0000" classname="and both are zero">
    </testcase>
  </testsuite>
  <testsuite name="when the aggregator price is set for sJPY" timestamp="2022-02-04T17:23:17" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the ratesAndInvalidForCurrencies is queried" timestamp="2022-02-04T17:23:17" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.2950" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the ratesAndInvalidForCurrencies is queried then the rates are still invalid" time="0.0000" classname="then the rates are still invalid">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the ratesAndInvalidForCurrencies is queried yet one price is populated" time="0.0000" classname="yet one price is populated">
    </testcase>
  </testsuite>
  <testsuite name="when rateAndInvalid is queried" timestamp="2022-02-04T17:23:18" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.4530" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when rateAndInvalid is queried then one rate is invalid" time="0.0000" classname="then one rate is invalid">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when rateAndInvalid is queried and one rate is populated" time="0.0000" classname="and one rate is populated">
    </testcase>
  </testsuite>
  <testsuite name="when the aggregator price is set for sXTZ" timestamp="2022-02-04T17:23:18" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the ratesAndInvalidForCurrencies is queried" timestamp="2022-02-04T17:23:18" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.3230" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the aggregator price is set for sXTZ when the ratesAndInvalidForCurrencies is queried then the rates are no longer invalid" time="0.0000" classname="then the rates are no longer invalid">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the aggregator price is set for sXTZ when the ratesAndInvalidForCurrencies is queried and all prices are populated" time="0.0000" classname="and all prices are populated">
    </testcase>
  </testsuite>
  <testsuite name="when rateAndInvalid is queried" timestamp="2022-02-04T17:23:19" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.5320" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the aggregator price is set for sXTZ when rateAndInvalid is queried then both rates are valid" time="0.0000" classname="then both rates are valid">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the aggregator price is set for sXTZ when rateAndInvalid is queried and both rates are populated" time="0.0000" classname="and both rates are populated">
    </testcase>
  </testsuite>
  <testsuite name="when the flags return true for sJPY" timestamp="2022-02-04T17:23:19" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the ratesAndInvalidForCurrencies is queried" timestamp="2022-02-04T17:23:19" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.2010" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the aggregator price is set for sXTZ when the flags return true for sJPY when the ratesAndInvalidForCurrencies is queried then the rates are invalid" time="0.0000" classname="then the rates are invalid">
    </testcase>
  </testsuite>
  <testsuite name="when rateAndInvalid is queried" timestamp="2022-02-04T17:23:19" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1680" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the aggregator price is set for sXTZ when the flags return true for sJPY when rateAndInvalid is queried then the rates are invalid" time="0.0000" classname="then the rates are invalid">
    </testcase>
  </testsuite>
  <testsuite name="when the aggregator is removed for sJPY" timestamp="2022-02-04T17:23:19" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the aggregator price is set for sXTZ when the aggregator is removed for sJPY then the AggregatorRemoved event is emitted" time="0.0010" classname="then the AggregatorRemoved event is emitted">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the aggregator price is set for sXTZ when the aggregator is removed for sJPY when the ratesAndInvalidForCurrencies is queried it returns 0" time="0.0400" classname="when the ratesAndInvalidForCurrencies is queried it returns 0">
    </testcase>
  </testsuite>
  <testsuite name="when a user queries the aggregatorKeys" timestamp="2022-02-04T17:23:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.2590" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the aggregator price is set for sXTZ when the aggregator is removed for sJPY when a user queries the aggregatorKeys then only sXTZ is left" time="0.0100" classname="then only sXTZ is left">
    </testcase>
  </testsuite>
  <testsuite name="when rateAndInvalid is queried" timestamp="2022-02-04T17:23:20" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.3660" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the aggregator price is set for sXTZ when the aggregator is removed for sJPY when rateAndInvalid is queried then JPY returns true" time="0.0080" classname="then JPY returns true">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the aggregator price is set for sXTZ when the aggregator is removed for sJPY when rateAndInvalid is queried other rates are fine" time="0.0280" classname="other rates are fine">
    </testcase>
  </testsuite>
  <testsuite name="when the aggregator price is set to set a specific number (with support for 8 decimals)" timestamp="2022-02-04T17:23:20" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the price is fetched for sJPY" timestamp="2022-02-04T17:23:20" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1460" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the aggregator price is set to set a specific number (with support for 8 decimals) when the price is fetched for sJPY the specific number is returned with 18 decimals" time="0.0090" classname="the specific number is returned with 18 decimals">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the aggregator price is set to set a specific number (with support for 8 decimals) when the price is fetched for sJPY and the timestamp is the latest" time="0.0090" classname="and the timestamp is the latest">
    </testcase>
  </testsuite>
  <testsuite name="when the aggregator price is set to set a specific number, other than 8 decimals" timestamp="2022-02-04T17:23:21" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the price is fetched for fastGasPrice" timestamp="2022-02-04T17:23:21" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.3260" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the aggregator price is set to set a specific number, other than 8 decimals when the price is fetched for fastGasPrice the specific number is returned with 18 decimals" time="0.0200" classname="the specific number is returned with 18 decimals">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the aggregator price is set to set a specific number, other than 8 decimals when the price is fetched for fastGasPrice and the timestamp is the latest" time="0.0200" classname="and the timestamp is the latest">
    </testcase>
  </testsuite>
  <testsuite name="warning flags and invalid rates" timestamp="2022-02-04T17:23:21" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators warning flags and invalid rates sUSD is never flagged / invalid." time="0.0310" classname="sUSD is never flagged / invalid.">
    </testcase>
  </testsuite>
  <testsuite name="when JPY is aggregated" timestamp="2022-02-04T17:23:21" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators warning flags and invalid rates when JPY is aggregated then the rate shows as stale" time="0.0150" classname="then the rate shows as stale">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators warning flags and invalid rates when JPY is aggregated then the rate shows as invalid" time="0.0320" classname="then the rate shows as invalid">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators warning flags and invalid rates when JPY is aggregated but the rate is not flagged" time="0.0150" classname="but the rate is not flagged">
    </testcase>
  </testsuite>
  <testsuite name="when the rate is set for sJPY" timestamp="2022-02-04T17:23:21" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators warning flags and invalid rates when JPY is aggregated when the rate is set for sJPY then the rate shows as not stale" time="0.0170" classname="then the rate shows as not stale">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators warning flags and invalid rates when JPY is aggregated when the rate is set for sJPY then the rate shows as not invalid" time="0.0390" classname="then the rate shows as not invalid">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators warning flags and invalid rates when JPY is aggregated when the rate is set for sJPY but the rate is not flagged" time="0.0120" classname="but the rate is not flagged">
    </testcase>
  </testsuite>
  <testsuite name="when the rate is flagged for sJPY" timestamp="2022-02-04T17:23:22" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.4760" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators warning flags and invalid rates when JPY is aggregated when the rate is set for sJPY when the rate is flagged for sJPY then the rate shows as not stale" time="0.0130" classname="then the rate shows as not stale">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators warning flags and invalid rates when JPY is aggregated when the rate is set for sJPY when the rate is flagged for sJPY then the rate shows as invalid" time="0.0640" classname="then the rate shows as invalid">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates when the flags interface is set pricing aggregators warning flags and invalid rates when JPY is aggregated when the rate is set for sJPY when the rate is flagged for sJPY and the rate is not flagged" time="0.0080" classname="and the rate is not flagged">
    </testcase>
  </testsuite>
  <testsuite name="roundIds for historical rates" timestamp="2022-02-04T17:23:22" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates roundIds for historical rates getCurrentRoundId() returns 0 for unknown currencies" time="0.0090" classname="getCurrentRoundId() returns 0 for unknown currencies">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates roundIds for historical rates getCurrentRoundId() is 0 for currencies with no updates" time="0.1460" classname="getCurrentRoundId() is 0 for currencies with no updates">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates roundIds for historical rates getCurrentRoundId() is 0 for sUSD" time="0.0060" classname="getCurrentRoundId() is 0 for sUSD">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates roundIds for historical rates ratesAndUpdatedTimeForCurrencyLastNRounds() shows first entry for sUSD" time="0.0110" classname="ratesAndUpdatedTimeForCurrencyLastNRounds() shows first entry for sUSD">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates roundIds for historical rates ratesAndUpdatedTimeForCurrencyLastNRounds() returns 0s for other currencies without updates" time="0.0550" classname="ratesAndUpdatedTimeForCurrencyLastNRounds() returns 0s for other currencies without updates">
    </testcase>
  </testsuite>
  <testsuite name="given an aggregator exists for sJPY" timestamp="2022-02-04T17:23:22" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and it has been given three successive rates a second apart" timestamp="2022-02-04T17:23:22" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="getCurrentRoundId())" timestamp="2022-02-04T17:23:22" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when invoked for an aggregator" timestamp="2022-02-04T17:23:22" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1210" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates roundIds for historical rates given an aggregator exists for sJPY and it has been given three successive rates a second apart getCurrentRoundId()) when invoked for an aggregator getCurrentRound() returns the last entry" time="0.0060" classname="getCurrentRound() returns the last entry">
    </testcase>
  </testsuite>
  <testsuite name="rateAndTimestampAtRound()" timestamp="2022-02-04T17:23:22" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.2060" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates roundIds for historical rates given an aggregator exists for sJPY and it has been given three successive rates a second apart rateAndTimestampAtRound() when invoked for no price returns 0" time="0.0040" classname="when invoked for no price returns 0">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates roundIds for historical rates given an aggregator exists for sJPY and it has been given three successive rates a second apart rateAndTimestampAtRound() when invoked for an aggregator" time="0.0360" classname="when invoked for an aggregator">
    </testcase>
  </testsuite>
  <testsuite name="ratesAndUpdatedTimeForCurrencyLastNRounds()" timestamp="2022-02-04T17:23:23" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when invoked for a non-existant currency" timestamp="2022-02-04T17:23:23" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1360" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates roundIds for historical rates given an aggregator exists for sJPY and it has been given three successive rates a second apart ratesAndUpdatedTimeForCurrencyLastNRounds() when invoked for a non-existant currency then it returns zeros" time="0.0090" classname="then it returns zeros">
    </testcase>
  </testsuite>
  <testsuite name="when invoked for an aggregated price" timestamp="2022-02-04T17:23:23" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.3810" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates roundIds for historical rates given an aggregator exists for sJPY and it has been given three successive rates a second apart ratesAndUpdatedTimeForCurrencyLastNRounds() when invoked for an aggregated price then it returns the rates as expected" time="0.0290" classname="then it returns the rates as expected">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates roundIds for historical rates given an aggregator exists for sJPY and it has been given three successive rates a second apart ratesAndUpdatedTimeForCurrencyLastNRounds() when invoked for an aggregated price then it returns the rates as expected, even over the edge" time="0.0330" classname="then it returns the rates as expected, even over the edge">
    </testcase>
  </testsuite>
  <testsuite name="and the aggregator has been given three rates, 30seconds apart" timestamp="2022-02-04T17:23:23" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="getLastRoundIdBeforeElapsedSecs()" timestamp="2022-02-04T17:23:23" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when getLastRoundIdBeforeElapsedSecs() is invoked with the first round and a waiting time of less than 30s" timestamp="2022-02-04T17:23:23" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1110" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates roundIds for historical rates given an aggregator exists for sJPY and the aggregator has been given three rates, 30seconds apart getLastRoundIdBeforeElapsedSecs() when getLastRoundIdBeforeElapsedSecs() is invoked with the first round and a waiting time of less than 30s then it receives round 1 - no change " time="0.0120" classname="then it receives round 1 - no change ">
    </testcase>
  </testsuite>
  <testsuite name="when getLastRoundIdBeforeElapsedSecs() is invoked with the first round and a waiting time of 30s exactly" timestamp="2022-02-04T17:23:23" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1120" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates roundIds for historical rates given an aggregator exists for sJPY and the aggregator has been given three rates, 30seconds apart getLastRoundIdBeforeElapsedSecs() when getLastRoundIdBeforeElapsedSecs() is invoked with the first round and a waiting time of 30s exactly then it receives round 2 " time="0.0120" classname="then it receives round 2 ">
    </testcase>
  </testsuite>
  <testsuite name="when getLastRoundIdBeforeElapsedSecs() is invoked with the second round and a waiting time of 30s exactly" timestamp="2022-02-04T17:23:23" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1130" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates roundIds for historical rates given an aggregator exists for sJPY and the aggregator has been given three rates, 30seconds apart getLastRoundIdBeforeElapsedSecs() when getLastRoundIdBeforeElapsedSecs() is invoked with the second round and a waiting time of 30s exactly then it receives round 3" time="0.0150" classname="then it receives round 3">
    </testcase>
  </testsuite>
  <testsuite name="when getLastRoundIdBeforeElapsedSecs() is invoked with the first round and a waiting time between 30s to 60s" timestamp="2022-02-04T17:23:23" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0950" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates roundIds for historical rates given an aggregator exists for sJPY and the aggregator has been given three rates, 30seconds apart getLastRoundIdBeforeElapsedSecs() when getLastRoundIdBeforeElapsedSecs() is invoked with the first round and a waiting time between 30s to 60s then it receives round 2 " time="0.0170" classname="then it receives round 2 ">
    </testcase>
  </testsuite>
  <testsuite name="when getLastRoundIdBeforeElapsedSecs() is invoked with the first round and a waiting time of 60s exactly" timestamp="2022-02-04T17:23:24" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1380" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates roundIds for historical rates given an aggregator exists for sJPY and the aggregator has been given three rates, 30seconds apart getLastRoundIdBeforeElapsedSecs() when getLastRoundIdBeforeElapsedSecs() is invoked with the first round and a waiting time of 60s exactly then it receives round 3 " time="0.0200" classname="then it receives round 3 ">
    </testcase>
  </testsuite>
  <testsuite name="when getLastRoundIdBeforeElapsedSecs() is invoked with the first round and a waiting time beyond 60s" timestamp="2022-02-04T17:23:24" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.2060" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates roundIds for historical rates given an aggregator exists for sJPY and the aggregator has been given three rates, 30seconds apart getLastRoundIdBeforeElapsedSecs() when getLastRoundIdBeforeElapsedSecs() is invoked with the first round and a waiting time beyond 60s then it receives round 3 as well " time="0.0380" classname="then it receives round 3 as well ">
    </testcase>
  </testsuite>
  <testsuite name="when getLastRoundIdBeforeElapsedSecs() is invoked with the third round and a waiting time beyond 60s" timestamp="2022-02-04T17:23:24" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1010" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates roundIds for historical rates given an aggregator exists for sJPY and the aggregator has been given three rates, 30seconds apart getLastRoundIdBeforeElapsedSecs() when getLastRoundIdBeforeElapsedSecs() is invoked with the third round and a waiting time beyond 60s then it still receives round 3" time="0.0090" classname="then it still receives round 3">
    </testcase>
  </testsuite>
  <testsuite name="effectiveValueAndRatesAtRound()" timestamp="2022-02-04T17:23:24" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when both aggregated prices have been given three rates with current timestamps" timestamp="2022-02-04T17:23:24" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="1.2250" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates roundIds for historical rates given an aggregator exists for sJPY effectiveValueAndRatesAtRound() when both aggregated prices have been given three rates with current timestamps accepts various changes to src roundId" time="0.0630" classname="accepts various changes to src roundId">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates roundIds for historical rates given an aggregator exists for sJPY effectiveValueAndRatesAtRound() when both aggregated prices have been given three rates with current timestamps accepts various changes to dest roundId" time="0.0800" classname="accepts various changes to dest roundId">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRates roundIds for historical rates given an aggregator exists for sJPY effectiveValueAndRatesAtRound() when both aggregated prices have been given three rates with current timestamps and combinations therein" time="0.0590" classname="and combinations therein">
    </testcase>
  </testsuite>
  <testsuite name="Atomic exchange pricing" timestamp="2022-02-04T17:23:25" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0220" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates Atomic exchange pricing errors with not implemented when attempting to fetch atomic rate" time="0.0100" classname="errors with not implemented when attempting to fetch atomic rate">
    </testcase>
  </testsuite>
  <testsuite name="Atomic exchange volatility control" timestamp="2022-02-04T17:23:25" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0260" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRates Atomic exchange volatility control errors with not implemented when attempting to assess volatility for atomic exchanges" time="0.0120" classname="errors with not implemented when attempting to assess volatility for atomic exchanges">
    </testcase>
  </testsuite>
  <testsuite name="Using ExchangeRatesWithDexPricing" timestamp="2022-02-04T17:23:25" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing only expected functions should be mutative" time="0.0510" classname="only expected functions should be mutative">
    </testcase>
  </testsuite>
  <testsuite name="constructor" timestamp="2022-02-04T17:23:27" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0530" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing constructor should set constructor params on deployment" time="0.0070" classname="should set constructor params on deployment">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing constructor returns correct values for sUSD after deployment " time="0.0210" classname="returns correct values for sUSD after deployment ">
    </testcase>
  </testsuite>
  <testsuite name="rateStalePeriod" timestamp="2022-02-04T17:23:27" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing rateStalePeriod rateStalePeriod default is set correctly" time="0.0120" classname="rateStalePeriod default is set correctly">
    </testcase>
  </testsuite>
  <testsuite name="when rate stale is changed in the system settings" timestamp="2022-02-04T17:23:27" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0510" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing rateStalePeriod when rate stale is changed in the system settings then rateStalePeriod is correctly updated" time="0.0180" classname="then rateStalePeriod is correctly updated">
    </testcase>
  </testsuite>
  <testsuite name="rateIsStale()" timestamp="2022-02-04T17:23:27" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1460" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing rateIsStale() should never allow sUSD to go stale via rateIsStale" time="0.0260" classname="should never allow sUSD to go stale via rateIsStale">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing rateIsStale() ensure stale if not set" time="0.0280" classname="ensure stale if not set">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing rateIsStale() make sure anyone can check if rate is stale" time="0.0540" classname="make sure anyone can check if rate is stale">
    </testcase>
  </testsuite>
  <testsuite name="anyRateIsInvalid()" timestamp="2022-02-04T17:23:27" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="stale scenarios" timestamp="2022-02-04T17:23:27" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="3.2340" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing anyRateIsInvalid() stale scenarios anyRateIsInvalid conforms to rateStalePeriod" time="0.3340" classname="anyRateIsInvalid conforms to rateStalePeriod">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing anyRateIsInvalid() stale scenarios should be able to confirm no rates are stale from a subset" time="1.2740" classname="should be able to confirm no rates are stale from a subset">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing anyRateIsInvalid() stale scenarios should be able to confirm a single rate is stale from a set of rates" time="0.7620" classname="should be able to confirm a single rate is stale from a set of rates">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing anyRateIsInvalid() stale scenarios should be able to confirm a single rate (from a set of 1) is stale" time="0.1320" classname="should be able to confirm a single rate (from a set of 1) is stale">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing anyRateIsInvalid() stale scenarios make sure anyone can check if any rates are stale" time="0.1480" classname="make sure anyone can check if any rates are stale">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing anyRateIsInvalid() stale scenarios ensure rates are considered stale if not set" time="0.4500" classname="ensure rates are considered stale if not set">
    </testcase>
  </testsuite>
  <testsuite name="flagged scenarios" timestamp="2022-02-04T17:23:31" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when sJPY aggregator is added" timestamp="2022-02-04T17:23:31" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when aggregated synth has rates" timestamp="2022-02-04T17:23:31" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing anyRateIsInvalid() flagged scenarios when sJPY aggregator is added when aggregated synth has rates then rateIsInvalid is false" time="0.0250" classname="then rateIsInvalid is false">
    </testcase>
  </testsuite>
  <testsuite name="when the flags interface is set" timestamp="2022-02-04T17:23:31" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing anyRateIsInvalid() flagged scenarios when sJPY aggregator is added when aggregated synth has rates when the flags interface is set then rateIsInvalid is still false" time="0.0290" classname="then rateIsInvalid is still false">
    </testcase>
  </testsuite>
  <testsuite name="when the sJPY aggregator is flagged" timestamp="2022-02-04T17:23:31" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1220" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing anyRateIsInvalid() flagged scenarios when sJPY aggregator is added when aggregated synth has rates when the flags interface is set when the sJPY aggregator is flagged then rateIsInvalid is true" time="0.0190" classname="then rateIsInvalid is true">
    </testcase>
  </testsuite>
  <testsuite name="lastRateUpdateTimesForCurrencies()" timestamp="2022-02-04T17:23:31" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.6360" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing lastRateUpdateTimesForCurrencies() should return correct last rate update times for specific currencies" time="0.3140" classname="should return correct last rate update times for specific currencies">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing lastRateUpdateTimesForCurrencies() should return correct last rate update time for a specific currency" time="0.2870" classname="should return correct last rate update time for a specific currency">
    </testcase>
  </testsuite>
  <testsuite name="effectiveValue() and effectiveValueAndRates()" timestamp="2022-02-04T17:23:32" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a price is sent to the oracle" timestamp="2022-02-04T17:23:32" tests="7" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="2.1610" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveValue() and effectiveValueAndRates() when a price is sent to the oracle should correctly calculate an exchange rate in effectiveValue()" time="0.0500" classname="should correctly calculate an exchange rate in effectiveValue()">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveValue() and effectiveValueAndRates() when a price is sent to the oracle should calculate updated rates in effectiveValue()" time="0.1230" classname="should calculate updated rates in effectiveValue()">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveValue() and effectiveValueAndRates() when a price is sent to the oracle should return 0 when relying on a non-existant dest exchange rate in effectiveValue()" time="0.0160" classname="should return 0 when relying on a non-existant dest exchange rate in effectiveValue()">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveValue() and effectiveValueAndRates() when a price is sent to the oracle should revert when relying on a non-existing src rate in effectiveValue" time="0.0170" classname="should revert when relying on a non-existing src rate in effectiveValue">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveValue() and effectiveValueAndRates() when a price is sent to the oracle effectiveValueAndRates() should return rates as well with sUSD on one side" time="0.0180" classname="effectiveValueAndRates() should return rates as well with sUSD on one side">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveValue() and effectiveValueAndRates() when a price is sent to the oracle effectiveValueAndRates() should return rates as well with sUSD on the other side" time="0.0190" classname="effectiveValueAndRates() should return rates as well with sUSD on the other side">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveValue() and effectiveValueAndRates() when a price is sent to the oracle effectiveValueAndRates() should return rates as well with two live rates" time="0.0300" classname="effectiveValueAndRates() should return rates as well with two live rates">
    </testcase>
  </testsuite>
  <testsuite name="when the flags interface is set" timestamp="2022-02-04T17:23:34" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="aggregatorWarningFlags" timestamp="2022-02-04T17:23:34" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0450" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set aggregatorWarningFlags is set correctly" time="0.0100" classname="is set correctly">
    </testcase>
  </testsuite>
  <testsuite name="pricing aggregators" timestamp="2022-02-04T17:23:34" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators only an owner can add an aggregator" time="0.5330" classname="only an owner can add an aggregator">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators currenciesUsingAggregator for a rate returns an empty" time="0.0160" classname="currenciesUsingAggregator for a rate returns an empty">
    </testcase>
  </testsuite>
  <testsuite name="When an aggregator with more than 18 decimals is added" timestamp="2022-02-04T17:23:34" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0900" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators When an aggregator with more than 18 decimals is added an aggregator should return a value with 18 decimals or less" time="0.0510" classname="an aggregator should return a value with 18 decimals or less">
    </testcase>
  </testsuite>
  <testsuite name="when a user queries the first entry in aggregatorKeys" timestamp="2022-02-04T17:23:34" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0570" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when a user queries the first entry in aggregatorKeys then it is empty" time="0.0070" classname="then it is empty">
    </testcase>
  </testsuite>
  <testsuite name="when the owner attempts to add an invalid address for sJPY " timestamp="2022-02-04T17:23:34" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1280" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner attempts to add an invalid address for sJPY  then zero address is invalid" time="0.0170" classname="then zero address is invalid">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner attempts to add an invalid address for sJPY  and a non-aggregator address is invalid" time="0.0330" classname="and a non-aggregator address is invalid">
    </testcase>
  </testsuite>
  <testsuite name="when the owner adds sJPY added as an aggregator" timestamp="2022-02-04T17:23:35" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator then the list of aggregatorKeys lists it" time="0.0170" classname="then the list of aggregatorKeys lists it">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator and the AggregatorAdded event is emitted" time="0.0000" classname="and the AggregatorAdded event is emitted">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator only an owner can remove an aggregator" time="0.5030" classname="only an owner can remove an aggregator">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator and currenciesUsingAggregator for that aggregator returns sJPY" time="0.0120" classname="and currenciesUsingAggregator for that aggregator returns sJPY">
    </testcase>
  </testsuite>
  <testsuite name="when the owner adds the same aggregator to two other rates" timestamp="2022-02-04T17:23:35" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1140" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds the same aggregator to two other rates and currenciesUsingAggregator for that aggregator returns sJPY" time="0.0140" classname="and currenciesUsingAggregator for that aggregator returns sJPY">
    </testcase>
  </testsuite>
  <testsuite name="when the owner tries to remove an invalid aggregator" timestamp="2022-02-04T17:23:36" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0860" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner tries to remove an invalid aggregator then it reverts" time="0.0240" classname="then it reverts">
    </testcase>
  </testsuite>
  <testsuite name="when the owner adds sXTZ as an aggregator" timestamp="2022-02-04T17:23:36" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator then the list of aggregatorKeys lists it also" time="0.0320" classname="then the list of aggregatorKeys lists it also">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator and the AggregatorAdded event is emitted" time="0.0000" classname="and the AggregatorAdded event is emitted">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator and currenciesUsingAggregator for that aggregator returns sXTZ" time="0.0100" classname="and currenciesUsingAggregator for that aggregator returns sXTZ">
    </testcase>
  </testsuite>
  <testsuite name="when the ratesAndInvalidForCurrencies is queried" timestamp="2022-02-04T17:23:36" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.2000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the ratesAndInvalidForCurrencies is queried then the rates are invalid" time="0.0000" classname="then the rates are invalid">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the ratesAndInvalidForCurrencies is queried and both are zero" time="0.0000" classname="and both are zero">
    </testcase>
  </testsuite>
  <testsuite name="when rateAndInvalid is queried" timestamp="2022-02-04T17:23:36" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.2280" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when rateAndInvalid is queried then the rates are invalid" time="0.0000" classname="then the rates are invalid">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when rateAndInvalid is queried and both are zero" time="0.0000" classname="and both are zero">
    </testcase>
  </testsuite>
  <testsuite name="when the aggregator price is set for sJPY" timestamp="2022-02-04T17:23:36" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the ratesAndInvalidForCurrencies is queried" timestamp="2022-02-04T17:23:36" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.3050" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the ratesAndInvalidForCurrencies is queried then the rates are still invalid" time="0.0000" classname="then the rates are still invalid">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the ratesAndInvalidForCurrencies is queried yet one price is populated" time="0.0010" classname="yet one price is populated">
    </testcase>
  </testsuite>
  <testsuite name="when rateAndInvalid is queried" timestamp="2022-02-04T17:23:37" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.2650" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when rateAndInvalid is queried then one rate is invalid" time="0.0000" classname="then one rate is invalid">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when rateAndInvalid is queried and one rate is populated" time="0.0000" classname="and one rate is populated">
    </testcase>
  </testsuite>
  <testsuite name="when the aggregator price is set for sXTZ" timestamp="2022-02-04T17:23:37" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the ratesAndInvalidForCurrencies is queried" timestamp="2022-02-04T17:23:37" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.3170" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the aggregator price is set for sXTZ when the ratesAndInvalidForCurrencies is queried then the rates are no longer invalid" time="0.0000" classname="then the rates are no longer invalid">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the aggregator price is set for sXTZ when the ratesAndInvalidForCurrencies is queried and all prices are populated" time="0.0000" classname="and all prices are populated">
    </testcase>
  </testsuite>
  <testsuite name="when rateAndInvalid is queried" timestamp="2022-02-04T17:23:37" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.3900" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the aggregator price is set for sXTZ when rateAndInvalid is queried then both rates are valid" time="0.0000" classname="then both rates are valid">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the aggregator price is set for sXTZ when rateAndInvalid is queried and both rates are populated" time="0.0000" classname="and both rates are populated">
    </testcase>
  </testsuite>
  <testsuite name="when the flags return true for sJPY" timestamp="2022-02-04T17:23:38" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the ratesAndInvalidForCurrencies is queried" timestamp="2022-02-04T17:23:38" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1890" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the aggregator price is set for sXTZ when the flags return true for sJPY when the ratesAndInvalidForCurrencies is queried then the rates are invalid" time="0.0000" classname="then the rates are invalid">
    </testcase>
  </testsuite>
  <testsuite name="when rateAndInvalid is queried" timestamp="2022-02-04T17:23:38" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1400" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the aggregator price is set for sXTZ when the flags return true for sJPY when rateAndInvalid is queried then the rates are invalid" time="0.0000" classname="then the rates are invalid">
    </testcase>
  </testsuite>
  <testsuite name="when the aggregator is removed for sJPY" timestamp="2022-02-04T17:23:38" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the aggregator price is set for sXTZ when the aggregator is removed for sJPY then the AggregatorRemoved event is emitted" time="0.0000" classname="then the AggregatorRemoved event is emitted">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the aggregator price is set for sXTZ when the aggregator is removed for sJPY when the ratesAndInvalidForCurrencies is queried it returns 0" time="0.0330" classname="when the ratesAndInvalidForCurrencies is queried it returns 0">
    </testcase>
  </testsuite>
  <testsuite name="when a user queries the aggregatorKeys" timestamp="2022-02-04T17:23:38" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1720" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the aggregator price is set for sXTZ when the aggregator is removed for sJPY when a user queries the aggregatorKeys then only sXTZ is left" time="0.0130" classname="then only sXTZ is left">
    </testcase>
  </testsuite>
  <testsuite name="when rateAndInvalid is queried" timestamp="2022-02-04T17:23:38" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.3600" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the aggregator price is set for sXTZ when the aggregator is removed for sJPY when rateAndInvalid is queried then JPY returns true" time="0.0100" classname="then JPY returns true">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the owner adds sXTZ as an aggregator when the aggregator price is set for sJPY when the aggregator price is set for sXTZ when the aggregator is removed for sJPY when rateAndInvalid is queried other rates are fine" time="0.0310" classname="other rates are fine">
    </testcase>
  </testsuite>
  <testsuite name="when the aggregator price is set to set a specific number (with support for 8 decimals)" timestamp="2022-02-04T17:23:39" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the price is fetched for sJPY" timestamp="2022-02-04T17:23:39" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1650" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the aggregator price is set to set a specific number (with support for 8 decimals) when the price is fetched for sJPY the specific number is returned with 18 decimals" time="0.0120" classname="the specific number is returned with 18 decimals">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the aggregator price is set to set a specific number (with support for 8 decimals) when the price is fetched for sJPY and the timestamp is the latest" time="0.0120" classname="and the timestamp is the latest">
    </testcase>
  </testsuite>
  <testsuite name="when the aggregator price is set to set a specific number, other than 8 decimals" timestamp="2022-02-04T17:23:39" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the price is fetched for fastGasPrice" timestamp="2022-02-04T17:23:39" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.2230" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the aggregator price is set to set a specific number, other than 8 decimals when the price is fetched for fastGasPrice the specific number is returned with 18 decimals" time="0.0100" classname="the specific number is returned with 18 decimals">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators when the owner adds sJPY added as an aggregator when the aggregator price is set to set a specific number, other than 8 decimals when the price is fetched for fastGasPrice and the timestamp is the latest" time="0.0140" classname="and the timestamp is the latest">
    </testcase>
  </testsuite>
  <testsuite name="warning flags and invalid rates" timestamp="2022-02-04T17:23:39" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators warning flags and invalid rates sUSD is never flagged / invalid." time="0.0210" classname="sUSD is never flagged / invalid.">
    </testcase>
  </testsuite>
  <testsuite name="when JPY is aggregated" timestamp="2022-02-04T17:23:39" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators warning flags and invalid rates when JPY is aggregated then the rate shows as stale" time="0.0150" classname="then the rate shows as stale">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators warning flags and invalid rates when JPY is aggregated then the rate shows as invalid" time="0.0400" classname="then the rate shows as invalid">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators warning flags and invalid rates when JPY is aggregated but the rate is not flagged" time="0.0180" classname="but the rate is not flagged">
    </testcase>
  </testsuite>
  <testsuite name="when the rate is set for sJPY" timestamp="2022-02-04T17:23:40" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators warning flags and invalid rates when JPY is aggregated when the rate is set for sJPY then the rate shows as not stale" time="0.0200" classname="then the rate shows as not stale">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators warning flags and invalid rates when JPY is aggregated when the rate is set for sJPY then the rate shows as not invalid" time="0.0500" classname="then the rate shows as not invalid">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators warning flags and invalid rates when JPY is aggregated when the rate is set for sJPY but the rate is not flagged" time="0.0090" classname="but the rate is not flagged">
    </testcase>
  </testsuite>
  <testsuite name="when the rate is flagged for sJPY" timestamp="2022-02-04T17:23:40" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.3280" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators warning flags and invalid rates when JPY is aggregated when the rate is set for sJPY when the rate is flagged for sJPY then the rate shows as not stale" time="0.0130" classname="then the rate shows as not stale">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators warning flags and invalid rates when JPY is aggregated when the rate is set for sJPY when the rate is flagged for sJPY then the rate shows as invalid" time="0.0460" classname="then the rate shows as invalid">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing when the flags interface is set pricing aggregators warning flags and invalid rates when JPY is aggregated when the rate is set for sJPY when the rate is flagged for sJPY and the rate is not flagged" time="0.0110" classname="and the rate is not flagged">
    </testcase>
  </testsuite>
  <testsuite name="roundIds for historical rates" timestamp="2022-02-04T17:23:40" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing roundIds for historical rates getCurrentRoundId() returns 0 for unknown currencies" time="0.0170" classname="getCurrentRoundId() returns 0 for unknown currencies">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing roundIds for historical rates getCurrentRoundId() is 0 for currencies with no updates" time="0.1180" classname="getCurrentRoundId() is 0 for currencies with no updates">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing roundIds for historical rates getCurrentRoundId() is 0 for sUSD" time="0.0060" classname="getCurrentRoundId() is 0 for sUSD">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing roundIds for historical rates ratesAndUpdatedTimeForCurrencyLastNRounds() shows first entry for sUSD" time="0.0070" classname="ratesAndUpdatedTimeForCurrencyLastNRounds() shows first entry for sUSD">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing roundIds for historical rates ratesAndUpdatedTimeForCurrencyLastNRounds() returns 0s for other currencies without updates" time="0.0610" classname="ratesAndUpdatedTimeForCurrencyLastNRounds() returns 0s for other currencies without updates">
    </testcase>
  </testsuite>
  <testsuite name="given an aggregator exists for sJPY" timestamp="2022-02-04T17:23:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and it has been given three successive rates a second apart" timestamp="2022-02-04T17:23:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="getCurrentRoundId())" timestamp="2022-02-04T17:23:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when invoked for an aggregator" timestamp="2022-02-04T17:23:40" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1300" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing roundIds for historical rates given an aggregator exists for sJPY and it has been given three successive rates a second apart getCurrentRoundId()) when invoked for an aggregator getCurrentRound() returns the last entry" time="0.0100" classname="getCurrentRound() returns the last entry">
    </testcase>
  </testsuite>
  <testsuite name="rateAndTimestampAtRound()" timestamp="2022-02-04T17:23:41" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.2370" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing roundIds for historical rates given an aggregator exists for sJPY and it has been given three successive rates a second apart rateAndTimestampAtRound() when invoked for no price returns 0" time="0.0050" classname="when invoked for no price returns 0">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing roundIds for historical rates given an aggregator exists for sJPY and it has been given three successive rates a second apart rateAndTimestampAtRound() when invoked for an aggregator" time="0.0410" classname="when invoked for an aggregator">
    </testcase>
  </testsuite>
  <testsuite name="ratesAndUpdatedTimeForCurrencyLastNRounds()" timestamp="2022-02-04T17:23:41" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when invoked for a non-existant currency" timestamp="2022-02-04T17:23:41" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0980" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing roundIds for historical rates given an aggregator exists for sJPY and it has been given three successive rates a second apart ratesAndUpdatedTimeForCurrencyLastNRounds() when invoked for a non-existant currency then it returns zeros" time="0.0090" classname="then it returns zeros">
    </testcase>
  </testsuite>
  <testsuite name="when invoked for an aggregated price" timestamp="2022-02-04T17:23:41" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.2400" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing roundIds for historical rates given an aggregator exists for sJPY and it has been given three successive rates a second apart ratesAndUpdatedTimeForCurrencyLastNRounds() when invoked for an aggregated price then it returns the rates as expected" time="0.0230" classname="then it returns the rates as expected">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing roundIds for historical rates given an aggregator exists for sJPY and it has been given three successive rates a second apart ratesAndUpdatedTimeForCurrencyLastNRounds() when invoked for an aggregated price then it returns the rates as expected, even over the edge" time="0.0310" classname="then it returns the rates as expected, even over the edge">
    </testcase>
  </testsuite>
  <testsuite name="and the aggregator has been given three rates, 30seconds apart" timestamp="2022-02-04T17:23:41" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="getLastRoundIdBeforeElapsedSecs()" timestamp="2022-02-04T17:23:41" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when getLastRoundIdBeforeElapsedSecs() is invoked with the first round and a waiting time of less than 30s" timestamp="2022-02-04T17:23:41" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1150" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing roundIds for historical rates given an aggregator exists for sJPY and the aggregator has been given three rates, 30seconds apart getLastRoundIdBeforeElapsedSecs() when getLastRoundIdBeforeElapsedSecs() is invoked with the first round and a waiting time of less than 30s then it receives round 1 - no change " time="0.0090" classname="then it receives round 1 - no change ">
    </testcase>
  </testsuite>
  <testsuite name="when getLastRoundIdBeforeElapsedSecs() is invoked with the first round and a waiting time of 30s exactly" timestamp="2022-02-04T17:23:41" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1250" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing roundIds for historical rates given an aggregator exists for sJPY and the aggregator has been given three rates, 30seconds apart getLastRoundIdBeforeElapsedSecs() when getLastRoundIdBeforeElapsedSecs() is invoked with the first round and a waiting time of 30s exactly then it receives round 2 " time="0.0210" classname="then it receives round 2 ">
    </testcase>
  </testsuite>
  <testsuite name="when getLastRoundIdBeforeElapsedSecs() is invoked with the second round and a waiting time of 30s exactly" timestamp="2022-02-04T17:23:41" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1110" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing roundIds for historical rates given an aggregator exists for sJPY and the aggregator has been given three rates, 30seconds apart getLastRoundIdBeforeElapsedSecs() when getLastRoundIdBeforeElapsedSecs() is invoked with the second round and a waiting time of 30s exactly then it receives round 3" time="0.0210" classname="then it receives round 3">
    </testcase>
  </testsuite>
  <testsuite name="when getLastRoundIdBeforeElapsedSecs() is invoked with the first round and a waiting time between 30s to 60s" timestamp="2022-02-04T17:23:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1380" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing roundIds for historical rates given an aggregator exists for sJPY and the aggregator has been given three rates, 30seconds apart getLastRoundIdBeforeElapsedSecs() when getLastRoundIdBeforeElapsedSecs() is invoked with the first round and a waiting time between 30s to 60s then it receives round 2 " time="0.0200" classname="then it receives round 2 ">
    </testcase>
  </testsuite>
  <testsuite name="when getLastRoundIdBeforeElapsedSecs() is invoked with the first round and a waiting time of 60s exactly" timestamp="2022-02-04T17:23:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1270" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing roundIds for historical rates given an aggregator exists for sJPY and the aggregator has been given three rates, 30seconds apart getLastRoundIdBeforeElapsedSecs() when getLastRoundIdBeforeElapsedSecs() is invoked with the first round and a waiting time of 60s exactly then it receives round 3 " time="0.0190" classname="then it receives round 3 ">
    </testcase>
  </testsuite>
  <testsuite name="when getLastRoundIdBeforeElapsedSecs() is invoked with the first round and a waiting time beyond 60s" timestamp="2022-02-04T17:23:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1050" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing roundIds for historical rates given an aggregator exists for sJPY and the aggregator has been given three rates, 30seconds apart getLastRoundIdBeforeElapsedSecs() when getLastRoundIdBeforeElapsedSecs() is invoked with the first round and a waiting time beyond 60s then it receives round 3 as well " time="0.0150" classname="then it receives round 3 as well ">
    </testcase>
  </testsuite>
  <testsuite name="when getLastRoundIdBeforeElapsedSecs() is invoked with the third round and a waiting time beyond 60s" timestamp="2022-02-04T17:23:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0940" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing roundIds for historical rates given an aggregator exists for sJPY and the aggregator has been given three rates, 30seconds apart getLastRoundIdBeforeElapsedSecs() when getLastRoundIdBeforeElapsedSecs() is invoked with the third round and a waiting time beyond 60s then it still receives round 3" time="0.0080" classname="then it still receives round 3">
    </testcase>
  </testsuite>
  <testsuite name="effectiveValueAndRatesAtRound()" timestamp="2022-02-04T17:23:42" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when both aggregated prices have been given three rates with current timestamps" timestamp="2022-02-04T17:23:42" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="2.1950" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing roundIds for historical rates given an aggregator exists for sJPY effectiveValueAndRatesAtRound() when both aggregated prices have been given three rates with current timestamps accepts various changes to src roundId" time="0.0660" classname="accepts various changes to src roundId">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing roundIds for historical rates given an aggregator exists for sJPY effectiveValueAndRatesAtRound() when both aggregated prices have been given three rates with current timestamps accepts various changes to dest roundId" time="0.0540" classname="accepts various changes to dest roundId">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing roundIds for historical rates given an aggregator exists for sJPY effectiveValueAndRatesAtRound() when both aggregated prices have been given three rates with current timestamps and combinations therein" time="0.0470" classname="and combinations therein">
    </testcase>
  </testsuite>
  <testsuite name="setDexPriceAggregator()" timestamp="2022-02-04T17:23:44" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.6940" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing setDexPriceAggregator() should not be set by default" time="0.0070" classname="should not be set by default">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing setDexPriceAggregator() only the owner should be able to change the dex price aggregator&apos;s address" time="0.6200" classname="only the owner should be able to change the dex price aggregator&apos;s address">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing setDexPriceAggregator() should emit event on successful address update" time="0.0410" classname="should emit event on successful address update">
    </testcase>
  </testsuite>
  <testsuite name="atomicTwapWindow" timestamp="2022-02-04T17:23:45" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing atomicTwapWindow atomicTwapWindow default is set correctly" time="0.0120" classname="atomicTwapWindow default is set correctly">
    </testcase>
  </testsuite>
  <testsuite name="when price window is changed in the system settings" timestamp="2022-02-04T17:23:45" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0340" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing atomicTwapWindow when price window is changed in the system settings then atomicTwapWindow is correctly updated" time="0.0100" classname="then atomicTwapWindow is correctly updated">
    </testcase>
  </testsuite>
  <testsuite name="atomicEquivalentForDexPricing" timestamp="2022-02-04T17:23:45" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when equivalent for SNX is changed in the system settings" timestamp="2022-02-04T17:23:45" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1920" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing atomicEquivalentForDexPricing when equivalent for SNX is changed in the system settings then atomicEquivalentForDexPricing is correctly updated" time="0.0110" classname="then atomicEquivalentForDexPricing is correctly updated">
    </testcase>
  </testsuite>
  <testsuite name="atomicPriceBuffer" timestamp="2022-02-04T17:23:45" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when price buffer for SNX is changed in the system settings" timestamp="2022-02-04T17:23:45" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0570" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing atomicPriceBuffer when price buffer for SNX is changed in the system settings then rateStalePeriod is correctly updated" time="0.0060" classname="then rateStalePeriod is correctly updated">
    </testcase>
  </testsuite>
  <testsuite name="src/dest do not have an atomic equivalent for dex pricing" timestamp="2022-02-04T17:23:45" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="1.2090" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing src/dest do not have an atomic equivalent for dex pricing reverts on src not having equivalent" time="0.0160" classname="reverts on src not having equivalent">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing src/dest do not have an atomic equivalent for dex pricing reverts on dest not having equivalent" time="0.0130" classname="reverts on dest not having equivalent">
    </testcase>
  </testsuite>
  <testsuite name="effectiveAtomicValueAndRates" timestamp="2022-02-04T17:23:46" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="aggregator reverts on latestRoundData" timestamp="2022-02-04T17:23:46" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.2170" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates aggregator reverts on latestRoundData reverts due to zero rates" time="0.0280" classname="reverts due to zero rates">
    </testcase>
  </testsuite>
  <testsuite name="dexPriceAggregator reverts on assetToAsset" timestamp="2022-02-04T17:23:47" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.2040" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates dexPriceAggregator reverts on assetToAsset reverts" time="0.0350" classname="reverts">
    </testcase>
  </testsuite>
  <testsuite name="trades sUSD -&gt; sETH" timestamp="2022-02-04T17:23:47" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="P_DEX of 0.01, P_CL of 0.011, and CL_BUFFER of 50bps" timestamp="2022-02-04T17:23:47" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="1.7690" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.01, P_CL of 0.011, and CL_BUFFER of 50bps selects pDex" time="0.0000" classname="selects pDex">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.01, P_CL of 0.011, and CL_BUFFER of 50bps provides the correct output" time="0.0000" classname="provides the correct output">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.01, P_CL of 0.011, and CL_BUFFER of 50bps provides the correct system value" time="0.0000" classname="provides the correct system value">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.01, P_CL of 0.011, and CL_BUFFER of 50bps provides the correct system source rate" time="0.0000" classname="provides the correct system source rate">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.01, P_CL of 0.011, and CL_BUFFER of 50bps provides the correct system destination rate" time="0.0010" classname="provides the correct system destination rate">
    </testcase>
  </testsuite>
  <testsuite name="P_DEX of 0.01, P_CL of 0.0099, and CL_BUFFER of 50bps" timestamp="2022-02-04T17:23:49" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="1.8950" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.01, P_CL of 0.0099, and CL_BUFFER of 50bps selects pClBuf" time="0.0000" classname="selects pClBuf">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.01, P_CL of 0.0099, and CL_BUFFER of 50bps provides the correct output" time="0.0000" classname="provides the correct output">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.01, P_CL of 0.0099, and CL_BUFFER of 50bps provides the correct system value" time="0.0000" classname="provides the correct system value">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.01, P_CL of 0.0099, and CL_BUFFER of 50bps provides the correct system source rate" time="0.0000" classname="provides the correct system source rate">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.01, P_CL of 0.0099, and CL_BUFFER of 50bps provides the correct system destination rate" time="0.0000" classname="provides the correct system destination rate">
    </testcase>
  </testsuite>
  <testsuite name="P_DEX of 0.01, P_CL of 0.01, and CL_BUFFER of 50bps" timestamp="2022-02-04T17:23:50" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="2.0390" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.01, P_CL of 0.01, and CL_BUFFER of 50bps selects pClBuf" time="0.0000" classname="selects pClBuf">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.01, P_CL of 0.01, and CL_BUFFER of 50bps provides the correct output" time="0.0000" classname="provides the correct output">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.01, P_CL of 0.01, and CL_BUFFER of 50bps provides the correct system value" time="0.0000" classname="provides the correct system value">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.01, P_CL of 0.01, and CL_BUFFER of 50bps provides the correct system source rate" time="0.0000" classname="provides the correct system source rate">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.01, P_CL of 0.01, and CL_BUFFER of 50bps provides the correct system destination rate" time="0.0000" classname="provides the correct system destination rate">
    </testcase>
  </testsuite>
  <testsuite name="P_DEX of 0.0099, P_CL of 0.01, and CL_BUFFER of 200bps" timestamp="2022-02-04T17:23:53" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="2.2170" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.0099, P_CL of 0.01, and CL_BUFFER of 200bps selects pClBuf" time="0.0000" classname="selects pClBuf">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.0099, P_CL of 0.01, and CL_BUFFER of 200bps provides the correct output" time="0.0000" classname="provides the correct output">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.0099, P_CL of 0.01, and CL_BUFFER of 200bps provides the correct system value" time="0.0000" classname="provides the correct system value">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.0099, P_CL of 0.01, and CL_BUFFER of 200bps provides the correct system source rate" time="0.0000" classname="provides the correct system source rate">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.0099, P_CL of 0.01, and CL_BUFFER of 200bps provides the correct system destination rate" time="0.0000" classname="provides the correct system destination rate">
    </testcase>
  </testsuite>
  <testsuite name="P_DEX of 0.0099, P_CL of 0.01, and CL_BUFFER of 0bps" timestamp="2022-02-04T17:23:55" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="1.8760" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.0099, P_CL of 0.01, and CL_BUFFER of 0bps selects pDex" time="0.0000" classname="selects pDex">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.0099, P_CL of 0.01, and CL_BUFFER of 0bps provides the correct output" time="0.0000" classname="provides the correct output">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.0099, P_CL of 0.01, and CL_BUFFER of 0bps provides the correct system value" time="0.0000" classname="provides the correct system value">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.0099, P_CL of 0.01, and CL_BUFFER of 0bps provides the correct system source rate" time="0.0000" classname="provides the correct system source rate">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.0099, P_CL of 0.01, and CL_BUFFER of 0bps provides the correct system destination rate" time="0.0000" classname="provides the correct system destination rate">
    </testcase>
  </testsuite>
  <testsuite name="P_DEX of 0.01, P_CL of 0.01, and CL_BUFFER of 0bps" timestamp="2022-02-04T17:23:57" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="1.9620" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.01, P_CL of 0.01, and CL_BUFFER of 0bps selects pDex,pClBuf" time="0.0000" classname="selects pDex,pClBuf">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.01, P_CL of 0.01, and CL_BUFFER of 0bps provides the correct output" time="0.0000" classname="provides the correct output">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.01, P_CL of 0.01, and CL_BUFFER of 0bps provides the correct system value" time="0.0010" classname="provides the correct system value">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.01, P_CL of 0.01, and CL_BUFFER of 0bps provides the correct system source rate" time="0.0000" classname="provides the correct system source rate">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sUSD -&gt; sETH P_DEX of 0.01, P_CL of 0.01, and CL_BUFFER of 0bps provides the correct system destination rate" time="0.0000" classname="provides the correct system destination rate">
    </testcase>
  </testsuite>
  <testsuite name="trades sETH -&gt; sUSD" timestamp="2022-02-04T17:23:59" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="P_DEX of 100, P_CL of 110, and CL_BUFFER of 50bps" timestamp="2022-02-04T17:23:59" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="2.7290" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 100, P_CL of 110, and CL_BUFFER of 50bps selects pDex" time="0.0000" classname="selects pDex">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 100, P_CL of 110, and CL_BUFFER of 50bps provides the correct output" time="0.0000" classname="provides the correct output">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 100, P_CL of 110, and CL_BUFFER of 50bps provides the correct system value" time="0.0000" classname="provides the correct system value">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 100, P_CL of 110, and CL_BUFFER of 50bps provides the correct system source rate" time="0.0000" classname="provides the correct system source rate">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 100, P_CL of 110, and CL_BUFFER of 50bps provides the correct system destination rate" time="0.0000" classname="provides the correct system destination rate">
    </testcase>
  </testsuite>
  <testsuite name="P_DEX of 100, P_CL of 99, and CL_BUFFER of 50bps" timestamp="2022-02-04T17:24:01" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="4.2320" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 100, P_CL of 99, and CL_BUFFER of 50bps selects pClBuf" time="0.0010" classname="selects pClBuf">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 100, P_CL of 99, and CL_BUFFER of 50bps provides the correct output" time="0.0000" classname="provides the correct output">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 100, P_CL of 99, and CL_BUFFER of 50bps provides the correct system value" time="0.0000" classname="provides the correct system value">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 100, P_CL of 99, and CL_BUFFER of 50bps provides the correct system source rate" time="0.0000" classname="provides the correct system source rate">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 100, P_CL of 99, and CL_BUFFER of 50bps provides the correct system destination rate" time="0.0000" classname="provides the correct system destination rate">
    </testcase>
  </testsuite>
  <testsuite name="P_DEX of 100, P_CL of 100, and CL_BUFFER of 50bps" timestamp="2022-02-04T17:24:06" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="2.1940" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 100, P_CL of 100, and CL_BUFFER of 50bps selects pClBuf" time="0.0000" classname="selects pClBuf">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 100, P_CL of 100, and CL_BUFFER of 50bps provides the correct output" time="0.0000" classname="provides the correct output">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 100, P_CL of 100, and CL_BUFFER of 50bps provides the correct system value" time="0.0000" classname="provides the correct system value">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 100, P_CL of 100, and CL_BUFFER of 50bps provides the correct system source rate" time="0.0000" classname="provides the correct system source rate">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 100, P_CL of 100, and CL_BUFFER of 50bps provides the correct system destination rate" time="0.0000" classname="provides the correct system destination rate">
    </testcase>
  </testsuite>
  <testsuite name="P_DEX of 99, P_CL of 100, and CL_BUFFER of 200bps" timestamp="2022-02-04T17:24:08" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="1.9700" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 99, P_CL of 100, and CL_BUFFER of 200bps selects pClBuf" time="0.0000" classname="selects pClBuf">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 99, P_CL of 100, and CL_BUFFER of 200bps provides the correct output" time="0.0000" classname="provides the correct output">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 99, P_CL of 100, and CL_BUFFER of 200bps provides the correct system value" time="0.0000" classname="provides the correct system value">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 99, P_CL of 100, and CL_BUFFER of 200bps provides the correct system source rate" time="0.0000" classname="provides the correct system source rate">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 99, P_CL of 100, and CL_BUFFER of 200bps provides the correct system destination rate" time="0.0000" classname="provides the correct system destination rate">
    </testcase>
  </testsuite>
  <testsuite name="P_DEX of 99, P_CL of 100, and CL_BUFFER of 0bps" timestamp="2022-02-04T17:24:10" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="1.8690" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 99, P_CL of 100, and CL_BUFFER of 0bps selects pDex" time="0.0000" classname="selects pDex">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 99, P_CL of 100, and CL_BUFFER of 0bps provides the correct output" time="0.0000" classname="provides the correct output">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 99, P_CL of 100, and CL_BUFFER of 0bps provides the correct system value" time="0.0010" classname="provides the correct system value">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 99, P_CL of 100, and CL_BUFFER of 0bps provides the correct system source rate" time="0.0000" classname="provides the correct system source rate">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 99, P_CL of 100, and CL_BUFFER of 0bps provides the correct system destination rate" time="0.0000" classname="provides the correct system destination rate">
    </testcase>
  </testsuite>
  <testsuite name="P_DEX of 100, P_CL of 100, and CL_BUFFER of 0bps" timestamp="2022-02-04T17:24:12" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="2.1610" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 100, P_CL of 100, and CL_BUFFER of 0bps selects pDex,pClBuf" time="0.0000" classname="selects pDex,pClBuf">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 100, P_CL of 100, and CL_BUFFER of 0bps provides the correct output" time="0.0000" classname="provides the correct output">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 100, P_CL of 100, and CL_BUFFER of 0bps provides the correct system value" time="0.0000" classname="provides the correct system value">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 100, P_CL of 100, and CL_BUFFER of 0bps provides the correct system source rate" time="0.0000" classname="provides the correct system source rate">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates trades sETH -&gt; sUSD P_DEX of 100, P_CL of 100, and CL_BUFFER of 0bps provides the correct system destination rate" time="0.0000" classname="provides the correct system destination rate">
    </testcase>
  </testsuite>
  <testsuite name="when both tokens have a price buffer set" timestamp="2022-02-04T17:24:14" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.8140" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates when both tokens have a price buffer set prices pClBuf with the highest buffer" time="0.0800" classname="prices pClBuf with the highest buffer">
    </testcase>
  </testsuite>
  <testsuite name="when tokens use non-18 decimals" timestamp="2022-02-04T17:24:15" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="sUSD -&gt; sETH" timestamp="2022-02-04T17:24:15" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="4.0630" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates when tokens use non-18 decimals sUSD -&gt; sETH dex aggregator mock provides expected results" time="0.0140" classname="dex aggregator mock provides expected results">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates when tokens use non-18 decimals sUSD -&gt; sETH still provides results in 18 decimals" time="0.0340" classname="still provides results in 18 decimals">
    </testcase>
  </testsuite>
  <testsuite name="sETH -&gt; sUSD" timestamp="2022-02-04T17:24:19" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.9110" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates when tokens use non-18 decimals sETH -&gt; sUSD dex aggregator mock provides expected results" time="0.0070" classname="dex aggregator mock provides expected results">
    </testcase>
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing effectiveAtomicValueAndRates when tokens use non-18 decimals sETH -&gt; sUSD still provides results in 18 decimals" time="0.0660" classname="still provides results in 18 decimals">
    </testcase>
  </testsuite>
  <testsuite name="atomicVolatilityConsiderationWindow" timestamp="2022-02-04T17:24:20" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when consideration window is changed in the system settings" timestamp="2022-02-04T17:24:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0410" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing atomicVolatilityConsiderationWindow when consideration window is changed in the system settings then atomicVolatilityConsiderationWindow is correctly updated" time="0.0070" classname="then atomicVolatilityConsiderationWindow is correctly updated">
    </testcase>
  </testsuite>
  <testsuite name="atomicVolatilityUpdateThreshold" timestamp="2022-02-04T17:24:20" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when threshold for SNX is changed in the system settings" timestamp="2022-02-04T17:24:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0370" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing atomicVolatilityUpdateThreshold when threshold for SNX is changed in the system settings then atomicVolatilityUpdateThreshold is correctly updated" time="0.0070" classname="then atomicVolatilityUpdateThreshold is correctly updated">
    </testcase>
  </testsuite>
  <testsuite name="synthTooVolatileForAtomicExchange" timestamp="2022-02-04T17:24:20" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when consideration window is not set" timestamp="2022-02-04T17:24:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0750" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing synthTooVolatileForAtomicExchange when consideration window is not set does not consider synth to be volatile" time="0.0130" classname="does not consider synth to be volatile">
    </testcase>
  </testsuite>
  <testsuite name="when update threshold is not set" timestamp="2022-02-04T17:24:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1020" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing synthTooVolatileForAtomicExchange when update threshold is not set does not consider synth to be volatile" time="0.0190" classname="does not consider synth to be volatile">
    </testcase>
  </testsuite>
  <testsuite name="when consideration window and update threshold are set" timestamp="2022-02-04T17:24:20" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when last aggregator update is outside consideration window" timestamp="2022-02-04T17:24:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.2960" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing synthTooVolatileForAtomicExchange when consideration window and update threshold are set when last aggregator update is outside consideration window does not consider synth to be volatile" time="0.0950" classname="does not consider synth to be volatile">
    </testcase>
  </testsuite>
  <testsuite name="when last aggregator update is inside consideration window" timestamp="2022-02-04T17:24:20" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the allowed update threshold is not reached" timestamp="2022-02-04T17:24:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.2340" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing synthTooVolatileForAtomicExchange when consideration window and update threshold are set when last aggregator update is inside consideration window when the allowed update threshold is not reached does not consider synth to be volatile" time="0.0270" classname="does not consider synth to be volatile">
    </testcase>
  </testsuite>
  <testsuite name="when the allowed update threshold is reached" timestamp="2022-02-04T17:24:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.3200" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing synthTooVolatileForAtomicExchange when consideration window and update threshold are set when last aggregator update is inside consideration window when the allowed update threshold is reached considers synth to be volatile" time="0.0250" classname="considers synth to be volatile">
    </testcase>
  </testsuite>
  <testsuite name="when the allowed update threshold is reached with updates at the edge of the consideration window" timestamp="2022-02-04T17:24:21" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1840" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing synthTooVolatileForAtomicExchange when consideration window and update threshold are set when last aggregator update is inside consideration window when the allowed update threshold is reached with updates at the edge of the consideration window considers synth to be volatile" time="0.0200" classname="considers synth to be volatile">
    </testcase>
  </testsuite>
  <testsuite name="when there is not enough oracle history to assess" timestamp="2022-02-04T17:24:21" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.2700" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing synthTooVolatileForAtomicExchange when consideration window and update threshold are set when last aggregator update is inside consideration window when there is not enough oracle history to assess considers synth to be volatile" time="0.0420" classname="considers synth to be volatile">
    </testcase>
  </testsuite>
  <testsuite name="when there is just enough oracle history to assess" timestamp="2022-02-04T17:24:21" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when all updates are inside consideration window" timestamp="2022-02-04T17:24:21" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1930" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing synthTooVolatileForAtomicExchange when consideration window and update threshold are set when last aggregator update is inside consideration window when there is just enough oracle history to assess when all updates are inside consideration window considers synth to be volatile" time="0.0210" classname="considers synth to be volatile">
    </testcase>
  </testsuite>
  <testsuite name="when not all updates are inside consideration window" timestamp="2022-02-04T17:24:21" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.2820" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing synthTooVolatileForAtomicExchange when consideration window and update threshold are set when last aggregator update is inside consideration window when there is just enough oracle history to assess when not all updates are inside consideration window does not consider synth to be volatile" time="0.0210" classname="does not consider synth to be volatile">
    </testcase>
  </testsuite>
  <testsuite name="when aggregator fails" timestamp="2022-02-04T17:24:22" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when aggregator returns no rate outside consideration window" timestamp="2022-02-04T17:24:22" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1370" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing synthTooVolatileForAtomicExchange when consideration window and update threshold are set when aggregator fails when aggregator returns no rate outside consideration window does not consider synth to be volatile" time="0.0140" classname="does not consider synth to be volatile">
    </testcase>
  </testsuite>
  <testsuite name="when aggregator returns no rate inside consideration window" timestamp="2022-02-04T17:24:22" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.1440" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing synthTooVolatileForAtomicExchange when consideration window and update threshold are set when aggregator fails when aggregator returns no rate inside consideration window considers synth to be volatile" time="0.0190" classname="considers synth to be volatile">
    </testcase>
  </testsuite>
  <testsuite name="when aggregator reverts" timestamp="2022-02-04T17:24:22" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeRates.js" time="0.2510" failures="0">
    <testcase name="Contract: Exchange Rates Using ExchangeRatesWithDexPricing synthTooVolatileForAtomicExchange when consideration window and update threshold are set when aggregator fails when aggregator reverts considers synth to be volatile" time="0.0370" classname="considers synth to be volatile">
    </testcase>
  </testsuite>
  <testsuite name="Contract: ExchangerWithFeeRecAlternatives (unit tests)" timestamp="2022-02-04T17:24:22" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) ensure only known functions are mutative" time="0.0490" classname="ensure only known functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="when a contract is instantiated" timestamp="2022-02-04T17:24:23" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when instantiated" timestamp="2022-02-04T17:24:23" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="atomicMaxVolumePerBlock()" timestamp="2022-02-04T17:24:23" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when SystemSetting.atomicMaxVolumePerBlock is mocked to 0" timestamp="2022-02-04T17:24:23" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.6460" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated atomicMaxVolumePerBlock() when SystemSetting.atomicMaxVolumePerBlock is mocked to 0 is set to 0" time="0.0170" classname="is set to 0">
    </testcase>
  </testsuite>
  <testsuite name="when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000" timestamp="2022-02-04T17:24:23" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.5670" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated atomicMaxVolumePerBlock() when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 is set to the configured value" time="0.0060" classname="is set to the configured value">
    </testcase>
  </testsuite>
  <testsuite name="when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000" timestamp="2022-02-04T17:24:24" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="feeRateForAtomicExchange()" timestamp="2022-02-04T17:24:24" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0" timestamp="2022-02-04T17:24:24" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.6620" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 feeRateForAtomicExchange() when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 is set to 0" time="0.0070" classname="is set to 0">
    </testcase>
  </testsuite>
  <testsuite name="when SystemSetting.atomicExchangeFeeRate for sETH                             is mocked to 10000000000000000" timestamp="2022-02-04T17:24:25" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.5780" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 feeRateForAtomicExchange() when SystemSetting.atomicExchangeFeeRate for sETH                             is mocked to 10000000000000000 is set to the configured atomic override value" time="0.0060" classname="is set to the configured atomic override value">
    </testcase>
  </testsuite>
  <testsuite name="when SystemSetting.exchangeFeeRate for sETH                             is mocked to 3000000000000000" timestamp="2022-02-04T17:24:25" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 feeRateForAtomicExchange() when SystemSetting.exchangeFeeRate for sETH                             is mocked to 3000000000000000 is set to the configured base value" time="0.0110" classname="is set to the configured base value">
    </testcase>
  </testsuite>
  <testsuite name="when SystemSetting.atomicExchangeFeeRate for sETH                             is mocked to 10000000000000000" timestamp="2022-02-04T17:24:26" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.6120" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 feeRateForAtomicExchange() when SystemSetting.exchangeFeeRate for sETH                             is mocked to 3000000000000000 when SystemSetting.atomicExchangeFeeRate for sETH                             is mocked to 10000000000000000 is set to the configured atomic override value" time="0.0130" classname="is set to the configured atomic override value">
    </testcase>
  </testsuite>
  <testsuite name="exchanging" timestamp="2022-02-04T17:24:26" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="exchange with virtual synths" timestamp="2022-02-04T17:24:26" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="failure modes" timestamp="2022-02-04T17:24:26" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked with invalid exchange rates" timestamp="2022-02-04T17:24:26" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.6160" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange with virtual synths failure modes when mocked with invalid exchange rates reverts when either rate is invalid" time="0.0420" classname="reverts when either rate is invalid">
    </testcase>
  </testsuite>
  <testsuite name="when mocked with valid exchange rates" timestamp="2022-02-04T17:24:27" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked with no prior exchanges to settle" timestamp="2022-02-04T17:24:27" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when SystemSetting.waitingPeriodSecs is mocked to 0" timestamp="2022-02-04T17:24:27" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked with exchange rates giving an effective value of 1:1" timestamp="2022-02-04T17:24:27" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked 1e18 as last n rates" timestamp="2022-02-04T17:24:27" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked a synth to burn" timestamp="2022-02-04T17:24:27" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocking exchange state persistance" timestamp="2022-02-04T17:24:27" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="1.4550" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange with virtual synths failure modes when mocked with valid exchange rates when mocked with no prior exchanges to settle when SystemSetting.waitingPeriodSecs is mocked to 0 when mocked with exchange rates giving an effective value of 1:1 when mocked 1e18 as last n rates when mocked a synth to burn when mocking exchange state persistance it reverts trying to create a virtual synth with no supply" time="0.0350" classname="it reverts trying to create a virtual synth with no supply">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange with virtual synths failure modes when mocked with valid exchange rates when mocked with no prior exchanges to settle when SystemSetting.waitingPeriodSecs is mocked to 0 when mocked with exchange rates giving an effective value of 1:1 when mocked 1e18 as last n rates when mocked a synth to burn when mocking exchange state persistance it reverts trying to virtualize into an inverse synth" time="0.1090" classname="it reverts trying to virtualize into an inverse synth">
    </testcase>
  </testsuite>
  <testsuite name="when mocked with valid exchange rates" timestamp="2022-02-04T17:24:29" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked with no prior exchanges to settle" timestamp="2022-02-04T17:24:29" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when SystemSetting.waitingPeriodSecs is mocked to 0" timestamp="2022-02-04T17:24:29" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked with exchange rates giving an effective value of 1:1" timestamp="2022-02-04T17:24:29" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked 1e18 as last n rates" timestamp="2022-02-04T17:24:29" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked a synth to burn" timestamp="2022-02-04T17:24:29" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocking exchange state persistance" timestamp="2022-02-04T17:24:29" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when invoked" timestamp="2022-02-04T17:24:29" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange with virtual synths when mocked with valid exchange rates when mocked with no prior exchanges to settle when SystemSetting.waitingPeriodSecs is mocked to 0 when mocked with exchange rates giving an effective value of 1:1 when mocked 1e18 as last n rates when mocked a synth to burn when mocking exchange state persistance when invoked emits a VirtualSynthCreated event with the correct underlying synth and amount" time="0.0000" classname="emits a VirtualSynthCreated event with the correct underlying synth and amount">
    </testcase>
  </testsuite>
  <testsuite name="when interrogating the Virtual Synths" timestamp="2022-02-04T17:24:29" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="3.7940" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange with virtual synths when mocked with valid exchange rates when mocked with no prior exchanges to settle when SystemSetting.waitingPeriodSecs is mocked to 0 when mocked with exchange rates giving an effective value of 1:1 when mocked 1e18 as last n rates when mocked a synth to burn when mocking exchange state persistance when invoked when interrogating the Virtual Synths the vSynth has the correct synth" time="0.0120" classname="the vSynth has the correct synth">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange with virtual synths when mocked with valid exchange rates when mocked with no prior exchanges to settle when SystemSetting.waitingPeriodSecs is mocked to 0 when mocked with exchange rates giving an effective value of 1:1 when mocked 1e18 as last n rates when mocked a synth to burn when mocking exchange state persistance when invoked when interrogating the Virtual Synths the vSynth has the correct resolver" time="0.0130" classname="the vSynth has the correct resolver">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange with virtual synths when mocked with valid exchange rates when mocked with no prior exchanges to settle when SystemSetting.waitingPeriodSecs is mocked to 0 when mocked with exchange rates giving an effective value of 1:1 when mocked 1e18 as last n rates when mocked a synth to burn when mocking exchange state persistance when invoked when interrogating the Virtual Synths the vSynth has minted the correct amount to the user" time="0.0150" classname="the vSynth has minted the correct amount to the user">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange with virtual synths when mocked with valid exchange rates when mocked with no prior exchanges to settle when SystemSetting.waitingPeriodSecs is mocked to 0 when mocked with exchange rates giving an effective value of 1:1 when mocked 1e18 as last n rates when mocked a synth to burn when mocking exchange state persistance when invoked when interrogating the Virtual Synths and the synth has been issued to the vSynth" time="0.0030" classname="and the synth has been issued to the vSynth">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange with virtual synths when mocked with valid exchange rates when mocked with no prior exchanges to settle when SystemSetting.waitingPeriodSecs is mocked to 0 when mocked with exchange rates giving an effective value of 1:1 when mocked 1e18 as last n rates when mocked a synth to burn when mocking exchange state persistance when invoked when interrogating the Virtual Synths the vSynth is an ERC-1167 minimal proxy instead of a full Virtual Synth" time="0.0070" classname="the vSynth is an ERC-1167 minimal proxy instead of a full Virtual Synth">
    </testcase>
  </testsuite>
  <testsuite name="exchange atomically" timestamp="2022-02-04T17:24:33" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when called by unauthorized" timestamp="2022-02-04T17:24:33" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked to allow invocation checks" timestamp="2022-02-04T17:24:33" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="1.2910" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when called by unauthorized when mocked to allow invocation checks it reverts when called by regular accounts" time="0.7210" classname="it reverts when called by regular accounts">
    </testcase>
  </testsuite>
  <testsuite name="when not exchangeable" timestamp="2022-02-04T17:24:34" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when not exchangeable reverts when src and dest are the same" time="0.0500" classname="reverts when src and dest are the same">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when not exchangeable reverts when input amount is zero" time="0.0390" classname="reverts when input amount is zero">
    </testcase>
  </testsuite>
  <testsuite name="when mocked with invalid exchange rates" timestamp="2022-02-04T17:24:36" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="1.5320" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when not exchangeable when mocked with invalid exchange rates reverts when either rate is invalid" time="0.0540" classname="reverts when either rate is invalid">
    </testcase>
  </testsuite>
  <testsuite name="when mocked with valid exchange rates" timestamp="2022-02-04T17:24:37" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked with no prior exchanges to settle" timestamp="2022-02-04T17:24:37" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked with atomic rate 1000000000000000000, src rate 1000000000000000000, dest rate 1000000000000000000, deviationFactor 10000000000000000000, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 1000000000000000000,sBTC                            : 1000000000000000000" timestamp="2022-02-04T17:24:37" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when sUSD is not in src/dest pair" timestamp="2022-02-04T17:24:37" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.8030" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when not exchangeable when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 1000000000000000000, src rate 1000000000000000000, dest rate 1000000000000000000, deviationFactor 10000000000000000000, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 1000000000000000000,sBTC                            : 1000000000000000000 when sUSD is not in src/dest pair reverts requiring src/dest to be sUSD" time="0.1510" classname="reverts requiring src/dest to be sUSD">
    </testcase>
  </testsuite>
  <testsuite name="when max volume limit (0) is surpassed" timestamp="2022-02-04T17:24:38" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.6980" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when not exchangeable when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 1000000000000000000, src rate 1000000000000000000, dest rate 1000000000000000000, deviationFactor 10000000000000000000, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 1000000000000000000,sBTC                            : 1000000000000000000 when max volume limit (0) is surpassed reverts due to surpassed volume limit" time="0.1220" classname="reverts due to surpassed volume limit">
    </testcase>
  </testsuite>
  <testsuite name="when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000" timestamp="2022-02-04T17:24:39" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when max volume limit (&gt;0) is surpassed" timestamp="2022-02-04T17:24:39" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.7350" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when not exchangeable when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 1000000000000000000, src rate 1000000000000000000, dest rate 1000000000000000000, deviationFactor 10000000000000000000, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 1000000000000000000,sBTC                            : 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when max volume limit (&gt;0) is surpassed reverts due to surpassed volume limit" time="0.0960" classname="reverts due to surpassed volume limit">
    </testcase>
  </testsuite>
  <testsuite name="when exchange rates hit circuit breakers" timestamp="2022-02-04T17:24:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked sUSD and sETH" timestamp="2022-02-04T17:24:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked with valid exchange rates" timestamp="2022-02-04T17:24:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked with no prior exchanges to settle" timestamp="2022-02-04T17:24:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0" timestamp="2022-02-04T17:24:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked with atomic rate 10000000000000000000, src rate 100000000000000000000, dest rate 10000000000000000000, deviationFactor 5000000000000000000, lastExchangeRates sUSD                            : 10000000000000000000,sETH                            : 10000000000000000000" timestamp="2022-02-04T17:24:40" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="1.4080" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when exchange rates hit circuit breakers when mocked sUSD and sETH when mocked with valid exchange rates when mocked with no prior exchanges to settle when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 when mocked with atomic rate 10000000000000000000, src rate 100000000000000000000, dest rate 10000000000000000000, deviationFactor 5000000000000000000, lastExchangeRates sUSD                            : 10000000000000000000,sETH                            : 10000000000000000000 suspends src synth" time="0.0010" classname="suspends src synth">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when exchange rates hit circuit breakers when mocked sUSD and sETH when mocked with valid exchange rates when mocked with no prior exchanges to settle when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 when mocked with atomic rate 10000000000000000000, src rate 100000000000000000000, dest rate 10000000000000000000, deviationFactor 5000000000000000000, lastExchangeRates sUSD                            : 10000000000000000000,sETH                            : 10000000000000000000 did not issue or burn synths" time="0.0000" classname="did not issue or burn synths">
    </testcase>
  </testsuite>
  <testsuite name="when mocked with atomic rate 10000000000000000000, src rate 10000000000000000000, dest rate 100000000000000000000, deviationFactor 5000000000000000000, lastExchangeRates sUSD                            : 10000000000000000000,sETH                            : 10000000000000000000" timestamp="2022-02-04T17:24:41" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="1.5030" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when exchange rates hit circuit breakers when mocked sUSD and sETH when mocked with valid exchange rates when mocked with no prior exchanges to settle when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 when mocked with atomic rate 10000000000000000000, src rate 10000000000000000000, dest rate 100000000000000000000, deviationFactor 5000000000000000000, lastExchangeRates sUSD                            : 10000000000000000000,sETH                            : 10000000000000000000 suspends dest synth" time="0.0010" classname="suspends dest synth">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when exchange rates hit circuit breakers when mocked sUSD and sETH when mocked with valid exchange rates when mocked with no prior exchanges to settle when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 when mocked with atomic rate 10000000000000000000, src rate 10000000000000000000, dest rate 100000000000000000000, deviationFactor 5000000000000000000, lastExchangeRates sUSD                            : 10000000000000000000,sETH                            : 10000000000000000000 did not issue or burn synths" time="0.0000" classname="did not issue or burn synths">
    </testcase>
  </testsuite>
  <testsuite name="when mocked with atomic rate 100000000000000000000, src rate 10000000000000000000, dest rate 10000000000000000000, deviationFactor 5000000000000000000, lastExchangeRates sUSD                            : 10000000000000000000,sETH                            : 10000000000000000000" timestamp="2022-02-04T17:24:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.6420" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when exchange rates hit circuit breakers when mocked sUSD and sETH when mocked with valid exchange rates when mocked with no prior exchanges to settle when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 when mocked with atomic rate 100000000000000000000, src rate 10000000000000000000, dest rate 10000000000000000000, deviationFactor 5000000000000000000, lastExchangeRates sUSD                            : 10000000000000000000,sETH                            : 10000000000000000000 reverts exchange" time="0.1000" classname="reverts exchange">
    </testcase>
  </testsuite>
  <testsuite name="when atomic exchange occurs (sUSD -&gt; sETH)" timestamp="2022-02-04T17:24:43" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked sUSD and sETH" timestamp="2022-02-04T17:24:43" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked fee pool" timestamp="2022-02-04T17:24:43" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked with valid exchange rates" timestamp="2022-02-04T17:24:43" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked with no prior exchanges to settle" timestamp="2022-02-04T17:24:43" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000" timestamp="2022-02-04T17:24:43" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000" timestamp="2022-02-04T17:24:43" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000" timestamp="2022-02-04T17:24:43" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when no exchange fees are configured" timestamp="2022-02-04T17:24:43" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when SystemSetting.tradingRewardsEnabled is mocked to false" timestamp="2022-02-04T17:24:43" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0" timestamp="2022-02-04T17:24:43" tests="10" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="7.5510" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when no exchange fees are configured when SystemSetting.tradingRewardsEnabled is mocked to false when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 burned correct amount of sUSD" time="0.0040" classname="burned correct amount of sUSD">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when no exchange fees are configured when SystemSetting.tradingRewardsEnabled is mocked to false when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 issued correct amount of sETH" time="0.0010" classname="issued correct amount of sETH">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when no exchange fees are configured when SystemSetting.tradingRewardsEnabled is mocked to false when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 tracked atomic volume" time="0.0170" classname="tracked atomic volume">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when no exchange fees are configured when SystemSetting.tradingRewardsEnabled is mocked to false when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 updated debt cache" time="0.0020" classname="updated debt cache">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when no exchange fees are configured when SystemSetting.tradingRewardsEnabled is mocked to false when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 asked Synthetix to emit an exchange event" time="0.0110" classname="asked Synthetix to emit an exchange event">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when no exchange fees are configured when SystemSetting.tradingRewardsEnabled is mocked to false when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 asked Synthetix to emit an atomic exchange event" time="0.0100" classname="asked Synthetix to emit an atomic exchange event">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when no exchange fees are configured when SystemSetting.tradingRewardsEnabled is mocked to false when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 did not add any fee reclamation entries to exchange state" time="0.0010" classname="did not add any fee reclamation entries to exchange state">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when no exchange fees are configured when SystemSetting.tradingRewardsEnabled is mocked to false when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 did not report a fee" time="0.0000" classname="did not report a fee">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when no exchange fees are configured when SystemSetting.tradingRewardsEnabled is mocked to false when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 did not report trading rewards" time="0.0000" classname="did not report trading rewards">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when no exchange fees are configured when SystemSetting.tradingRewardsEnabled is mocked to false when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 did not ask Synthetix to emit tracking event" time="0.0020" classname="did not ask Synthetix to emit tracking event">
    </testcase>
  </testsuite>
  <testsuite name="with tracking code" timestamp="2022-02-04T17:24:51" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when SystemSetting.tradingRewardsEnabled is mocked to false" timestamp="2022-02-04T17:24:51" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0" timestamp="2022-02-04T17:24:51" tests="10" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="6.0860" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 with tracking code when SystemSetting.tradingRewardsEnabled is mocked to false when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 burned correct amount of sUSD" time="0.0010" classname="burned correct amount of sUSD">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 with tracking code when SystemSetting.tradingRewardsEnabled is mocked to false when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 issued correct amount of sETH" time="0.0010" classname="issued correct amount of sETH">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 with tracking code when SystemSetting.tradingRewardsEnabled is mocked to false when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 tracked atomic volume" time="0.0070" classname="tracked atomic volume">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 with tracking code when SystemSetting.tradingRewardsEnabled is mocked to false when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 updated debt cache" time="0.0020" classname="updated debt cache">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 with tracking code when SystemSetting.tradingRewardsEnabled is mocked to false when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 asked Synthetix to emit an exchange event" time="0.0090" classname="asked Synthetix to emit an exchange event">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 with tracking code when SystemSetting.tradingRewardsEnabled is mocked to false when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 asked Synthetix to emit an atomic exchange event" time="0.0090" classname="asked Synthetix to emit an atomic exchange event">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 with tracking code when SystemSetting.tradingRewardsEnabled is mocked to false when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 did not add any fee reclamation entries to exchange state" time="0.0010" classname="did not add any fee reclamation entries to exchange state">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 with tracking code when SystemSetting.tradingRewardsEnabled is mocked to false when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 did not report a fee" time="0.0000" classname="did not report a fee">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 with tracking code when SystemSetting.tradingRewardsEnabled is mocked to false when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 did not report trading rewards" time="0.0000" classname="did not report trading rewards">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 with tracking code when SystemSetting.tradingRewardsEnabled is mocked to false when SystemSetting.exchangeFeeRate for sETH                             is mocked to 0 asked Synthetix to emit tracking event" time="0.0010" classname="asked Synthetix to emit tracking event">
    </testcase>
  </testsuite>
  <testsuite name="when an exchange fee is configured" timestamp="2022-02-04T17:24:57" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when SystemSetting.tradingRewardsEnabled is mocked to true" timestamp="2022-02-04T17:24:57" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when SystemSetting.exchangeFeeRate for sETH                             is mocked to 3000000000000000" timestamp="2022-02-04T17:24:57" tests="10" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="6.5610" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when an exchange fee is configured when SystemSetting.tradingRewardsEnabled is mocked to true when SystemSetting.exchangeFeeRate for sETH                             is mocked to 3000000000000000 burned correct amount of sUSD" time="0.0010" classname="burned correct amount of sUSD">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when an exchange fee is configured when SystemSetting.tradingRewardsEnabled is mocked to true when SystemSetting.exchangeFeeRate for sETH                             is mocked to 3000000000000000 issued correct amount of sETH" time="0.0000" classname="issued correct amount of sETH">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when an exchange fee is configured when SystemSetting.tradingRewardsEnabled is mocked to true when SystemSetting.exchangeFeeRate for sETH                             is mocked to 3000000000000000 tracked atomic volume" time="0.0050" classname="tracked atomic volume">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when an exchange fee is configured when SystemSetting.tradingRewardsEnabled is mocked to true when SystemSetting.exchangeFeeRate for sETH                             is mocked to 3000000000000000 updated debt cache" time="0.0010" classname="updated debt cache">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when an exchange fee is configured when SystemSetting.tradingRewardsEnabled is mocked to true when SystemSetting.exchangeFeeRate for sETH                             is mocked to 3000000000000000 asked Synthetix to emit an exchange event" time="0.0060" classname="asked Synthetix to emit an exchange event">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when an exchange fee is configured when SystemSetting.tradingRewardsEnabled is mocked to true when SystemSetting.exchangeFeeRate for sETH                             is mocked to 3000000000000000 asked Synthetix to emit an atomic exchange event" time="0.0060" classname="asked Synthetix to emit an atomic exchange event">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when an exchange fee is configured when SystemSetting.tradingRewardsEnabled is mocked to true when SystemSetting.exchangeFeeRate for sETH                             is mocked to 3000000000000000 did not add any fee reclamation entries to exchange state" time="0.0010" classname="did not add any fee reclamation entries to exchange state">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when an exchange fee is configured when SystemSetting.tradingRewardsEnabled is mocked to true when SystemSetting.exchangeFeeRate for sETH                             is mocked to 3000000000000000 remitted correct fee to fee pool" time="0.0020" classname="remitted correct fee to fee pool">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when an exchange fee is configured when SystemSetting.tradingRewardsEnabled is mocked to true when SystemSetting.exchangeFeeRate for sETH                             is mocked to 3000000000000000 reported trading rewards" time="0.0010" classname="reported trading rewards">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when an exchange fee is configured when SystemSetting.tradingRewardsEnabled is mocked to true when SystemSetting.exchangeFeeRate for sETH                             is mocked to 3000000000000000 did not ask Synthetix to emit tracking event" time="0.0010" classname="did not ask Synthetix to emit tracking event">
    </testcase>
  </testsuite>
  <testsuite name="when an exchange fee override for atomic exchanges is configured" timestamp="2022-02-04T17:25:03" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when SystemSetting.tradingRewardsEnabled is mocked to true" timestamp="2022-02-04T17:25:03" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when SystemSetting.atomicExchangeFeeRate for sETH                             is mocked to 10000000000000000" timestamp="2022-02-04T17:25:03" tests="10" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangerWithFeeRecAlternatives.unit.js" time="7.8520" failures="0">
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when an exchange fee override for atomic exchanges is configured when SystemSetting.tradingRewardsEnabled is mocked to true when SystemSetting.atomicExchangeFeeRate for sETH                             is mocked to 10000000000000000 burned correct amount of sUSD" time="0.0020" classname="burned correct amount of sUSD">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when an exchange fee override for atomic exchanges is configured when SystemSetting.tradingRewardsEnabled is mocked to true when SystemSetting.atomicExchangeFeeRate for sETH                             is mocked to 10000000000000000 issued correct amount of sETH" time="0.0010" classname="issued correct amount of sETH">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when an exchange fee override for atomic exchanges is configured when SystemSetting.tradingRewardsEnabled is mocked to true when SystemSetting.atomicExchangeFeeRate for sETH                             is mocked to 10000000000000000 tracked atomic volume" time="0.0100" classname="tracked atomic volume">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when an exchange fee override for atomic exchanges is configured when SystemSetting.tradingRewardsEnabled is mocked to true when SystemSetting.atomicExchangeFeeRate for sETH                             is mocked to 10000000000000000 updated debt cache" time="0.0020" classname="updated debt cache">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when an exchange fee override for atomic exchanges is configured when SystemSetting.tradingRewardsEnabled is mocked to true when SystemSetting.atomicExchangeFeeRate for sETH                             is mocked to 10000000000000000 asked Synthetix to emit an exchange event" time="0.0050" classname="asked Synthetix to emit an exchange event">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when an exchange fee override for atomic exchanges is configured when SystemSetting.tradingRewardsEnabled is mocked to true when SystemSetting.atomicExchangeFeeRate for sETH                             is mocked to 10000000000000000 asked Synthetix to emit an atomic exchange event" time="0.0060" classname="asked Synthetix to emit an atomic exchange event">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when an exchange fee override for atomic exchanges is configured when SystemSetting.tradingRewardsEnabled is mocked to true when SystemSetting.atomicExchangeFeeRate for sETH                             is mocked to 10000000000000000 did not add any fee reclamation entries to exchange state" time="0.0010" classname="did not add any fee reclamation entries to exchange state">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when an exchange fee override for atomic exchanges is configured when SystemSetting.tradingRewardsEnabled is mocked to true when SystemSetting.atomicExchangeFeeRate for sETH                             is mocked to 10000000000000000 remitted correct fee to fee pool" time="0.0010" classname="remitted correct fee to fee pool">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when an exchange fee override for atomic exchanges is configured when SystemSetting.tradingRewardsEnabled is mocked to true when SystemSetting.atomicExchangeFeeRate for sETH                             is mocked to 10000000000000000 reported trading rewards" time="0.0010" classname="reported trading rewards">
    </testcase>
    <testcase name="Contract: ExchangerWithFeeRecAlternatives (unit tests) when a contract is instantiated when instantiated exchanging exchange atomically when atomic exchange occurs (sUSD -&gt; sETH) when mocked sUSD and sETH when mocked fee pool when mocked with valid exchange rates when mocked with no prior exchanges to settle when mocked with atomic rate 100000000000000000000, src rate 1000000000000000000, dest rate 100000000000000000000, deviationFactor 1000000000000000001, lastExchangeRates sUSD                            : 1000000000000000000,sETH                            : 100000000000000000000 when SystemSetting.exchangeMaxDynamicFee is mocked to 1000000000000000000 when SystemSetting.atomicMaxVolumePerBlock is mocked to 1000000000000000000000000 when an exchange fee override for atomic exchanges is configured when SystemSetting.tradingRewardsEnabled is mocked to true when SystemSetting.atomicExchangeFeeRate for sETH                             is mocked to 10000000000000000 did not ask Synthetix to emit tracking event" time="0.0010" classname="did not ask Synthetix to emit tracking event">
    </testcase>
  </testsuite>
  <testsuite name="Contract: ExchangeState" timestamp="2022-02-04T17:25:11" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeState.js" time="0.0000" failures="0">
    <testcase name="Contract: ExchangeState ensure only known functions are mutative" time="0.0320" classname="ensure only known functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="setMaxEntriesInQueue()" timestamp="2022-02-04T17:25:11" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeState.js" time="0.0000" failures="0">
    <testcase name="Contract: ExchangeState setMaxEntriesInQueue() can only be invoked by the owner" time="0.4880" classname="can only be invoked by the owner">
    </testcase>
  </testsuite>
  <testsuite name="when an owner invokes the function with 3" timestamp="2022-02-04T17:25:12" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeState.js" time="0.1300" failures="0">
    <testcase name="Contract: ExchangeState setMaxEntriesInQueue() when an owner invokes the function with 3 then 3 is the max number of entries possible" time="0.0970" classname="then 3 is the max number of entries possible">
    </testcase>
  </testsuite>
  <testsuite name="adding, removing, selecting and length of entries" timestamp="2022-02-04T17:25:12" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeState.js" time="0.0000" failures="0">
    <testcase name="Contract: ExchangeState adding, removing, selecting and length of entries the length is 0 by default" time="0.0070" classname="the length is 0 by default">
    </testcase>
    <testcase name="Contract: ExchangeState adding, removing, selecting and length of entries only the associated contract can invoke appendExchangeEntry()" time="0.4860" classname="only the associated contract can invoke appendExchangeEntry()">
    </testcase>
    <testcase name="Contract: ExchangeState adding, removing, selecting and length of entries only the associated contract can invoke removeEntries()" time="0.4490" classname="only the associated contract can invoke removeEntries()">
    </testcase>
  </testsuite>
  <testsuite name="when an entry is added to sBTC for the first user" timestamp="2022-02-04T17:25:13" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeState.js" time="0.0000" failures="0">
    <testcase name="Contract: ExchangeState adding, removing, selecting and length of entries when an entry is added to sBTC for the first user then the length is 1 for that user and synth" time="0.0060" classname="then the length is 1 for that user and synth">
    </testcase>
    <testcase name="Contract: ExchangeState adding, removing, selecting and length of entries when an entry is added to sBTC for the first user and the length is 0 for other conditions" time="0.0160" classname="and the length is 0 for other conditions">
    </testcase>
  </testsuite>
  <testsuite name="when the entry is fetch by index 0" timestamp="2022-02-04T17:25:13" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeState.js" time="0.0510" failures="0">
    <testcase name="Contract: ExchangeState adding, removing, selecting and length of entries when an entry is added to sBTC for the first user when the entry is fetch by index 0 then it returns as expected" time="0.0000" classname="then it returns as expected">
    </testcase>
  </testsuite>
  <testsuite name="when another entry is added for the same user and synth" timestamp="2022-02-04T17:25:13" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeState.js" time="0.0000" failures="0">
    <testcase name="Contract: ExchangeState adding, removing, selecting and length of entries when an entry is added to sBTC for the first user when another entry is added for the same user and synth then the length is 2 for that user and synth" time="0.0080" classname="then the length is 2 for that user and synth">
    </testcase>
  </testsuite>
  <testsuite name="when the entry is fetch by index 0 again" timestamp="2022-02-04T17:25:13" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeState.js" time="0.0630" failures="0">
    <testcase name="Contract: ExchangeState adding, removing, selecting and length of entries when an entry is added to sBTC for the first user when another entry is added for the same user and synth when the entry is fetch by index 0 again then it returns as expected" time="0.0000" classname="then it returns as expected">
    </testcase>
  </testsuite>
  <testsuite name="when the entry is fetch by index 1" timestamp="2022-02-04T17:25:13" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeState.js" time="0.0590" failures="0">
    <testcase name="Contract: ExchangeState adding, removing, selecting and length of entries when an entry is added to sBTC for the first user when another entry is added for the same user and synth when the entry is fetch by index 1 then it returns the new entry as expected" time="0.0000" classname="then it returns the new entry as expected">
    </testcase>
  </testsuite>
  <testsuite name="when all entries are removed for that user and synth" timestamp="2022-02-04T17:25:13" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeState.js" time="0.0970" failures="0">
    <testcase name="Contract: ExchangeState adding, removing, selecting and length of entries when an entry is added to sBTC for the first user when another entry is added for the same user and synth when all entries are removed for that user and synth then the length is 0 for that user and synth" time="0.0090" classname="then the length is 0 for that user and synth">
    </testcase>
  </testsuite>
  <testsuite name="getMaxTimestamp()" timestamp="2022-02-04T17:25:13" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeState.js" time="0.0000" failures="0">
    <testcase name="Contract: ExchangeState getMaxTimestamp() returns 0 when no entries" time="0.0060" classname="returns 0 when no entries">
    </testcase>
  </testsuite>
  <testsuite name="when there is a single entry with timestamp 100" timestamp="2022-02-04T17:25:13" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeState.js" time="0.0000" failures="0">
    <testcase name="Contract: ExchangeState getMaxTimestamp() when there is a single entry with timestamp 100 then getMaxTimestamp() must return 100" time="0.0070" classname="then getMaxTimestamp() must return 100">
    </testcase>
  </testsuite>
  <testsuite name="when there is another entry with a different src and with timestamp 101" timestamp="2022-02-04T17:25:13" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeState.js" time="0.0000" failures="0">
    <testcase name="Contract: ExchangeState getMaxTimestamp() when there is a single entry with timestamp 100 when there is another entry with a different src and with timestamp 101 then getMaxTimestamp() must return 101" time="0.0060" classname="then getMaxTimestamp() must return 101">
    </testcase>
  </testsuite>
  <testsuite name="when there is a another entry with timestamp 50" timestamp="2022-02-04T17:25:13" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeState.js" time="0.0000" failures="0">
    <testcase name="Contract: ExchangeState getMaxTimestamp() when there is a single entry with timestamp 100 when there is another entry with a different src and with timestamp 101 when there is a another entry with timestamp 50 then getMaxTimestamp() must return 101" time="0.0090" classname="then getMaxTimestamp() must return 101">
    </testcase>
  </testsuite>
  <testsuite name="when there are unrelated entries at higher timestamps than 101" timestamp="2022-02-04T17:25:13" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExchangeState.js" time="0.1180" failures="0">
    <testcase name="Contract: ExchangeState getMaxTimestamp() when there is a single entry with timestamp 100 when there is another entry with a different src and with timestamp 101 when there is a another entry with timestamp 50 when there are unrelated entries at higher timestamps than 101 then getMaxTimestamp() must still return 101" time="0.0080" classname="then getMaxTimestamp() must still return 101">
    </testcase>
  </testsuite>
  <testsuite name="Contract: ExternStateToken" timestamp="2022-02-04T17:25:14" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExternStateToken.js" time="0.0000" failures="0">
    <testcase name="Contract: ExternStateToken on instantiation, all parameters are set" time="0.0470" classname="on instantiation, all parameters are set">
    </testcase>
    <testcase name="Contract: ExternStateToken ensure only known functions are mutative" time="0.0250" classname="ensure only known functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="setTokenState" timestamp="2022-02-04T17:25:14" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExternStateToken.js" time="0.7950" failures="0">
    <testcase name="Contract: ExternStateToken setTokenState can only be invoked by the owner" time="0.4810" classname="can only be invoked by the owner">
    </testcase>
    <testcase name="Contract: ExternStateToken setTokenState when invoked, changes the token state" time="0.0380" classname="when invoked, changes the token state">
    </testcase>
  </testsuite>
  <testsuite name="approve() and allowance()" timestamp="2022-02-04T17:25:15" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExternStateToken.js" time="0.3800" failures="0">
    <testcase name="Contract: ExternStateToken approve() and allowance() when invoked, changes the approval" time="0.0470" classname="when invoked, changes the approval">
    </testcase>
    <testcase name="Contract: ExternStateToken approve() and allowance() when invoked on the proxy, changes the approval" time="0.0340" classname="when invoked on the proxy, changes the approval">
    </testcase>
  </testsuite>
  <testsuite name="when extended into a test class" timestamp="2022-02-04T17:25:15" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExternStateToken.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when account1 has 100 units" timestamp="2022-02-04T17:25:15" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExternStateToken.js" time="0.0000" failures="0">
    <testcase name="Contract: ExternStateToken when extended into a test class when account1 has 100 units when account1 transfers to account2, it works as expected" time="0.0640" classname="when account1 transfers to account2, it works as expected">
    </testcase>
    <testcase name="Contract: ExternStateToken when extended into a test class when account1 has 100 units when account1 transfers to account2, it works as expected" time="0.0660" classname="when account1 transfers to account2, it works as expected">
    </testcase>
  </testsuite>
  <testsuite name="when account1 approves account2 to transfer from" timestamp="2022-02-04T17:25:16" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExternStateToken.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when account 2 transferFrom the approved amount" timestamp="2022-02-04T17:25:16" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExternStateToken.js" time="0.3680" failures="0">
    <testcase name="Contract: ExternStateToken when extended into a test class when account1 has 100 units when account1 approves account2 to transfer from when account 2 transferFrom the approved amount then it works as expected" time="0.0930" classname="then it works as expected">
    </testcase>
  </testsuite>
  <testsuite name="when account 2 transferFrom via the proxy of the approved amount" timestamp="2022-02-04T17:25:16" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ExternStateToken.js" time="0.3820" failures="0">
    <testcase name="Contract: ExternStateToken when extended into a test class when account1 has 100 units when account1 approves account2 to transfer from when account 2 transferFrom via the proxy of the approved amount then it works as expected" time="0.0950" classname="then it works as expected">
    </testcase>
  </testsuite>
  <testsuite name="Contract: FeePool" timestamp="2022-02-04T17:25:16" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.0000" failures="0">
    <testcase name="Contract: FeePool ensure only known functions are mutative" time="0.0770" classname="ensure only known functions are mutative">
    </testcase>
    <testcase name="Contract: FeePool should set constructor params on deployment" time="0.1160" classname="should set constructor params on deployment">
    </testcase>
    <testcase name="Contract: FeePool issuance ratio is correctly configured as a default" time="0.0080" classname="issuance ratio is correctly configured as a default">
    </testcase>
    <testcase name="Contract: FeePool the default is set correctly" time="0.0080" classname="the default is set correctly">
    </testcase>
    <testcase name="Contract: FeePool fee period duration is correctly configured as a default" time="0.0100" classname="fee period duration is correctly configured as a default">
    </testcase>
  </testsuite>
  <testsuite name="restricted methods" timestamp="2022-02-04T17:25:26" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="1.5240" failures="0">
    <testcase name="Contract: FeePool restricted methods setRewardsToDistribute() cannot be called by an unauthorized account" time="0.6390" classname="setRewardsToDistribute() cannot be called by an unauthorized account">
    </testcase>
    <testcase name="Contract: FeePool restricted methods appendAccountIssuanceRecord() cannot be invoked directly by any account" time="0.5500" classname="appendAccountIssuanceRecord() cannot be invoked directly by any account">
    </testcase>
  </testsuite>
  <testsuite name="when the issuanceRatio is 0.2" timestamp="2022-02-04T17:25:28" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.0000" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 should track fee withdrawals correctly" time="1.7300" classname="should track fee withdrawals correctly">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 should correctly calculate the totalFeesAvailable for a single open period" time="0.5880" classname="should correctly calculate the totalFeesAvailable for a single open period">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 should correctly calculate the totalFeesAvailable for multiple periods" time="1.2600" classname="should correctly calculate the totalFeesAvailable for multiple periods">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 should correctly calculate the feesAvailable for a single user in an open period" time="1.1100" classname="should correctly calculate the feesAvailable for a single user in an open period">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 should correctly calculate the feesAvailable for a single user in multiple periods when fees are partially claimed" time="1.7930" classname="should correctly calculate the feesAvailable for a single user in multiple periods when fees are partially claimed">
    </testcase>
  </testsuite>
  <testsuite name="closeCurrentFeePeriod()" timestamp="2022-02-04T17:25:35" tests="9" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.0000" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 closeCurrentFeePeriod() should allow account1 to close the current fee period" time="0.1670" classname="should allow account1 to close the current fee period">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 closeCurrentFeePeriod() should import feePeriods and close the current fee period correctly" time="0.1400" classname="should import feePeriods and close the current fee period correctly">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 closeCurrentFeePeriod() should allow the feePoolProxy to close feePeriod" time="0.0790" classname="should allow the feePoolProxy to close feePeriod">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 closeCurrentFeePeriod() should correctly roll over unclaimed fees when closing fee periods" time="0.4180" classname="should correctly roll over unclaimed fees when closing fee periods">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 closeCurrentFeePeriod() should correctly close the current fee period when there are more than FEE_PERIOD_LENGTH periods" time="1.2670" classname="should correctly close the current fee period when there are more than FEE_PERIOD_LENGTH periods">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 closeCurrentFeePeriod() should correctly close the current fee period when there is only one fee period open" time="0.4000" classname="should correctly close the current fee period when there is only one fee period open">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 closeCurrentFeePeriod() should disallow closing the current fee period too early" time="0.2320" classname="should disallow closing the current fee period too early">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 closeCurrentFeePeriod() should allow closing the current fee period very late" time="0.2020" classname="should allow closing the current fee period very late">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 closeCurrentFeePeriod() should receive fees from WrapperFactory" time="0.4380" classname="should receive fees from WrapperFactory">
    </testcase>
  </testsuite>
  <testsuite name="fee period duration not set" timestamp="2022-02-04T17:25:41" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.3450" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 closeCurrentFeePeriod() fee period duration not set when closeFeePeriod() is invoked, it reverts with Fee Period Duration not set" time="0.0320" classname="when closeFeePeriod() is invoked, it reverts with Fee Period Duration not set">
    </testcase>
  </testsuite>
  <testsuite name="suspension conditions" timestamp="2022-02-04T17:25:41" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:25:41" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.0000" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 closeCurrentFeePeriod() suspension conditions when System is suspended then calling closeCurrentFeePeriod() reverts" time="0.0410" classname="then calling closeCurrentFeePeriod() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:25:41" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.4000" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 closeCurrentFeePeriod() suspension conditions when System is suspended when System is resumed then calling closeCurrentFeePeriod() succeeds" time="0.1960" classname="then calling closeCurrentFeePeriod() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is suspended" timestamp="2022-02-04T17:25:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.0000" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 closeCurrentFeePeriod() suspension conditions when Issuance is suspended then calling closeCurrentFeePeriod() reverts" time="0.0430" classname="then calling closeCurrentFeePeriod() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is resumed" timestamp="2022-02-04T17:25:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.3800" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 closeCurrentFeePeriod() suspension conditions when Issuance is suspended when Issuance is resumed then calling closeCurrentFeePeriod() succeeds" time="0.1740" classname="then calling closeCurrentFeePeriod() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="claimFees()" timestamp="2022-02-04T17:25:42" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.0000" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimFees() should allow a user to claim their fees in sUSD @gasprofile" time="3.2750" classname="should allow a user to claim their fees in sUSD @gasprofile">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimFees() should allow a user to claim their fees if they minted debt during period" time="1.4220" classname="should allow a user to claim their fees if they minted debt during period">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimFees() should allow a user to claim their fees in sUSD (as half of total) after some exchanging" time="2.1300" classname="should allow a user to claim their fees in sUSD (as half of total) after some exchanging">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimFees() should revert when a user tries to double claim their fees" time="1.1080" classname="should revert when a user tries to double claim their fees">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimFees() should revert when a user has no fees to claim but tries to claim them" time="0.1030" classname="should revert when a user has no fees to claim but tries to claim them">
    </testcase>
  </testsuite>
  <testsuite name="potential blocking conditions" timestamp="2022-02-04T17:25:51" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:25:51" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.0000" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimFees() potential blocking conditions when System is suspended then calling claimFees() reverts" time="0.0190" classname="then calling claimFees() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:25:52" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.7490" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimFees() potential blocking conditions when System is suspended when System is resumed then calling claimFees() succeeds" time="0.1010" classname="then calling claimFees() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is suspended" timestamp="2022-02-04T17:25:53" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.0000" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimFees() potential blocking conditions when Issuance is suspended then calling claimFees() reverts" time="0.0420" classname="then calling claimFees() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is resumed" timestamp="2022-02-04T17:25:54" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.9090" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimFees() potential blocking conditions when Issuance is suspended when Issuance is resumed then calling claimFees() succeeds" time="0.1100" classname="then calling claimFees() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when SNX is stale" timestamp="2022-02-04T17:25:54" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="1.0300" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimFees() potential blocking conditions when SNX is stale reverts on claimFees" time="0.1050" classname="reverts on claimFees">
    </testcase>
  </testsuite>
  <testsuite name="when sAUD is stale" timestamp="2022-02-04T17:25:55" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="1.0170" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimFees() potential blocking conditions when sAUD is stale reverts on claimFees" time="0.1170" classname="reverts on claimFees">
    </testcase>
  </testsuite>
  <testsuite name="when SNX,sAUD is stale" timestamp="2022-02-04T17:25:56" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.9230" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimFees() potential blocking conditions when SNX,sAUD is stale reverts on claimFees" time="0.1120" classname="reverts on claimFees">
    </testcase>
  </testsuite>
  <testsuite name="when none is stale" timestamp="2022-02-04T17:25:57" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="1.0100" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimFees() potential blocking conditions when none is stale allows claimFees" time="0.1170" classname="allows claimFees">
    </testcase>
  </testsuite>
  <testsuite name="FeeClaimablePenaltyThreshold" timestamp="2022-02-04T17:25:58" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="6.5620" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 FeeClaimablePenaltyThreshold should set the targetThreshold and getPenaltyThresholdRatio returns the c-ratio user is blocked at" time="0.0560" classname="should set the targetThreshold and getPenaltyThresholdRatio returns the c-ratio user is blocked at">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 FeeClaimablePenaltyThreshold should set the targetThreshold buffer to 5%, at issuanceRatio 0.2 getPenaltyThresholdRatio returns 0.21" time="0.0540" classname="should set the targetThreshold buffer to 5%, at issuanceRatio 0.2 getPenaltyThresholdRatio returns 0.21">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 FeeClaimablePenaltyThreshold should be no penalty if issuance ratio is less than target ratio" time="0.2850" classname="should be no penalty if issuance ratio is less than target ratio">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 FeeClaimablePenaltyThreshold should correctly calculate the 10% buffer for penalties at specific issuance ratios" time="2.3740" classname="should correctly calculate the 10% buffer for penalties at specific issuance ratios">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 FeeClaimablePenaltyThreshold should revert when users try to claim fees with &gt; 10% of threshold" time="1.2900" classname="should revert when users try to claim fees with &gt; 10% of threshold">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 FeeClaimablePenaltyThreshold should be able to set the Target threshold to 15% and claim fees" time="1.3200" classname="should be able to set the Target threshold to 15% and claim fees">
    </testcase>
  </testsuite>
  <testsuite name="effectiveDebtRatioForPeriod" timestamp="2022-02-04T17:26:05" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.3900" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 effectiveDebtRatioForPeriod should revert if period is &gt; than FEE_PERIOD_LENGTH" time="0.0120" classname="should revert if period is &gt; than FEE_PERIOD_LENGTH">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 effectiveDebtRatioForPeriod should revert if checking current unclosed period " time="0.0070" classname="should revert if checking current unclosed period ">
    </testcase>
  </testsuite>
  <testsuite name="claimOnBehalf" timestamp="2022-02-04T17:26:05" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.0000" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimOnBehalf should approve a claim on behalf for account1 by account2 and have fees in wallet" time="0.7700" classname="should approve a claim on behalf for account1 by account2 and have fees in wallet">
    </testcase>
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimOnBehalf should revert if account2 tries to claimOnBehalf without approval" time="0.5790" classname="should revert if account2 tries to claimOnBehalf without approval">
    </testcase>
  </testsuite>
  <testsuite name="potential blocking conditions" timestamp="2022-02-04T17:26:07" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:26:07" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.0000" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimOnBehalf potential blocking conditions when System is suspended then calling claimOnBehalf() reverts" time="0.0220" classname="then calling claimOnBehalf() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:26:08" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="1.8290" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimOnBehalf potential blocking conditions when System is suspended when System is resumed then calling claimOnBehalf() succeeds" time="0.1050" classname="then calling claimOnBehalf() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is suspended" timestamp="2022-02-04T17:26:10" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.0000" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimOnBehalf potential blocking conditions when Issuance is suspended then calling claimOnBehalf() reverts" time="0.0200" classname="then calling claimOnBehalf() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is resumed" timestamp="2022-02-04T17:26:10" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.8460" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimOnBehalf potential blocking conditions when Issuance is suspended when Issuance is resumed then calling claimOnBehalf() succeeds" time="0.0950" classname="then calling claimOnBehalf() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when SNX is stale" timestamp="2022-02-04T17:26:11" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.9530" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimOnBehalf potential blocking conditions when SNX is stale reverts on claimFees" time="0.0960" classname="reverts on claimFees">
    </testcase>
  </testsuite>
  <testsuite name="when sAUD is stale" timestamp="2022-02-04T17:26:12" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.9650" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimOnBehalf potential blocking conditions when sAUD is stale reverts on claimFees" time="0.1170" classname="reverts on claimFees">
    </testcase>
  </testsuite>
  <testsuite name="when SNX,sAUD is stale" timestamp="2022-02-04T17:26:13" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.9330" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimOnBehalf potential blocking conditions when SNX,sAUD is stale reverts on claimFees" time="0.1340" classname="reverts on claimFees">
    </testcase>
  </testsuite>
  <testsuite name="when none is stale" timestamp="2022-02-04T17:26:14" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="0.9390" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 claimOnBehalf potential blocking conditions when none is stale allows claimFees" time="0.1480" classname="allows claimFees">
    </testcase>
  </testsuite>
  <testsuite name="reducing FEE_PERIOD_LENGTHS" timestamp="2022-02-04T17:26:15" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePool.js" time="3.6620" failures="0">
    <testcase name="Contract: FeePool when the issuanceRatio is 0.2 reducing FEE_PERIOD_LENGTHS should be able to get fees available when feePoolState issuanceData is 6 blocks" time="3.4910" classname="should be able to get fees available when feePoolState issuanceData is 6 blocks">
    </testcase>
  </testsuite>
  <testsuite name="Contract: FeePoolEternalStorage" timestamp="2022-02-04T17:26:19" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePoolEternalStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FeePoolEternalStorage should revert when owner parameter is passed the zero address" time="0.0210" classname="should revert when owner parameter is passed the zero address">
    </testcase>
    <testcase name="Contract: FeePoolEternalStorage should set owner address on deployment" time="0.0160" classname="should set owner address on deployment">
    </testcase>
  </testsuite>
  <testsuite name="given an instance" timestamp="2022-02-04T17:26:20" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePoolEternalStorage.js" time="0.1270" failures="0">
    <testcase name="Contract: FeePoolEternalStorage given an instance when array lengths dont match then revert" time="0.0190" classname="when array lengths dont match then revert">
    </testcase>
    <testcase name="Contract: FeePoolEternalStorage given an instance when importFeeWithdrawalData then it is accessable via feePool.getLastFeeWithdrawal" time="0.0730" classname="when importFeeWithdrawalData then it is accessable via feePool.getLastFeeWithdrawal">
    </testcase>
  </testsuite>
  <testsuite name="Contract: FeePoolState" timestamp="2022-02-04T17:26:21" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePoolState.js" time="0.0000" failures="0">
    <testcase name="Contract: FeePoolState ensure only known functions are mutative" time="0.0500" classname="ensure only known functions are mutative">
    </testcase>
    <testcase name="Contract: FeePoolState should set constructor params on deployment" time="0.0150" classname="should set constructor params on deployment">
    </testcase>
  </testsuite>
  <testsuite name="setFeePool()" timestamp="2022-02-04T17:26:21" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePoolState.js" time="0.4970" failures="0">
    <testcase name="Contract: FeePoolState setFeePool() can only be invoked by the owner" time="0.4740" classname="can only be invoked by the owner">
    </testcase>
  </testsuite>
  <testsuite name="Appending Account issuance record" timestamp="2022-02-04T17:26:21" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FeePoolState.js" time="1.2950" failures="0">
    <testcase name="Contract: FeePoolState Appending Account issuance record should return the issuanceData that exists that is within the closingDebtIndex via applicableIssuanceData" time="0.2170" classname="should return the issuanceData that exists that is within the closingDebtIndex via applicableIssuanceData">
    </testcase>
    <testcase name="Contract: FeePoolState Appending Account issuance record should return the issuanceData for an account given an index" time="0.0510" classname="should return the issuanceData for an account given an index">
    </testcase>
    <testcase name="Contract: FeePoolState Appending Account issuance record should importIssuerData" time="0.0670" classname="should importIssuerData">
    </testcase>
    <testcase name="Contract: FeePoolState Appending Account issuance record should append account issuance record for curent feePeriod" time="0.0450" classname="should append account issuance record for curent feePeriod">
    </testcase>
    <testcase name="Contract: FeePoolState Appending Account issuance record should append account issuance record twice for each feePeriod, up to feePeriod length" time="0.2800" classname="should append account issuance record twice for each feePeriod, up to feePeriod length">
    </testcase>
    <testcase name="Contract: FeePoolState Appending Account issuance record should append account issuance record twice for each feePeriod, beyond the fee period length" time="0.4400" classname="should append account issuance record twice for each feePeriod, beyond the fee period length">
    </testcase>
  </testsuite>
  <testsuite name="Contract: FlexibleStorage" timestamp="2022-02-04T17:26:22" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage ensure only known functions are mutative" time="0.0250" classname="ensure only known functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="UInt" timestamp="2022-02-04T17:26:23" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="get()" timestamp="2022-02-04T17:26:23" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage UInt get() returns unset by default" time="0.0340" classname="returns unset by default">
    </testcase>
  </testsuite>
  <testsuite name="when ContractA is added to the AddressResolver" timestamp="2022-02-04T17:26:23" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when there are some values stored in ContractA" timestamp="2022-02-04T17:26:23" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.2000" failures="0">
    <testcase name="Contract: FlexibleStorage UInt get() when ContractA is added to the AddressResolver when there are some values stored in ContractA then the values are gettable" time="0.0230" classname="then the values are gettable">
    </testcase>
    <testcase name="Contract: FlexibleStorage UInt get() when ContractA is added to the AddressResolver when there are some values stored in ContractA but not from other contracts" time="0.0230" classname="but not from other contracts">
    </testcase>
  </testsuite>
  <testsuite name="set()" timestamp="2022-02-04T17:26:23" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage UInt set() when invoked by a non-contract, fails immediately" time="0.5210" classname="when invoked by a non-contract, fails immediately">
    </testcase>
  </testsuite>
  <testsuite name="when ContractA is added to the AddressResolver" timestamp="2022-02-04T17:26:23" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage UInt set() when ContractA is added to the AddressResolver then only contract A can invoke a set()" time="0.5470" classname="then only contract A can invoke a set()">
    </testcase>
    <testcase name="Contract: FlexibleStorage UInt set() when ContractA is added to the AddressResolver and setting emits an event" time="0.0310" classname="and setting emits an event">
    </testcase>
    <testcase name="Contract: FlexibleStorage UInt set() when ContractA is added to the AddressResolver and setting mulitple entries emits multiple events" time="0.0180" classname="and setting mulitple entries emits multiple events">
    </testcase>
  </testsuite>
  <testsuite name="when contract A has record A" timestamp="2022-02-04T17:26:24" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when another contract replaces one in the address resolver" timestamp="2022-02-04T17:26:24" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the other contract adds a record" timestamp="2022-02-04T17:26:24" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0910" failures="0">
    <testcase name="Contract: FlexibleStorage UInt set() when ContractA is added to the AddressResolver when contract A has record A when another contract replaces one in the address resolver when the other contract adds a record then both exist on contract A" time="0.0060" classname="then both exist on contract A">
    </testcase>
  </testsuite>
  <testsuite name="delete()" timestamp="2022-02-04T17:26:24" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage UInt delete() when invoked by a non-contract, fails immediately" time="0.5010" classname="when invoked by a non-contract, fails immediately">
    </testcase>
  </testsuite>
  <testsuite name="when ContractA is added to the AddressResolver" timestamp="2022-02-04T17:26:25" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage UInt delete() when ContractA is added to the AddressResolver then only contract A can invoke a delete()" time="0.4800" classname="then only contract A can invoke a delete()">
    </testcase>
    <testcase name="Contract: FlexibleStorage UInt delete() when ContractA is added to the AddressResolver and deleting emits an event" time="0.0170" classname="and deleting emits an event">
    </testcase>
  </testsuite>
  <testsuite name="when a value exists for recordA" timestamp="2022-02-04T17:26:25" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when recordA is deleted" timestamp="2022-02-04T17:26:25" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.2470" failures="0">
    <testcase name="Contract: FlexibleStorage UInt delete() when ContractA is added to the AddressResolver when a value exists for recordA when recordA is deleted then deletion ensures that value is removed" time="0.0050" classname="then deletion ensures that value is removed">
    </testcase>
    <testcase name="Contract: FlexibleStorage UInt delete() when ContractA is added to the AddressResolver when a value exists for recordA when recordA is deleted and the emitted event contains the deleted value" time="0.0000" classname="and the emitted event contains the deleted value">
    </testcase>
  </testsuite>
  <testsuite name="Int" timestamp="2022-02-04T17:26:26" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="get()" timestamp="2022-02-04T17:26:26" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage Int get() returns unset by default" time="0.0360" classname="returns unset by default">
    </testcase>
  </testsuite>
  <testsuite name="when ContractA is added to the AddressResolver" timestamp="2022-02-04T17:26:26" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when there are some values stored in ContractA" timestamp="2022-02-04T17:26:26" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.2500" failures="0">
    <testcase name="Contract: FlexibleStorage Int get() when ContractA is added to the AddressResolver when there are some values stored in ContractA then the values are gettable" time="0.0420" classname="then the values are gettable">
    </testcase>
    <testcase name="Contract: FlexibleStorage Int get() when ContractA is added to the AddressResolver when there are some values stored in ContractA but not from other contracts" time="0.0180" classname="but not from other contracts">
    </testcase>
  </testsuite>
  <testsuite name="set()" timestamp="2022-02-04T17:26:26" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage Int set() when invoked by a non-contract, fails immediately" time="0.5530" classname="when invoked by a non-contract, fails immediately">
    </testcase>
  </testsuite>
  <testsuite name="when ContractA is added to the AddressResolver" timestamp="2022-02-04T17:26:27" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage Int set() when ContractA is added to the AddressResolver then only contract A can invoke a set()" time="0.5900" classname="then only contract A can invoke a set()">
    </testcase>
    <testcase name="Contract: FlexibleStorage Int set() when ContractA is added to the AddressResolver and setting emits an event" time="0.0120" classname="and setting emits an event">
    </testcase>
    <testcase name="Contract: FlexibleStorage Int set() when ContractA is added to the AddressResolver and setting mulitple entries emits multiple events" time="0.0140" classname="and setting mulitple entries emits multiple events">
    </testcase>
  </testsuite>
  <testsuite name="when contract A has record A" timestamp="2022-02-04T17:26:27" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when another contract replaces one in the address resolver" timestamp="2022-02-04T17:26:27" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the other contract adds a record" timestamp="2022-02-04T17:26:27" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.1460" failures="0">
    <testcase name="Contract: FlexibleStorage Int set() when ContractA is added to the AddressResolver when contract A has record A when another contract replaces one in the address resolver when the other contract adds a record then both exist on contract A" time="0.0070" classname="then both exist on contract A">
    </testcase>
  </testsuite>
  <testsuite name="delete()" timestamp="2022-02-04T17:26:28" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage Int delete() when invoked by a non-contract, fails immediately" time="0.5550" classname="when invoked by a non-contract, fails immediately">
    </testcase>
  </testsuite>
  <testsuite name="when ContractA is added to the AddressResolver" timestamp="2022-02-04T17:26:28" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage Int delete() when ContractA is added to the AddressResolver then only contract A can invoke a delete()" time="0.5140" classname="then only contract A can invoke a delete()">
    </testcase>
    <testcase name="Contract: FlexibleStorage Int delete() when ContractA is added to the AddressResolver and deleting emits an event" time="0.0140" classname="and deleting emits an event">
    </testcase>
  </testsuite>
  <testsuite name="when a value exists for recordA" timestamp="2022-02-04T17:26:29" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when recordA is deleted" timestamp="2022-02-04T17:26:29" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.2520" failures="0">
    <testcase name="Contract: FlexibleStorage Int delete() when ContractA is added to the AddressResolver when a value exists for recordA when recordA is deleted then deletion ensures that value is removed" time="0.0060" classname="then deletion ensures that value is removed">
    </testcase>
    <testcase name="Contract: FlexibleStorage Int delete() when ContractA is added to the AddressResolver when a value exists for recordA when recordA is deleted and the emitted event contains the deleted value" time="0.0000" classname="and the emitted event contains the deleted value">
    </testcase>
  </testsuite>
  <testsuite name="Address" timestamp="2022-02-04T17:26:29" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="get()" timestamp="2022-02-04T17:26:29" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage Address get() returns unset by default" time="0.0280" classname="returns unset by default">
    </testcase>
  </testsuite>
  <testsuite name="when ContractA is added to the AddressResolver" timestamp="2022-02-04T17:26:29" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when there are some values stored in ContractA" timestamp="2022-02-04T17:26:29" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.1770" failures="0">
    <testcase name="Contract: FlexibleStorage Address get() when ContractA is added to the AddressResolver when there are some values stored in ContractA then the values are gettable" time="0.0200" classname="then the values are gettable">
    </testcase>
    <testcase name="Contract: FlexibleStorage Address get() when ContractA is added to the AddressResolver when there are some values stored in ContractA but not from other contracts" time="0.0210" classname="but not from other contracts">
    </testcase>
  </testsuite>
  <testsuite name="set()" timestamp="2022-02-04T17:26:29" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage Address set() when invoked by a non-contract, fails immediately" time="0.6450" classname="when invoked by a non-contract, fails immediately">
    </testcase>
  </testsuite>
  <testsuite name="when ContractA is added to the AddressResolver" timestamp="2022-02-04T17:26:30" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage Address set() when ContractA is added to the AddressResolver then only contract A can invoke a set()" time="1.0760" classname="then only contract A can invoke a set()">
    </testcase>
    <testcase name="Contract: FlexibleStorage Address set() when ContractA is added to the AddressResolver and setting emits an event" time="0.0460" classname="and setting emits an event">
    </testcase>
    <testcase name="Contract: FlexibleStorage Address set() when ContractA is added to the AddressResolver and setting mulitple entries emits multiple events" time="0.0410" classname="and setting mulitple entries emits multiple events">
    </testcase>
  </testsuite>
  <testsuite name="when contract A has record A" timestamp="2022-02-04T17:26:32" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when another contract replaces one in the address resolver" timestamp="2022-02-04T17:26:32" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the other contract adds a record" timestamp="2022-02-04T17:26:32" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.2160" failures="0">
    <testcase name="Contract: FlexibleStorage Address set() when ContractA is added to the AddressResolver when contract A has record A when another contract replaces one in the address resolver when the other contract adds a record then both exist on contract A" time="0.0080" classname="then both exist on contract A">
    </testcase>
  </testsuite>
  <testsuite name="delete()" timestamp="2022-02-04T17:26:32" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage Address delete() when invoked by a non-contract, fails immediately" time="0.6950" classname="when invoked by a non-contract, fails immediately">
    </testcase>
  </testsuite>
  <testsuite name="when ContractA is added to the AddressResolver" timestamp="2022-02-04T17:26:33" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage Address delete() when ContractA is added to the AddressResolver then only contract A can invoke a delete()" time="0.6060" classname="then only contract A can invoke a delete()">
    </testcase>
    <testcase name="Contract: FlexibleStorage Address delete() when ContractA is added to the AddressResolver and deleting emits an event" time="0.0230" classname="and deleting emits an event">
    </testcase>
  </testsuite>
  <testsuite name="when a value exists for recordA" timestamp="2022-02-04T17:26:33" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when recordA is deleted" timestamp="2022-02-04T17:26:33" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.2890" failures="0">
    <testcase name="Contract: FlexibleStorage Address delete() when ContractA is added to the AddressResolver when a value exists for recordA when recordA is deleted then deletion ensures that value is removed" time="0.0160" classname="then deletion ensures that value is removed">
    </testcase>
    <testcase name="Contract: FlexibleStorage Address delete() when ContractA is added to the AddressResolver when a value exists for recordA when recordA is deleted and the emitted event contains the deleted value" time="0.0010" classname="and the emitted event contains the deleted value">
    </testcase>
  </testsuite>
  <testsuite name="Bool" timestamp="2022-02-04T17:26:34" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="get()" timestamp="2022-02-04T17:26:34" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage Bool get() returns unset by default" time="0.0260" classname="returns unset by default">
    </testcase>
  </testsuite>
  <testsuite name="when ContractA is added to the AddressResolver" timestamp="2022-02-04T17:26:34" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when there are some values stored in ContractA" timestamp="2022-02-04T17:26:34" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.2400" failures="0">
    <testcase name="Contract: FlexibleStorage Bool get() when ContractA is added to the AddressResolver when there are some values stored in ContractA then the values are gettable" time="0.0310" classname="then the values are gettable">
    </testcase>
    <testcase name="Contract: FlexibleStorage Bool get() when ContractA is added to the AddressResolver when there are some values stored in ContractA but not from other contracts" time="0.0230" classname="but not from other contracts">
    </testcase>
  </testsuite>
  <testsuite name="set()" timestamp="2022-02-04T17:26:34" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage Bool set() when invoked by a non-contract, fails immediately" time="0.6670" classname="when invoked by a non-contract, fails immediately">
    </testcase>
  </testsuite>
  <testsuite name="when ContractA is added to the AddressResolver" timestamp="2022-02-04T17:26:35" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage Bool set() when ContractA is added to the AddressResolver then only contract A can invoke a set()" time="0.6090" classname="then only contract A can invoke a set()">
    </testcase>
    <testcase name="Contract: FlexibleStorage Bool set() when ContractA is added to the AddressResolver and setting emits an event" time="0.0340" classname="and setting emits an event">
    </testcase>
    <testcase name="Contract: FlexibleStorage Bool set() when ContractA is added to the AddressResolver and setting mulitple entries emits multiple events" time="0.0220" classname="and setting mulitple entries emits multiple events">
    </testcase>
  </testsuite>
  <testsuite name="when contract A has record A" timestamp="2022-02-04T17:26:37" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when another contract replaces one in the address resolver" timestamp="2022-02-04T17:26:37" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the other contract adds a record" timestamp="2022-02-04T17:26:37" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.1040" failures="0">
    <testcase name="Contract: FlexibleStorage Bool set() when ContractA is added to the AddressResolver when contract A has record A when another contract replaces one in the address resolver when the other contract adds a record then both exist on contract A" time="0.0070" classname="then both exist on contract A">
    </testcase>
  </testsuite>
  <testsuite name="delete()" timestamp="2022-02-04T17:26:37" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage Bool delete() when invoked by a non-contract, fails immediately" time="0.5060" classname="when invoked by a non-contract, fails immediately">
    </testcase>
  </testsuite>
  <testsuite name="when ContractA is added to the AddressResolver" timestamp="2022-02-04T17:26:38" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage Bool delete() when ContractA is added to the AddressResolver then only contract A can invoke a delete()" time="0.6010" classname="then only contract A can invoke a delete()">
    </testcase>
    <testcase name="Contract: FlexibleStorage Bool delete() when ContractA is added to the AddressResolver and deleting emits an event" time="0.0200" classname="and deleting emits an event">
    </testcase>
  </testsuite>
  <testsuite name="when a value exists for recordA" timestamp="2022-02-04T17:26:38" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when recordA is deleted" timestamp="2022-02-04T17:26:38" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.2030" failures="0">
    <testcase name="Contract: FlexibleStorage Bool delete() when ContractA is added to the AddressResolver when a value exists for recordA when recordA is deleted then deletion ensures that value is removed" time="0.0050" classname="then deletion ensures that value is removed">
    </testcase>
    <testcase name="Contract: FlexibleStorage Bool delete() when ContractA is added to the AddressResolver when a value exists for recordA when recordA is deleted and the emitted event contains the deleted value" time="0.0000" classname="and the emitted event contains the deleted value">
    </testcase>
  </testsuite>
  <testsuite name="Bytes32" timestamp="2022-02-04T17:26:38" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="get()" timestamp="2022-02-04T17:26:38" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage Bytes32 get() returns unset by default" time="0.0250" classname="returns unset by default">
    </testcase>
  </testsuite>
  <testsuite name="when ContractA is added to the AddressResolver" timestamp="2022-02-04T17:26:39" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when there are some values stored in ContractA" timestamp="2022-02-04T17:26:39" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.3130" failures="0">
    <testcase name="Contract: FlexibleStorage Bytes32 get() when ContractA is added to the AddressResolver when there are some values stored in ContractA then the values are gettable" time="0.0320" classname="then the values are gettable">
    </testcase>
    <testcase name="Contract: FlexibleStorage Bytes32 get() when ContractA is added to the AddressResolver when there are some values stored in ContractA but not from other contracts" time="0.0210" classname="but not from other contracts">
    </testcase>
  </testsuite>
  <testsuite name="set()" timestamp="2022-02-04T17:26:39" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage Bytes32 set() when invoked by a non-contract, fails immediately" time="0.4760" classname="when invoked by a non-contract, fails immediately">
    </testcase>
  </testsuite>
  <testsuite name="when ContractA is added to the AddressResolver" timestamp="2022-02-04T17:26:39" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage Bytes32 set() when ContractA is added to the AddressResolver then only contract A can invoke a set()" time="0.5760" classname="then only contract A can invoke a set()">
    </testcase>
    <testcase name="Contract: FlexibleStorage Bytes32 set() when ContractA is added to the AddressResolver and setting emits an event" time="0.0160" classname="and setting emits an event">
    </testcase>
    <testcase name="Contract: FlexibleStorage Bytes32 set() when ContractA is added to the AddressResolver and setting mulitple entries emits multiple events" time="0.0140" classname="and setting mulitple entries emits multiple events">
    </testcase>
  </testsuite>
  <testsuite name="when contract A has record A" timestamp="2022-02-04T17:26:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when another contract replaces one in the address resolver" timestamp="2022-02-04T17:26:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the other contract adds a record" timestamp="2022-02-04T17:26:40" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.1050" failures="0">
    <testcase name="Contract: FlexibleStorage Bytes32 set() when ContractA is added to the AddressResolver when contract A has record A when another contract replaces one in the address resolver when the other contract adds a record then both exist on contract A" time="0.0100" classname="then both exist on contract A">
    </testcase>
  </testsuite>
  <testsuite name="delete()" timestamp="2022-02-04T17:26:40" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage Bytes32 delete() when invoked by a non-contract, fails immediately" time="0.5430" classname="when invoked by a non-contract, fails immediately">
    </testcase>
  </testsuite>
  <testsuite name="when ContractA is added to the AddressResolver" timestamp="2022-02-04T17:26:41" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
    <testcase name="Contract: FlexibleStorage Bytes32 delete() when ContractA is added to the AddressResolver then only contract A can invoke a delete()" time="0.4450" classname="then only contract A can invoke a delete()">
    </testcase>
    <testcase name="Contract: FlexibleStorage Bytes32 delete() when ContractA is added to the AddressResolver and deleting emits an event" time="0.0120" classname="and deleting emits an event">
    </testcase>
  </testsuite>
  <testsuite name="when a value exists for recordA" timestamp="2022-02-04T17:26:41" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when recordA is deleted" timestamp="2022-02-04T17:26:41" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/FlexibleStorage.js" time="0.1810" failures="0">
    <testcase name="Contract: FlexibleStorage Bytes32 delete() when ContractA is added to the AddressResolver when a value exists for recordA when recordA is deleted then deletion ensures that value is removed" time="0.0050" classname="then deletion ensures that value is removed">
    </testcase>
    <testcase name="Contract: FlexibleStorage Bytes32 delete() when ContractA is added to the AddressResolver when a value exists for recordA when recordA is deleted and the emitted event contains the deleted value" time="0.0000" classname="and the emitted event contains the deleted value">
    </testcase>
  </testsuite>
  <testsuite name="Contract: ImportableRewardEscrowV2" timestamp="2022-02-04T17:26:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ImportableRewardEscrowV2.js" time="0.0000" failures="0">
    <testcase name="Contract: ImportableRewardEscrowV2 ensure only expected functions are mutative" time="0.0290" classname="ensure only expected functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="Constructor &amp; Settings " timestamp="2022-02-04T17:26:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ImportableRewardEscrowV2.js" time="0.0150" failures="0">
    <testcase name="Contract: ImportableRewardEscrowV2 Constructor &amp; Settings  should set owner on contructor" time="0.0060" classname="should set owner on contructor">
    </testcase>
  </testsuite>
  <testsuite name="There are no escrow entries initially" timestamp="2022-02-04T17:26:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ImportableRewardEscrowV2.js" time="0.0180" failures="0">
    <testcase name="Contract: ImportableRewardEscrowV2 There are no escrow entries initially then numVestingEntries should return 0" time="0.0090" classname="then numVestingEntries should return 0">
    </testcase>
  </testsuite>
  <testsuite name="Contract: Issuer (via Synthetix)" timestamp="2022-02-04T17:26:42" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) ensure only known functions are mutative" time="0.0530" classname="ensure only known functions are mutative">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) minimum stake time is correctly configured as a default" time="0.0090" classname="minimum stake time is correctly configured as a default">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) issuance ratio is correctly configured as a default" time="0.0260" classname="issuance ratio is correctly configured as a default">
    </testcase>
  </testsuite>
  <testsuite name="protected methods" timestamp="2022-02-04T17:26:49" tests="9" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="6.9120" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) protected methods issueSynths() cannot be invoked directly by a user" time="0.5920" classname="issueSynths() cannot be invoked directly by a user">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) protected methods issueSynthsOnBehalf() cannot be invoked directly by a user" time="0.5420" classname="issueSynthsOnBehalf() cannot be invoked directly by a user">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) protected methods issueMaxSynths() cannot be invoked directly by a user" time="0.4890" classname="issueMaxSynths() cannot be invoked directly by a user">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) protected methods issueMaxSynthsOnBehalf() cannot be invoked directly by a user" time="0.5200" classname="issueMaxSynthsOnBehalf() cannot be invoked directly by a user">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) protected methods burnSynths() cannot be invoked directly by a user" time="0.5160" classname="burnSynths() cannot be invoked directly by a user">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) protected methods burnSynthsOnBehalf() cannot be invoked directly by a user" time="0.4790" classname="burnSynthsOnBehalf() cannot be invoked directly by a user">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) protected methods burnSynthsToTarget() cannot be invoked directly by a user" time="0.4530" classname="burnSynthsToTarget() cannot be invoked directly by a user">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) protected methods liquidateDelinquentAccount() cannot be invoked directly by a user" time="0.4700" classname="liquidateDelinquentAccount() cannot be invoked directly by a user">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) protected methods burnSynthsToTargetOnBehalf() cannot be invoked directly by a user" time="0.4670" classname="burnSynthsToTargetOnBehalf() cannot be invoked directly by a user">
    </testcase>
  </testsuite>
  <testsuite name="when minimum stake time is set to 0" timestamp="2022-02-04T17:26:56" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the issuanceRatio is 0.2" timestamp="2022-02-04T17:26:56" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 should prevent more issuance if the user&apos;s collaterisation changes to be insufficient" time="0.7280" classname="should prevent more issuance if the user&apos;s collaterisation changes to be insufficient">
    </testcase>
  </testsuite>
  <testsuite name="minimumStakeTime - recording last issue and burn timestamp" timestamp="2022-02-04T17:26:57" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 minimumStakeTime - recording last issue and burn timestamp should issue synths and store issue timestamp after now" time="0.1070" classname="should issue synths and store issue timestamp after now">
    </testcase>
  </testsuite>
  <testsuite name="require wait time on next burn synth after minting" timestamp="2022-02-04T17:26:57" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="2.3920" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 minimumStakeTime - recording last issue and burn timestamp require wait time on next burn synth after minting should revert when burning any synths within minStakeTime" time="0.1280" classname="should revert when burning any synths within minStakeTime">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 minimumStakeTime - recording last issue and burn timestamp require wait time on next burn synth after minting should set minStakeTime to 120 seconds and able to burn after wait time" time="0.3310" classname="should set minStakeTime to 120 seconds and able to burn after wait time">
    </testcase>
  </testsuite>
  <testsuite name="totalIssuedSynths()" timestamp="2022-02-04T17:27:00" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when exchange rates set" timestamp="2022-02-04T17:27:00" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when numerous issues in one currency" timestamp="2022-02-04T17:27:00" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="3.9980" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 totalIssuedSynths() when exchange rates set when numerous issues in one currency then totalIssuedSynths in should correctly calculate the total issued synths in sUSD" time="0.0600" classname="then totalIssuedSynths in should correctly calculate the total issued synths in sUSD">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 totalIssuedSynths() when exchange rates set when numerous issues in one currency and in another synth currency" time="0.0690" classname="and in another synth currency">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 totalIssuedSynths() when exchange rates set when numerous issues in one currency and in SNX" time="0.0690" classname="and in SNX">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 totalIssuedSynths() when exchange rates set when numerous issues in one currency and in a non-synth currency" time="0.0700" classname="and in a non-synth currency">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 totalIssuedSynths() when exchange rates set when numerous issues in one currency and in an unknown currency, reverts" time="0.1060" classname="and in an unknown currency, reverts">
    </testcase>
  </testsuite>
  <testsuite name="when numerous issues in many currencies" timestamp="2022-02-04T17:27:04" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="4.1940" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 totalIssuedSynths() when exchange rates set when numerous issues in many currencies then totalIssuedSynths in should correctly calculate the total issued synths in sUSD" time="0.0590" classname="then totalIssuedSynths in should correctly calculate the total issued synths in sUSD">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 totalIssuedSynths() when exchange rates set when numerous issues in many currencies and in another synth currency" time="0.0760" classname="and in another synth currency">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 totalIssuedSynths() when exchange rates set when numerous issues in many currencies and in SNX" time="0.0750" classname="and in SNX">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 totalIssuedSynths() when exchange rates set when numerous issues in many currencies and in a non-synth currency" time="0.0740" classname="and in a non-synth currency">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 totalIssuedSynths() when exchange rates set when numerous issues in many currencies and in an unknown currency, reverts" time="0.0640" classname="and in an unknown currency, reverts">
    </testcase>
  </testsuite>
  <testsuite name="debtBalance()" timestamp="2022-02-04T17:27:08" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="2.0450" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 debtBalance() should not change debt balance % if exchange rates change" time="0.9300" classname="should not change debt balance % if exchange rates change">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 debtBalance() should correctly calculate a user&apos;s debt balance without prior issuance" time="0.0810" classname="should correctly calculate a user&apos;s debt balance without prior issuance">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 debtBalance() should correctly calculate a user&apos;s debt balance with prior issuance" time="0.1430" classname="should correctly calculate a user&apos;s debt balance with prior issuance">
    </testcase>
  </testsuite>
  <testsuite name="remainingIssuableSynths()" timestamp="2022-02-04T17:27:10" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.9080" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 remainingIssuableSynths() should correctly calculate a user&apos;s remaining issuable synths with prior issuance" time="0.2120" classname="should correctly calculate a user&apos;s remaining issuable synths with prior issuance">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 remainingIssuableSynths() should correctly calculate a user&apos;s remaining issuable synths without prior issuance" time="0.0980" classname="should correctly calculate a user&apos;s remaining issuable synths without prior issuance">
    </testcase>
  </testsuite>
  <testsuite name="maxIssuableSynths()" timestamp="2022-02-04T17:27:11" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="1.2780" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 maxIssuableSynths() should correctly calculate a user&apos;s maximum issuable synths without prior issuance" time="0.0930" classname="should correctly calculate a user&apos;s maximum issuable synths without prior issuance">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 maxIssuableSynths() should correctly calculate a user&apos;s maximum issuable synths without any SNX" time="0.0390" classname="should correctly calculate a user&apos;s maximum issuable synths without any SNX">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 maxIssuableSynths() should correctly calculate a user&apos;s maximum issuable synths with prior issuance" time="0.2170" classname="should correctly calculate a user&apos;s maximum issuable synths with prior issuance">
    </testcase>
  </testsuite>
  <testsuite name="adding and removing synths" timestamp="2022-02-04T17:27:12" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 adding and removing synths should allow adding a Synth contract" time="0.3090" classname="should allow adding a Synth contract">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 adding and removing synths should disallow adding a Synth contract when the user is not the owner" time="0.7140" classname="should disallow adding a Synth contract when the user is not the owner">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 adding and removing synths should disallow double adding a Synth contract with the same address" time="0.2300" classname="should disallow double adding a Synth contract with the same address">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 adding and removing synths should disallow double adding a Synth contract with the same currencyKey" time="0.4430" classname="should disallow double adding a Synth contract with the same currencyKey">
    </testcase>
  </testsuite>
  <testsuite name="when another synth is added with 0 supply" timestamp="2022-02-04T17:27:15" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 adding and removing synths when another synth is added with 0 supply should be able to query multiple synth addresses" time="0.0070" classname="should be able to query multiple synth addresses">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 adding and removing synths when another synth is added with 0 supply should allow removing a Synth contract when it has no issued balance" time="0.0880" classname="should allow removing a Synth contract when it has no issued balance">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 adding and removing synths when another synth is added with 0 supply should disallow removing a token by a non-owner" time="0.8180" classname="should disallow removing a token by a non-owner">
    </testcase>
  </testsuite>
  <testsuite name="when that synth has issued but has no rate" timestamp="2022-02-04T17:27:18" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 adding and removing synths when another synth is added with 0 supply when that synth has issued but has no rate should disallow removing a Synth contract when it has an issued balance and no rate" time="0.0790" classname="should disallow removing a Synth contract when it has an issued balance and no rate">
    </testcase>
  </testsuite>
  <testsuite name="when the synth has a rate" timestamp="2022-02-04T17:27:19" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when another user exchanges into the synth" timestamp="2022-02-04T17:27:19" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the synth is removed" timestamp="2022-02-04T17:27:19" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="1.1570" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 adding and removing synths when another synth is added with 0 supply when that synth has issued but has no rate when the synth has a rate when another user exchanges into the synth when the synth is removed then settling works as expected" time="0.0720" classname="then settling works as expected">
    </testcase>
  </testsuite>
  <testsuite name="when the same user exchanges out of the synth" timestamp="2022-02-04T17:27:20" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the synth is removed" timestamp="2022-02-04T17:27:20" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="5.0540" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 adding and removing synths when another synth is added with 0 supply when that synth has issued but has no rate when the synth has a rate when another user exchanges into the synth when the same user exchanges out of the synth when the synth is removed then settling works as expected" time="0.0540" classname="then settling works as expected">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 adding and removing synths when another synth is added with 0 supply when that synth has issued but has no rate when the synth has a rate when another user exchanges into the synth when the same user exchanges out of the synth when the synth is removed then settling from the original currency works too" time="0.0420" classname="then settling from the original currency works too">
    </testcase>
  </testsuite>
  <testsuite name="when a debt snapshot is taken" timestamp="2022-02-04T17:27:26" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the synth is removed" timestamp="2022-02-04T17:27:26" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="3.8940" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 adding and removing synths when another synth is added with 0 supply when that synth has issued but has no rate when the synth has a rate when a debt snapshot is taken when the synth is removed emits an event" time="0.0000" classname="emits an event">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 adding and removing synths when another synth is added with 0 supply when that synth has issued but has no rate when the synth has a rate when a debt snapshot is taken when the synth is removed issues the equivalent amount of sUSD" time="0.0070" classname="issues the equivalent amount of sUSD">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 adding and removing synths when another synth is added with 0 supply when that synth has issued but has no rate when the synth has a rate when a debt snapshot is taken when the synth is removed it invokes deprecate on the redeemer via the proxy" time="0.0040" classname="it invokes deprecate on the redeemer via the proxy">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 adding and removing synths when another synth is added with 0 supply when that synth has issued but has no rate when the synth has a rate when a debt snapshot is taken when the synth is removed and total debt remains unchanged" time="0.0110" classname="and total debt remains unchanged">
    </testcase>
  </testsuite>
  <testsuite name="multiple add/remove synths" timestamp="2022-02-04T17:27:29" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="4.7610" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 adding and removing synths multiple add/remove synths should allow adding multiple Synth contracts at once" time="0.4270" classname="should allow adding multiple Synth contracts at once">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 adding and removing synths multiple add/remove synths should disallow multi-adding the same Synth contract" time="0.2020" classname="should disallow multi-adding the same Synth contract">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 adding and removing synths multiple add/remove synths should disallow multi-adding synth contracts with the same currency key" time="0.4950" classname="should disallow multi-adding synth contracts with the same currency key">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 adding and removing synths multiple add/remove synths should disallow removing non-existent synths" time="0.0400" classname="should disallow removing non-existent synths">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 adding and removing synths multiple add/remove synths should disallow removing sUSD" time="0.0670" classname="should disallow removing sUSD">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 adding and removing synths multiple add/remove synths should allow removing synths with no balance" time="0.3230" classname="should allow removing synths with no balance">
    </testcase>
  </testsuite>
  <testsuite name="issuance" timestamp="2022-02-04T17:27:34" tests="7" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance should allow the issuance of a small amount of synths" time="0.1320" classname="should allow the issuance of a small amount of synths">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance should be possible to issue the maximum amount of synths via issueSynths" time="0.1960" classname="should be possible to issue the maximum amount of synths via issueSynths">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance should allow an issuer to issue synths in one flavour" time="0.4180" classname="should allow an issuer to issue synths in one flavour">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance should allow two issuers to issue synths in one flavour" time="0.3820" classname="should allow two issuers to issue synths in one flavour">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance should allow multi-issuance in one flavour" time="0.4980" classname="should allow multi-issuance in one flavour">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance should allow an issuer to issue max synths via the standard issue call" time="0.3080" classname="should allow an issuer to issue max synths via the standard issue call">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance should disallow an issuer from issuing synths beyond their remainingIssuableSynths" time="0.3200" classname="should disallow an issuer from issuing synths beyond their remainingIssuableSynths">
    </testcase>
  </testsuite>
  <testsuite name="potential blocking conditions" timestamp="2022-02-04T17:27:39" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:27:39" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance potential blocking conditions when System is suspended then calling issue() reverts" time="0.0180" classname="then calling issue() reverts">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance potential blocking conditions when System is suspended and calling issueMaxSynths() reverts" time="0.0190" classname="and calling issueMaxSynths() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:27:39" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.8610" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance potential blocking conditions when System is suspended when System is resumed then calling issue() succeeds" time="0.1040" classname="then calling issue() succeeds">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance potential blocking conditions when System is suspended when System is resumed and calling issueMaxSynths() succeeds" time="0.1120" classname="and calling issueMaxSynths() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is suspended" timestamp="2022-02-04T17:27:40" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance potential blocking conditions when Issuance is suspended then calling issue() reverts" time="0.0390" classname="then calling issue() reverts">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance potential blocking conditions when Issuance is suspended and calling issueMaxSynths() reverts" time="0.0240" classname="and calling issueMaxSynths() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is resumed" timestamp="2022-02-04T17:27:41" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="1.1180" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance potential blocking conditions when Issuance is suspended when Issuance is resumed then calling issue() succeeds" time="0.1120" classname="then calling issue() succeeds">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance potential blocking conditions when Issuance is suspended when Issuance is resumed and calling issueMaxSynths() succeeds" time="0.1220" classname="and calling issueMaxSynths() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when SNX is stale" timestamp="2022-02-04T17:27:42" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="1.7220" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance potential blocking conditions when SNX is stale reverts on issueSynths()" time="0.1240" classname="reverts on issueSynths()">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance potential blocking conditions when SNX is stale reverts on issueMaxSynths()" time="0.1630" classname="reverts on issueMaxSynths()">
    </testcase>
  </testsuite>
  <testsuite name="when sAUD is stale" timestamp="2022-02-04T17:27:44" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="4.7250" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance potential blocking conditions when sAUD is stale reverts on issueSynths()" time="0.1740" classname="reverts on issueSynths()">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance potential blocking conditions when sAUD is stale reverts on issueMaxSynths()" time="0.7500" classname="reverts on issueMaxSynths()">
    </testcase>
  </testsuite>
  <testsuite name="when SNX,sAUD is stale" timestamp="2022-02-04T17:27:49" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="1.3270" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance potential blocking conditions when SNX,sAUD is stale reverts on issueSynths()" time="0.1740" classname="reverts on issueSynths()">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance potential blocking conditions when SNX,sAUD is stale reverts on issueMaxSynths()" time="0.1010" classname="reverts on issueMaxSynths()">
    </testcase>
  </testsuite>
  <testsuite name="when none is stale" timestamp="2022-02-04T17:27:50" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="1.5260" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance potential blocking conditions when none is stale then calling issueSynths succeeds" time="0.1250" classname="then calling issueSynths succeeds">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance potential blocking conditions when none is stale and calling issueMaxSynths() succeeds" time="0.0950" classname="and calling issueMaxSynths() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="issueMaxSynths" timestamp="2022-02-04T17:27:52" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.5800" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issuance issueMaxSynths should allow an issuer to issue max synths in one flavour" time="0.2200" classname="should allow an issuer to issue max synths in one flavour">
    </testcase>
  </testsuite>
  <testsuite name="burning" timestamp="2022-02-04T17:27:52" tests="7" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning should allow an issuer with outstanding debt to burn synths and decrease debt" time="0.3200" classname="should allow an issuer with outstanding debt to burn synths and decrease debt">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning should disallow an issuer without outstanding debt from burning synths" time="0.4790" classname="should disallow an issuer without outstanding debt from burning synths">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning should revert when trying to burn synths that do not exist" time="0.3850" classname="should revert when trying to burn synths that do not exist">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning should only burn up to a user&apos;s actual debt level" time="0.6230" classname="should only burn up to a user&apos;s actual debt level">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning should successfully burn all user&apos;s synths @gasprofile" time="0.3420" classname="should successfully burn all user&apos;s synths @gasprofile">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning should burn the correct amount of synths" time="0.3370" classname="should burn the correct amount of synths">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning should burn the correct amount of synths" time="0.4820" classname="should burn the correct amount of synths">
    </testcase>
  </testsuite>
  <testsuite name="potential blocking conditions" timestamp="2022-02-04T17:27:58" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:27:58" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning potential blocking conditions when System is suspended then calling burn() reverts" time="0.0340" classname="then calling burn() reverts">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning potential blocking conditions when System is suspended and calling burnSynthsToTarget() reverts" time="0.0290" classname="and calling burnSynthsToTarget() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:27:59" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="1.4160" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning potential blocking conditions when System is suspended when System is resumed then calling burnSynths() succeeds" time="0.1380" classname="then calling burnSynths() succeeds">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning potential blocking conditions when System is suspended when System is resumed and calling burnSynthsToTarget() succeeds" time="0.1110" classname="and calling burnSynthsToTarget() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is suspended" timestamp="2022-02-04T17:28:00" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning potential blocking conditions when Issuance is suspended then calling burn() reverts" time="0.0370" classname="then calling burn() reverts">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning potential blocking conditions when Issuance is suspended and calling burnSynthsToTarget() reverts" time="0.0280" classname="and calling burnSynthsToTarget() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is resumed" timestamp="2022-02-04T17:28:01" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="1.3350" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning potential blocking conditions when Issuance is suspended when Issuance is resumed then calling burnSynths() succeeds" time="0.1250" classname="then calling burnSynths() succeeds">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning potential blocking conditions when Issuance is suspended when Issuance is resumed and calling burnSynthsToTarget() succeeds" time="0.0920" classname="and calling burnSynthsToTarget() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when SNX is stale" timestamp="2022-02-04T17:28:03" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="1.6930" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning potential blocking conditions when SNX is stale then calling burn() reverts" time="0.1560" classname="then calling burn() reverts">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning potential blocking conditions when SNX is stale and calling burnSynthsToTarget() reverts" time="0.1130" classname="and calling burnSynthsToTarget() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when sAUD is stale" timestamp="2022-02-04T17:28:04" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="1.6560" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning potential blocking conditions when sAUD is stale then calling burn() reverts" time="0.1600" classname="then calling burn() reverts">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning potential blocking conditions when sAUD is stale and calling burnSynthsToTarget() reverts" time="0.1140" classname="and calling burnSynthsToTarget() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when SNX,sAUD is stale" timestamp="2022-02-04T17:28:06" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="1.5070" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning potential blocking conditions when SNX,sAUD is stale then calling burn() reverts" time="0.1430" classname="then calling burn() reverts">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning potential blocking conditions when SNX,sAUD is stale and calling burnSynthsToTarget() reverts" time="0.1080" classname="and calling burnSynthsToTarget() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when none is stale" timestamp="2022-02-04T17:28:07" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="1.5830" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning potential blocking conditions when none is stale then calling burnSynths() succeeds" time="0.1330" classname="then calling burnSynths() succeeds">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning potential blocking conditions when none is stale and calling burnSynthsToTarget() succeeds" time="0.0970" classname="and calling burnSynthsToTarget() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="debt calculation in multi-issuance scenarios" timestamp="2022-02-04T17:28:09" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="4.9560" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning debt calculation in multi-issuance scenarios should correctly calculate debt in a multi-issuance multi-burn scenario @gasprofile" time="0.8830" classname="should correctly calculate debt in a multi-issuance multi-burn scenario @gasprofile">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning debt calculation in multi-issuance scenarios should allow user to burn all synths issued even after other users have issued" time="0.5950" classname="should allow user to burn all synths issued even after other users have issued">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning debt calculation in multi-issuance scenarios should allow a user to burn up to their balance if they try too burn too much" time="0.2720" classname="should allow a user to burn up to their balance if they try too burn too much">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning debt calculation in multi-issuance scenarios should allow users to burn their debt and adjust the debtBalanceOf correctly for remaining users" time="1.5760" classname="should allow users to burn their debt and adjust the debtBalanceOf correctly for remaining users">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning debt calculation in multi-issuance scenarios should revert if sender tries to issue synths with 0 amount" time="0.0940" classname="should revert if sender tries to issue synths with 0 amount">
    </testcase>
  </testsuite>
  <testsuite name="burnSynthsToTarget" timestamp="2022-02-04T17:28:14" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the SNX price drops 50%" timestamp="2022-02-04T17:28:14" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="2.8410" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning burnSynthsToTarget when the SNX price drops 50% then the maxIssuableSynths drops 50%" time="0.0000" classname="then the maxIssuableSynths drops 50%">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning burnSynthsToTarget when the SNX price drops 50% then calling burnSynthsToTarget() reduces sUSD to c-ratio target" time="0.1460" classname="then calling burnSynthsToTarget() reduces sUSD to c-ratio target">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning burnSynthsToTarget when the SNX price drops 50% then fees are claimable" time="0.1740" classname="then fees are claimable">
    </testcase>
  </testsuite>
  <testsuite name="when the SNX price drops 10%" timestamp="2022-02-04T17:28:17" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="2.6420" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning burnSynthsToTarget when the SNX price drops 10% then the maxIssuableSynths drops 10%" time="0.0000" classname="then the maxIssuableSynths drops 10%">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning burnSynthsToTarget when the SNX price drops 10% then calling burnSynthsToTarget() reduces sUSD to c-ratio target" time="0.1150" classname="then calling burnSynthsToTarget() reduces sUSD to c-ratio target">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning burnSynthsToTarget when the SNX price drops 10% then fees are claimable" time="0.1390" classname="then fees are claimable">
    </testcase>
  </testsuite>
  <testsuite name="when the SNX price drops 90%" timestamp="2022-02-04T17:28:19" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="2.5630" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning burnSynthsToTarget when the SNX price drops 90% then the maxIssuableSynths drops 10%" time="0.0010" classname="then the maxIssuableSynths drops 10%">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning burnSynthsToTarget when the SNX price drops 90% then calling burnSynthsToTarget() reduces sUSD to c-ratio target" time="0.1430" classname="then calling burnSynthsToTarget() reduces sUSD to c-ratio target">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning burnSynthsToTarget when the SNX price drops 90% then fees are claimable" time="0.1490" classname="then fees are claimable">
    </testcase>
  </testsuite>
  <testsuite name="when the SNX price increases 100%" timestamp="2022-02-04T17:28:22" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="1.6450" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning burnSynthsToTarget when the SNX price increases 100% then the maxIssuableSynths increases 100%" time="0.0000" classname="then the maxIssuableSynths increases 100%">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning burnSynthsToTarget when the SNX price increases 100% then calling burnSynthsToTarget() reverts" time="0.1040" classname="then calling burnSynthsToTarget() reverts">
    </testcase>
  </testsuite>
  <testsuite name="burnSynths() after exchange()" timestamp="2022-02-04T17:28:24" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="given the waiting period is set to 60s" timestamp="2022-02-04T17:28:24" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and a user has 1250 sUSD issued" timestamp="2022-02-04T17:28:24" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and is has been exchanged into sEUR at a rate of 1.25:1 and the waiting period has expired" timestamp="2022-02-04T17:28:24" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and they have exchanged all of it back into sUSD" timestamp="2022-02-04T17:28:24" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when they attempt to burn the sUSD" timestamp="2022-02-04T17:28:24" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.9590" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning burnSynths() after exchange() given the waiting period is set to 60s and a user has 1250 sUSD issued and is has been exchanged into sEUR at a rate of 1.25:1 and the waiting period has expired and they have exchanged all of it back into sUSD when they attempt to burn the sUSD then it fails as the waiting period is ongoing" time="0.0630" classname="then it fails as the waiting period is ongoing">
    </testcase>
  </testsuite>
  <testsuite name="and 60s elapses with no change in the sEUR rate" timestamp="2022-02-04T17:28:25" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when they attempt to burn the sUSD" timestamp="2022-02-04T17:28:25" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="1.1050" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning burnSynths() after exchange() given the waiting period is set to 60s and a user has 1250 sUSD issued and is has been exchanged into sEUR at a rate of 1.25:1 and the waiting period has expired and they have exchanged all of it back into sUSD and 60s elapses with no change in the sEUR rate when they attempt to burn the sUSD then it succeeds and burns the entire sUSD amount" time="0.0440" classname="then it succeeds and burns the entire sUSD amount">
    </testcase>
  </testsuite>
  <testsuite name="and the sEUR price decreases by 20% to 1" timestamp="2022-02-04T17:28:26" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and 60s elapses" timestamp="2022-02-04T17:28:26" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when they attempt to burn the entire amount sUSD" timestamp="2022-02-04T17:28:26" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="2.5010" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning burnSynths() after exchange() given the waiting period is set to 60s and a user has 1250 sUSD issued and is has been exchanged into sEUR at a rate of 1.25:1 and the waiting period has expired and they have exchanged all of it back into sUSD and the sEUR price decreases by 20% to 1 and 60s elapses when they attempt to burn the entire amount sUSD then it succeeds and burns their sUSD minus the reclaim amount from settlement" time="0.0180" classname="then it succeeds and burns their sUSD minus the reclaim amount from settlement">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning burnSynths() after exchange() given the waiting period is set to 60s and a user has 1250 sUSD issued and is has been exchanged into sEUR at a rate of 1.25:1 and the waiting period has expired and they have exchanged all of it back into sUSD and the sEUR price decreases by 20% to 1 and 60s elapses when they attempt to burn the entire amount sUSD and their debt balance is now 0 because they are the only debt holder in the system" time="0.0240" classname="and their debt balance is now 0 because they are the only debt holder in the system">
    </testcase>
  </testsuite>
  <testsuite name="when another user also has the same amount of debt" timestamp="2022-02-04T17:28:28" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the first user attempts to burn the entire amount sUSD" timestamp="2022-02-04T17:28:28" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="2.6940" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning burnSynths() after exchange() given the waiting period is set to 60s and a user has 1250 sUSD issued and is has been exchanged into sEUR at a rate of 1.25:1 and the waiting period has expired and they have exchanged all of it back into sUSD and the sEUR price decreases by 20% to 1 and 60s elapses when another user also has the same amount of debt when the first user attempts to burn the entire amount sUSD then it succeeds and burns their sUSD minus the reclaim amount from settlement" time="0.0160" classname="then it succeeds and burns their sUSD minus the reclaim amount from settlement">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burning burnSynths() after exchange() given the waiting period is set to 60s and a user has 1250 sUSD issued and is has been exchanged into sEUR at a rate of 1.25:1 and the waiting period has expired and they have exchanged all of it back into sUSD and the sEUR price decreases by 20% to 1 and 60s elapses when another user also has the same amount of debt when the first user attempts to burn the entire amount sUSD and their debt balance is now half of the reclaimed balance because they owe half of the pool" time="0.0340" classname="and their debt balance is now half of the reclaimed balance because they owe half of the pool">
    </testcase>
  </testsuite>
  <testsuite name="debt calculation in multi-issuance scenarios" timestamp="2022-02-04T17:28:31" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="2.5810" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 debt calculation in multi-issuance scenarios should correctly calculate debt in a multi-issuance scenario" time="0.3910" classname="should correctly calculate debt in a multi-issuance scenario">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 debt calculation in multi-issuance scenarios should correctly calculate debt in a multi-issuance multi-burn scenario" time="0.7830" classname="should correctly calculate debt in a multi-issuance multi-burn scenario">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 debt calculation in multi-issuance scenarios should allow me to burn all synths I&apos;ve issued when there are other issuers" time="0.5360" classname="should allow me to burn all synths I&apos;ve issued when there are other issuers">
    </testcase>
  </testsuite>
  <testsuite name="multiple issue and burn scenarios" timestamp="2022-02-04T17:28:34" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="34.7190" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 multiple issue and burn scenarios should correctly calculate debt in a high issuance and burn scenario" time="13.2750" classname="should correctly calculate debt in a high issuance and burn scenario">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 multiple issue and burn scenarios should correctly calculate debt in a high (random) issuance and burn scenario" time="13.4790" classname="should correctly calculate debt in a high (random) issuance and burn scenario">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 multiple issue and burn scenarios should correctly calculate debt in a high volume contrast issuance and burn scenario" time="6.8500" classname="should correctly calculate debt in a high volume contrast issuance and burn scenario">
    </testcase>
  </testsuite>
  <testsuite name="check collaterisation ratio" timestamp="2022-02-04T17:29:08" tests="13" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="9.7670" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 check collaterisation ratio should return 0 if user has no synthetix when checking the collaterisation ratio" time="0.0400" classname="should return 0 if user has no synthetix when checking the collaterisation ratio">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 check collaterisation ratio Any user can check the collaterisation ratio for a user" time="0.2160" classname="Any user can check the collaterisation ratio for a user">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 check collaterisation ratio should be able to read collaterisation ratio for a user with synthetix but no debt" time="0.1060" classname="should be able to read collaterisation ratio for a user with synthetix but no debt">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 check collaterisation ratio should be able to read collaterisation ratio for a user with synthetix and debt" time="0.2030" classname="should be able to read collaterisation ratio for a user with synthetix and debt">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 check collaterisation ratio should include escrowed synthetix when calculating a user&apos;s collaterisation ratio" time="0.3960" classname="should include escrowed synthetix when calculating a user&apos;s collaterisation ratio">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 check collaterisation ratio should include escrowed reward synthetix when calculating a user&apos;s collateralisation ratio" time="0.4200" classname="should include escrowed reward synthetix when calculating a user&apos;s collateralisation ratio">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 check collaterisation ratio should permit user to issue sUSD debt with only escrowed SNX as collateral (no SNX in wallet)" time="0.3110" classname="should permit user to issue sUSD debt with only escrowed SNX as collateral (no SNX in wallet)">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 check collaterisation ratio should permit user to issue sUSD debt with only reward escrow as collateral (no SNX in wallet)" time="0.2580" classname="should permit user to issue sUSD debt with only reward escrow as collateral (no SNX in wallet)">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 check collaterisation ratio should permit anyone checking another user&apos;s collateral" time="0.1290" classname="should permit anyone checking another user&apos;s collateral">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 check collaterisation ratio should include escrowed synthetix when checking a user&apos;s collateral" time="0.1310" classname="should include escrowed synthetix when checking a user&apos;s collateral">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 check collaterisation ratio should include escrowed reward synthetix when checking a user&apos;s collateral" time="0.1820" classname="should include escrowed reward synthetix when checking a user&apos;s collateral">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 check collaterisation ratio should calculate a user&apos;s remaining issuable synths" time="0.2910" classname="should calculate a user&apos;s remaining issuable synths">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 check collaterisation ratio should correctly calculate a user&apos;s max issuable synths with escrowed synthetix" time="0.1920" classname="should correctly calculate a user&apos;s max issuable synths with escrowed synthetix">
    </testcase>
  </testsuite>
  <testsuite name="issue and burn on behalf" timestamp="2022-02-04T17:29:18" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf should approveIssueOnBehalf for account1" time="0.0490" classname="should approveIssueOnBehalf for account1">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf should approveBurnOnBehalf for account1" time="0.0380" classname="should approveBurnOnBehalf for account1">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf should approveIssueOnBehalf and IssueMaxSynths" time="0.2250" classname="should approveIssueOnBehalf and IssueMaxSynths">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf should approveIssueOnBehalf and IssueSynths" time="0.2740" classname="should approveIssueOnBehalf and IssueSynths">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf should approveBurnOnBehalf and BurnSynths" time="2.2510" classname="should approveBurnOnBehalf and BurnSynths">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf should approveBurnOnBehalf and burnSynthsToTarget" time="0.4850" classname="should approveBurnOnBehalf and burnSynthsToTarget">
    </testcase>
  </testsuite>
  <testsuite name="when not approved it should revert on" timestamp="2022-02-04T17:29:25" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="7.1400" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf when not approved it should revert on issueMaxSynthsOnBehalf" time="1.3520" classname="issueMaxSynthsOnBehalf">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf when not approved it should revert on issueSynthsOnBehalf" time="1.1720" classname="issueSynthsOnBehalf">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf when not approved it should revert on burnSynthsOnBehalf" time="1.1920" classname="burnSynthsOnBehalf">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf when not approved it should revert on burnSynthsToTargetOnBehalf" time="1.1400" classname="burnSynthsToTargetOnBehalf">
    </testcase>
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:29:32" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf when System is suspended then calling issueSynthsOnBehalf() reverts" time="0.0570" classname="then calling issueSynthsOnBehalf() reverts">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf when System is suspended and calling issueMaxSynthsOnBehalf() reverts" time="0.0510" classname="and calling issueMaxSynthsOnBehalf() reverts">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf when System is suspended and calling burnSynthsOnBehalf() reverts" time="0.0350" classname="and calling burnSynthsOnBehalf() reverts">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf when System is suspended and calling burnSynthsToTargetOnBehalf() reverts" time="0.0500" classname="and calling burnSynthsToTargetOnBehalf() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:29:35" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="3.8400" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf when System is suspended when System is resumed then calling issueSynthsOnBehalf() succeeds" time="0.2030" classname="then calling issueSynthsOnBehalf() succeeds">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf when System is suspended when System is resumed and calling issueMaxSynthsOnBehalf() succeeds" time="0.1670" classname="and calling issueMaxSynthsOnBehalf() succeeds">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf when System is suspended when System is resumed and calling burnSynthsOnBehalf() succeeds" time="0.1390" classname="and calling burnSynthsOnBehalf() succeeds">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf when System is suspended when System is resumed and calling burnSynthsToTargetOnBehalf() succeeds" time="0.2490" classname="and calling burnSynthsToTargetOnBehalf() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is suspended" timestamp="2022-02-04T17:29:39" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf when Issuance is suspended then calling issueSynthsOnBehalf() reverts" time="0.0300" classname="then calling issueSynthsOnBehalf() reverts">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf when Issuance is suspended and calling issueMaxSynthsOnBehalf() reverts" time="0.0320" classname="and calling issueMaxSynthsOnBehalf() reverts">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf when Issuance is suspended and calling burnSynthsOnBehalf() reverts" time="0.0460" classname="and calling burnSynthsOnBehalf() reverts">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf when Issuance is suspended and calling burnSynthsToTargetOnBehalf() reverts" time="0.0270" classname="and calling burnSynthsToTargetOnBehalf() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is resumed" timestamp="2022-02-04T17:29:43" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="3.8770" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf when Issuance is suspended when Issuance is resumed then calling issueSynthsOnBehalf() succeeds" time="0.1570" classname="then calling issueSynthsOnBehalf() succeeds">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf when Issuance is suspended when Issuance is resumed and calling issueMaxSynthsOnBehalf() succeeds" time="0.1350" classname="and calling issueMaxSynthsOnBehalf() succeeds">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf when Issuance is suspended when Issuance is resumed and calling burnSynthsOnBehalf() succeeds" time="0.1380" classname="and calling burnSynthsOnBehalf() succeeds">
    </testcase>
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 issue and burn on behalf when Issuance is suspended when Issuance is resumed and calling burnSynthsToTargetOnBehalf() succeeds" time="0.3570" classname="and calling burnSynthsToTargetOnBehalf() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Wrapper is set" timestamp="2022-02-04T17:29:46" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 when Wrapper is set should have zero totalIssuedSynths" time="0.1020" classname="should have zero totalIssuedSynths">
    </testcase>
  </testsuite>
  <testsuite name="depositing WETH on the Wrapper to issue sETH" timestamp="2022-02-04T17:29:47" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="1.0160" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 when Wrapper is set depositing WETH on the Wrapper to issue sETH should be able to exclude sETH issued by EtherWrapper from totalIssuedSynths" time="0.2710" classname="should be able to exclude sETH issued by EtherWrapper from totalIssuedSynths">
    </testcase>
  </testsuite>
  <testsuite name="burnForRedemption" timestamp="2022-02-04T17:29:48" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burnForRedemption only allowed by the synth redeemer" time="0.5890" classname="only allowed by the synth redeemer">
    </testcase>
  </testsuite>
  <testsuite name="when a user has 100 sETH" timestamp="2022-02-04T17:29:49" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when burnForRedemption is invoked on the user for 75 sETH" timestamp="2022-02-04T17:29:49" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Issuer.js" time="0.5130" failures="0">
    <testcase name="Contract: Issuer (via Synthetix) when minimum stake time is set to 0 when the issuanceRatio is 0.2 burnForRedemption when a user has 100 sETH when burnForRedemption is invoked on the user for 75 sETH then the user has 25 sETH remaining" time="0.0170" classname="then the user has 25 sETH remaining">
    </testcase>
  </testsuite>
  <testsuite name="Contract: LimitedSetup" timestamp="2022-02-04T17:29:49" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/LimitedSetup.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mixed into a contract with one week setup" timestamp="2022-02-04T17:29:49" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/LimitedSetup.js" time="0.0000" failures="0">
    <testcase name="Contract: LimitedSetup when mixed into a contract with one week setup then the time is the current time plus one week" time="0.0110" classname="then the time is the current time plus one week">
    </testcase>
  </testsuite>
  <testsuite name="when a test function is invoked that is only allowed during setup" timestamp="2022-02-04T17:29:49" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/LimitedSetup.js" time="0.0000" failures="0">
    <testcase name="Contract: LimitedSetup when mixed into a contract with one week setup when a test function is invoked that is only allowed during setup then it succeeds" time="0.0040" classname="then it succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when 6 days pass" timestamp="2022-02-04T17:29:49" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/LimitedSetup.js" time="0.0000" failures="0">
    <testcase name="Contract: LimitedSetup when mixed into a contract with one week setup when a test function is invoked that is only allowed during setup when 6 days pass then it still succeeds" time="0.0110" classname="then it still succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when another day and change passes" timestamp="2022-02-04T17:29:50" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/LimitedSetup.js" time="0.0640" failures="0">
    <testcase name="Contract: LimitedSetup when mixed into a contract with one week setup when a test function is invoked that is only allowed during setup when 6 days pass when another day and change passes then it fails as the setup period has expired" time="0.0150" classname="then it fails as the setup period has expired">
    </testcase>
  </testsuite>
  <testsuite name="Contract: Liquidations" timestamp="2022-02-04T17:29:50" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.0000" failures="0">
    <testcase name="Contract: Liquidations ensure only known functions are mutative" time="0.0550" classname="ensure only known functions are mutative">
    </testcase>
    <testcase name="Contract: Liquidations should set constructor params on deployment" time="0.1660" classname="should set constructor params on deployment">
    </testcase>
  </testsuite>
  <testsuite name="Default settings" timestamp="2022-02-04T17:29:58" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.1090" failures="0">
    <testcase name="Contract: Liquidations Default settings liquidation (issuance) ratio" time="0.0080" classname="liquidation (issuance) ratio">
    </testcase>
    <testcase name="Contract: Liquidations Default settings liquidation collateral ratio is inverted ratio" time="0.0140" classname="liquidation collateral ratio is inverted ratio">
    </testcase>
    <testcase name="Contract: Liquidations Default settings liquidation penalty " time="0.0060" classname="liquidation penalty ">
    </testcase>
    <testcase name="Contract: Liquidations Default settings liquidation delay" time="0.0070" classname="liquidation delay">
    </testcase>
    <testcase name="Contract: Liquidations Default settings issuance ratio is correctly configured as a default" time="0.0090" classname="issuance ratio is correctly configured as a default">
    </testcase>
  </testsuite>
  <testsuite name="with issuanceRatio of 0.125" timestamp="2022-02-04T17:29:58" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="system staleness checks" timestamp="2022-02-04T17:29:58" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when SNX is stale" timestamp="2022-02-04T17:29:58" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.3470" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 system staleness checks when SNX is stale when flagAccountForLiquidation() is invoked, it reverts for rate stale" time="0.0350" classname="when flagAccountForLiquidation() is invoked, it reverts for rate stale">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 system staleness checks when SNX is stale when checkAndRemoveAccountInLiquidation() is invoked, it reverts for rate stale" time="0.0670" classname="when checkAndRemoveAccountInLiquidation() is invoked, it reverts for rate stale">
    </testcase>
  </testsuite>
  <testsuite name="when the system is suspended" timestamp="2022-02-04T17:29:58" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.4910" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 system staleness checks when the system is suspended when liquidateDelinquentAccount() is invoked, it reverts with operation prohibited" time="0.0300" classname="when liquidateDelinquentAccount() is invoked, it reverts with operation prohibited">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 system staleness checks when the system is suspended when checkAndRemoveAccountInLiquidation() is invoked, it reverts with operation prohibited" time="0.0870" classname="when checkAndRemoveAccountInLiquidation() is invoked, it reverts with operation prohibited">
    </testcase>
  </testsuite>
  <testsuite name="when the liquidation default params not set" timestamp="2022-02-04T17:29:58" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.0000" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 system staleness checks when the liquidation default params not set when flagAccountForLiquidation() is invoked, it reverts with liquidation ratio not set" time="0.0490" classname="when flagAccountForLiquidation() is invoked, it reverts with liquidation ratio not set">
    </testcase>
  </testsuite>
  <testsuite name="when the liquidationRatio is set" timestamp="2022-02-04T17:29:59" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.3290" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 system staleness checks when the liquidation default params not set when the liquidationRatio is set when flagAccountForLiquidation() is invoked, it reverts with liquidation delay not set" time="0.0650" classname="when flagAccountForLiquidation() is invoked, it reverts with liquidation delay not set">
    </testcase>
  </testsuite>
  <testsuite name="protected methods" timestamp="2022-02-04T17:29:59" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="only internal contracts can call" timestamp="2022-02-04T17:29:59" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.7900" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 protected methods only internal contracts can call removeAccountInLiquidation() can only be invoked by issuer" time="0.4780" classname="removeAccountInLiquidation() can only be invoked by issuer">
    </testcase>
  </testsuite>
  <testsuite name="calculateAmountToFixCollateral" timestamp="2022-02-04T17:30:00" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="given target ratio of 800%, collateral of $600, debt of $300" timestamp="2022-02-04T17:30:00" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="given liquidation penalty is 10%" timestamp="2022-02-04T17:30:00" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.5120" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 calculateAmountToFixCollateral given target ratio of 800%, collateral of $600, debt of $300 given liquidation penalty is 10% calculates sUSD to fix ratio from 200%, with $600 SNX collateral and $300 debt" time="0.0140" classname="calculates sUSD to fix ratio from 200%, with $600 SNX collateral and $300 debt">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 calculateAmountToFixCollateral given target ratio of 800%, collateral of $600, debt of $300 given liquidation penalty is 10% calculates sUSD to fix ratio from 300%, with $600 SNX collateral and $200 debt" time="0.0170" classname="calculates sUSD to fix ratio from 300%, with $600 SNX collateral and $200 debt">
    </testcase>
  </testsuite>
  <testsuite name="when anyone calls liquidateDelinquentAccount on alice" timestamp="2022-02-04T17:30:00" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="then do liquidation checks" timestamp="2022-02-04T17:30:00" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="1.2140" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice then do liquidation checks when a liquidator has SettlementOwing from hasWaitingPeriodOrSettlementOwing then revert" time="0.0790" classname="when a liquidator has SettlementOwing from hasWaitingPeriodOrSettlementOwing then revert">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice then do liquidation checks when a liquidator has hasWaitingPeriod from hasWaitingPeriodOrSettlementOwing then revert" time="0.0650" classname="when a liquidator has hasWaitingPeriod from hasWaitingPeriodOrSettlementOwing then revert">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice then do liquidation checks when an account is not isOpenForLiquidation then revert" time="0.1230" classname="when an account is not isOpenForLiquidation then revert">
    </testcase>
  </testsuite>
  <testsuite name="when Alice is undercollateralized" timestamp="2022-02-04T17:30:02" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.0000" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized and liquidation Collateral Ratio is 200%" time="0.0190" classname="and liquidation Collateral Ratio is 200%">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized and liquidation penalty is 10%" time="0.0100" classname="and liquidation penalty is 10%">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized and liquidation delay is 3 days" time="0.0120" classname="and liquidation delay is 3 days">
    </testcase>
  </testsuite>
  <testsuite name="when Alice has not been flagged for liquidation" timestamp="2022-02-04T17:30:03" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.9590" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Alice has not been flagged for liquidation and Alice calls checkAndRemoveAccountInLiquidation then it reverts" time="0.0580" classname="and Alice calls checkAndRemoveAccountInLiquidation then it reverts">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Alice has not been flagged for liquidation then isLiquidationDeadlinePassed returns false as no liquidation set" time="0.0130" classname="then isLiquidationDeadlinePassed returns false as no liquidation set">
    </testcase>
  </testsuite>
  <testsuite name="when Bob flags Alice for liquidation" timestamp="2022-02-04T17:30:04" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.0000" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation then sets a deadline liquidation delay of 2 weeks" time="0.0100" classname="then sets a deadline liquidation delay of 2 weeks">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation then emits an event accountFlaggedForLiquidation" time="0.0110" classname="then emits an event accountFlaggedForLiquidation">
    </testcase>
  </testsuite>
  <testsuite name="when deadline has passed and Alice issuance ratio is fixed as SNX price increases" timestamp="2022-02-04T17:30:05" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="1.5520" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation when deadline has passed and Alice issuance ratio is fixed as SNX price increases then isLiquidationDeadlinePassed returns true" time="0.0080" classname="then isLiquidationDeadlinePassed returns true">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation when deadline has passed and Alice issuance ratio is fixed as SNX price increases then isOpenForLiquidation returns false as ratio equal to target issuance ratio" time="0.0540" classname="then isOpenForLiquidation returns false as ratio equal to target issuance ratio">
    </testcase>
  </testsuite>
  <testsuite name="given Alice issuance ratio is higher than the liquidation ratio" timestamp="2022-02-04T17:30:07" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the liquidation deadline has not passed" timestamp="2022-02-04T17:30:07" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="1.6130" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given Alice issuance ratio is higher than the liquidation ratio when the liquidation deadline has not passed then isOpenForLiquidation returns false as deadline not passed" time="0.0610" classname="then isOpenForLiquidation returns false as deadline not passed">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given Alice issuance ratio is higher than the liquidation ratio when the liquidation deadline has not passed then isLiquidationDeadlinePassed returns false" time="0.0740" classname="then isLiquidationDeadlinePassed returns false">
    </testcase>
  </testsuite>
  <testsuite name="fast forward 2 weeks, when the liquidation deadline has passed" timestamp="2022-02-04T17:30:08" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="2.7810" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given Alice issuance ratio is higher than the liquidation ratio fast forward 2 weeks, when the liquidation deadline has passed then isLiquidationDeadlinePassed returns true" time="0.0110" classname="then isLiquidationDeadlinePassed returns true">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given Alice issuance ratio is higher than the liquidation ratio fast forward 2 weeks, when the liquidation deadline has passed then isOpenForLiquidation returns true" time="0.0870" classname="then isOpenForLiquidation returns true">
    </testcase>
  </testsuite>
  <testsuite name="when Bob or anyone else tries to flag Alice address for liquidation again" timestamp="2022-02-04T17:30:11" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="1.6860" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation when Bob or anyone else tries to flag Alice address for liquidation again then it fails for Bob as Alices address is already flagged" time="0.0960" classname="then it fails for Bob as Alices address is already flagged">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation when Bob or anyone else tries to flag Alice address for liquidation again then it fails for Carol Baskin as Alices address is already flagged" time="0.0760" classname="then it fails for Carol Baskin as Alices address is already flagged">
    </testcase>
  </testsuite>
  <testsuite name="when the price of SNX increases" timestamp="2022-02-04T17:30:13" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when Alice calls checkAndRemoveAccountInLiquidation" timestamp="2022-02-04T17:30:13" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="2.5410" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation when the price of SNX increases when Alice calls checkAndRemoveAccountInLiquidation then Alice liquidation entry is removed" time="0.0140" classname="then Alice liquidation entry is removed">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation when the price of SNX increases when Alice calls checkAndRemoveAccountInLiquidation then Alices account is not open for liquidation" time="0.0550" classname="then Alices account is not open for liquidation">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation when the price of SNX increases when Alice calls checkAndRemoveAccountInLiquidation then events AccountRemovedFromLiquidation are emitted" time="0.0000" classname="then events AccountRemovedFromLiquidation are emitted">
    </testcase>
  </testsuite>
  <testsuite name="given the liquidation deadline has passed " timestamp="2022-02-04T17:30:15" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when Alice c-ratio is above the liquidation Ratio and Bob liquidates alice" timestamp="2022-02-04T17:30:15" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="5.4370" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice c-ratio is above the liquidation Ratio and Bob liquidates alice then Alice liquidation entry remains" time="0.0130" classname="then Alice liquidation entry remains">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice c-ratio is above the liquidation Ratio and Bob liquidates alice then Alices account is not open for liquidation" time="0.0580" classname="then Alices account is not open for liquidation">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice c-ratio is above the liquidation Ratio and Bob liquidates alice then Bob still has 100sUSD" time="0.0200" classname="then Bob still has 100sUSD">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice c-ratio is above the liquidation Ratio and Bob liquidates alice then Bob still has 0 SNX" time="0.0210" classname="then Bob still has 0 SNX">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice c-ratio is above the liquidation Ratio and Bob liquidates alice then Alice still has 800 SNX" time="0.0270" classname="then Alice still has 800 SNX">
    </testcase>
  </testsuite>
  <testsuite name="when Alice burnSynthsToTarget to fix her c-ratio " timestamp="2022-02-04T17:30:21" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="3.0410" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice burnSynthsToTarget to fix her c-ratio  then Alice liquidation entry is removed" time="0.0120" classname="then Alice liquidation entry is removed">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice burnSynthsToTarget to fix her c-ratio  then Alices account is not open for liquidation" time="0.0560" classname="then Alices account is not open for liquidation">
    </testcase>
  </testsuite>
  <testsuite name="when Alice burnSynths and her c-ratio is still below issuance ratio" timestamp="2022-02-04T17:30:24" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="2.8320" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice burnSynths and her c-ratio is still below issuance ratio then alice debt balance is less amountToBurn" time="0.0220" classname="then alice debt balance is less amountToBurn">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice burnSynths and her c-ratio is still below issuance ratio then Alice liquidation entry is still there" time="0.0100" classname="then Alice liquidation entry is still there">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice burnSynths and her c-ratio is still below issuance ratio then Alices account is still open for liquidation" time="0.0450" classname="then Alices account is still open for liquidation">
    </testcase>
  </testsuite>
  <testsuite name="when Alice burnSynths and her c-ratio is above issuance ratio" timestamp="2022-02-04T17:30:27" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="2.8680" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice burnSynths and her c-ratio is above issuance ratio then alice debt balance is less amountToBurn" time="0.0230" classname="then alice debt balance is less amountToBurn">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice burnSynths and her c-ratio is above issuance ratio then Alice liquidation entry is removed" time="0.0120" classname="then Alice liquidation entry is removed">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice burnSynths and her c-ratio is above issuance ratio then Alices account is not open for liquidation" time="0.0570" classname="then Alices account is not open for liquidation">
    </testcase>
  </testsuite>
  <testsuite name="when Alice burns all her debt to fix her c-ratio" timestamp="2022-02-04T17:30:29" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="2.8800" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice burns all her debt to fix her c-ratio then alice has no more debt" time="0.0090" classname="then alice has no more debt">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice burns all her debt to fix her c-ratio then Alice liquidation entry is removed" time="0.0070" classname="then Alice liquidation entry is removed">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice burns all her debt to fix her c-ratio then Alices account is not open for liquidation" time="0.0590" classname="then Alices account is not open for liquidation">
    </testcase>
  </testsuite>
  <testsuite name="when Alice does not fix her c-ratio " timestamp="2022-02-04T17:30:32" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.0000" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  then isOpenForLiquidation returns true for Alice" time="0.0580" classname="then isOpenForLiquidation returns true for Alice">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when carol calls liquidateDelinquentAccount but has 0 sUSD then revert" time="0.1880" classname="when carol calls liquidateDelinquentAccount but has 0 sUSD then revert">
    </testcase>
  </testsuite>
  <testsuite name="when Bobs liquidates alice for 100 sUSD but only has 99 sUSD then revert" timestamp="2022-02-04T17:30:34" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="1.2840" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bobs liquidates alice for 100 sUSD but only has 99 sUSD then revert it should revert" time="0.2090" classname="it should revert">
    </testcase>
  </testsuite>
  <testsuite name="when Alice calls checkAndRemoveAccountInLiquidation" timestamp="2022-02-04T17:30:35" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="1.9470" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Alice calls checkAndRemoveAccountInLiquidation then Alices account is still open for liquidation" time="0.0720" classname="then Alices account is still open for liquidation">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Alice calls checkAndRemoveAccountInLiquidation then Alice liquidation deadline still exists" time="0.0150" classname="then Alice liquidation deadline still exists">
    </testcase>
  </testsuite>
  <testsuite name="when Bob liquidates alice for 100 sUSD to get 110 SNX" timestamp="2022-02-04T17:30:37" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.0000" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX then Bob sUSD balance is reduced by 100 sUSD" time="0.0160" classname="then Bob sUSD balance is reduced by 100 sUSD">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX then Alice debt is reduced by 100 sUSD" time="0.0340" classname="then Alice debt is reduced by 100 sUSD">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX then Alice has less SNX + penalty" time="0.0200" classname="then Alice has less SNX + penalty">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX then Bob has extra 100 SNX + the 10 SNX penalty (110)" time="0.0100" classname="then Bob has extra 100 SNX + the 10 SNX penalty (110)">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX then Alice SNX balance is 690" time="0.0190" classname="then Alice SNX balance is 690">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX then Alice issuance ratio is updated in feePoolState" time="0.0320" classname="then Alice issuance ratio is updated in feePoolState">
    </testcase>
  </testsuite>
  <testsuite name="given carol has obtained sUSD to liquidate alice" timestamp="2022-02-04T17:30:45" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when carol liquidates Alice with 10 x 5 sUSD" timestamp="2022-02-04T17:30:45" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="29.9370" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX given carol has obtained sUSD to liquidate alice when carol liquidates Alice with 10 x 5 sUSD then Carols sUSD balance is reduced by 50 sUSD" time="0.0150" classname="then Carols sUSD balance is reduced by 50 sUSD">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX given carol has obtained sUSD to liquidate alice when carol liquidates Alice with 10 x 5 sUSD then Alice debt is reduced by 50 sUSD" time="0.0290" classname="then Alice debt is reduced by 50 sUSD">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX given carol has obtained sUSD to liquidate alice when carol liquidates Alice with 10 x 5 sUSD then Alice has less SNX + penalty" time="0.0240" classname="then Alice has less SNX + penalty">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX given carol has obtained sUSD to liquidate alice when carol liquidates Alice with 10 x 5 sUSD then Carol has extra 50 SNX + the 5 SNX penalty (55)" time="0.0110" classname="then Carol has extra 50 SNX + the 5 SNX penalty (55)">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX given carol has obtained sUSD to liquidate alice when carol liquidates Alice with 10 x 5 sUSD then Alice SNX balance is 635" time="0.0210" classname="then Alice SNX balance is 635">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX given carol has obtained sUSD to liquidate alice when carol liquidates Alice with 10 x 5 sUSD then Alice issuance ratio is updated in feePoolState" time="0.0260" classname="then Alice issuance ratio is updated in feePoolState">
    </testcase>
  </testsuite>
  <testsuite name="when carol liquidates Alice with 50 sUSD" timestamp="2022-02-04T17:31:15" tests="7" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.0000" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX given carol has obtained sUSD to liquidate alice when carol liquidates Alice with 50 sUSD then Carols sUSD balance is reduced by 50 sUSD" time="0.0110" classname="then Carols sUSD balance is reduced by 50 sUSD">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX given carol has obtained sUSD to liquidate alice when carol liquidates Alice with 50 sUSD then Alice debt is reduced by 50 sUSD" time="0.0250" classname="then Alice debt is reduced by 50 sUSD">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX given carol has obtained sUSD to liquidate alice when carol liquidates Alice with 50 sUSD then Alice has less SNX + penalty" time="0.0210" classname="then Alice has less SNX + penalty">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX given carol has obtained sUSD to liquidate alice when carol liquidates Alice with 50 sUSD then Carol has extra 50 SNX + the 5 SNX penalty (55)" time="0.0170" classname="then Carol has extra 50 SNX + the 5 SNX penalty (55)">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX given carol has obtained sUSD to liquidate alice when carol liquidates Alice with 50 sUSD then Alice SNX balance is 635" time="0.0220" classname="then Alice SNX balance is 635">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX given carol has obtained sUSD to liquidate alice when carol liquidates Alice with 50 sUSD then Alice issuance ratio is updated in feePoolState" time="0.0120" classname="then Alice issuance ratio is updated in feePoolState">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX given carol has obtained sUSD to liquidate alice when carol liquidates Alice with 50 sUSD then events AccountLiquidated are emitted" time="0.0010" classname="then events AccountLiquidated are emitted">
    </testcase>
  </testsuite>
  <testsuite name="when Bob liqudates Alice with 1000 sUSD" timestamp="2022-02-04T17:31:26" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="11.5780" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX given carol has obtained sUSD to liquidate alice when carol liquidates Alice with 50 sUSD when Bob liqudates Alice with 1000 sUSD then Bobs partially liquidates the 1000 sUSD to repair Alice to target issuance ratio" time="0.0450" classname="then Bobs partially liquidates the 1000 sUSD to repair Alice to target issuance ratio">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX given carol has obtained sUSD to liquidate alice when carol liquidates Alice with 50 sUSD when Bob liqudates Alice with 1000 sUSD then Alice liquidation entry is removed" time="0.0210" classname="then Alice liquidation entry is removed">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX given carol has obtained sUSD to liquidate alice when carol liquidates Alice with 50 sUSD when Bob liqudates Alice with 1000 sUSD then Alices account is not open for liquidation" time="0.0670" classname="then Alices account is not open for liquidation">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX given carol has obtained sUSD to liquidate alice when carol liquidates Alice with 50 sUSD when Bob liqudates Alice with 1000 sUSD then events AccountLiquidated &amp; AccountRemovedFromLiquidation are emitted" time="0.0000" classname="then events AccountLiquidated &amp; AccountRemovedFromLiquidation are emitted">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  when Bob liquidates alice for 100 sUSD to get 110 SNX given carol has obtained sUSD to liquidate alice when carol liquidates Alice with 50 sUSD when Bob liqudates Alice with 1000 sUSD then Alice issuanceRatio is now at the target issuanceRatio" time="0.0960" classname="then Alice issuanceRatio is now at the target issuanceRatio">
    </testcase>
  </testsuite>
  <testsuite name="given Alice has $600 Debt, $800 worth of SNX Collateral and c-ratio at 133.33%" timestamp="2022-02-04T17:31:38" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when bob calls liquidate on Alice in multiple calls until fixing the ratio" timestamp="2022-02-04T17:31:38" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="5.8240" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 when anyone calls liquidateDelinquentAccount on alice when Alice is undercollateralized when Bob flags Alice for liquidation given the liquidation deadline has passed  when Alice does not fix her c-ratio  given Alice has $600 Debt, $800 worth of SNX Collateral and c-ratio at 133.33% when bob calls liquidate on Alice in multiple calls until fixing the ratio then Bob can liquidate Alice multiple times until fixing the c-ratio" time="2.6330" classname="then Bob can liquidate Alice multiple times until fixing the c-ratio">
    </testcase>
  </testsuite>
  <testsuite name="Given Alice has SNX and never issued any debt" timestamp="2022-02-04T17:31:43" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.5810" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 Given Alice has SNX and never issued any debt then she should not be able to be flagged for liquidation" time="0.1950" classname="then she should not be able to be flagged for liquidation">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 Given Alice has SNX and never issued any debt then liquidateDelinquentAccount fails" time="0.1080" classname="then liquidateDelinquentAccount fails">
    </testcase>
  </testsuite>
  <testsuite name="When David collateral value is less than debt issued + penalty) " timestamp="2022-02-04T17:31:44" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.0000" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 When David collateral value is less than debt issued + penalty)  then his collateral ratio should be greater than 1 (more debt than collateral)" time="0.0940" classname="then his collateral ratio should be greater than 1 (more debt than collateral)">
    </testcase>
  </testsuite>
  <testsuite name="when Bob flags and tries to liquidate David" timestamp="2022-02-04T17:31:44" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.0000" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 When David collateral value is less than debt issued + penalty)  when Bob flags and tries to liquidate David then david is openForLiquidation" time="0.0430" classname="then david is openForLiquidation">
    </testcase>
  </testsuite>
  <testsuite name="when the SNX rate is stale" timestamp="2022-02-04T17:31:45" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="1.1190" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 When David collateral value is less than debt issued + penalty)  when Bob flags and tries to liquidate David when the SNX rate is stale then liquidate reverts" time="0.1980" classname="then liquidate reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Bob liquidates all of davids collateral" timestamp="2022-02-04T17:31:47" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="0.0000" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 When David collateral value is less than debt issued + penalty)  when Bob flags and tries to liquidate David when Bob liquidates all of davids collateral then David should have 0 collateral" time="0.0840" classname="then David should have 0 collateral">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 When David collateral value is less than debt issued + penalty)  when Bob flags and tries to liquidate David when Bob liquidates all of davids collateral then David should have a collateral ratio of 0" time="0.0840" classname="then David should have a collateral ratio of 0">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 When David collateral value is less than debt issued + penalty)  when Bob flags and tries to liquidate David when Bob liquidates all of davids collateral then David should still have debt owing" time="0.0290" classname="then David should still have debt owing">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 When David collateral value is less than debt issued + penalty)  when Bob flags and tries to liquidate David when Bob liquidates all of davids collateral then David wont be open for liquidation" time="0.0770" classname="then David wont be open for liquidation">
    </testcase>
  </testsuite>
  <testsuite name="then David should be able to check and remove liquidation flag as no more collateral left" timestamp="2022-02-04T17:31:56" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Liquidations.js" time="4.6070" failures="0">
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 When David collateral value is less than debt issued + penalty)  when Bob flags and tries to liquidate David when Bob liquidates all of davids collateral then David should be able to check and remove liquidation flag as no more collateral left then David liquidation entry is removed" time="0.0060" classname="then David liquidation entry is removed">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 When David collateral value is less than debt issued + penalty)  when Bob flags and tries to liquidate David when Bob liquidates all of davids collateral then David should be able to check and remove liquidation flag as no more collateral left then David account is not open for liquidation" time="0.0540" classname="then David account is not open for liquidation">
    </testcase>
    <testcase name="Contract: Liquidations with issuanceRatio of 0.125 When David collateral value is less than debt issued + penalty)  when Bob flags and tries to liquidate David when Bob liquidates all of davids collateral then David should be able to check and remove liquidation flag as no more collateral left then events AccountRemovedFromLiquidation are emitted" time="0.0010" classname="then events AccountRemovedFromLiquidation are emitted">
    </testcase>
  </testsuite>
  <testsuite name="Contract: Math" timestamp="2022-02-04T17:32:00" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Math.js" time="0.4400" failures="0">
    <testcase name="Contract: Math should correctly calculate x^0 as 1" time="0.0220" classname="should correctly calculate x^0 as 1">
    </testcase>
    <testcase name="Contract: Math should return correct results for expected power for x^1 as x" time="0.0180" classname="should return correct results for expected power for x^1 as x">
    </testcase>
    <testcase name="Contract: Math should return correct results for expected power for x^2" time="0.0210" classname="should return correct results for expected power for x^2">
    </testcase>
    <testcase name="Contract: Math should return correct results for expected power for x^n" time="0.0370" classname="should return correct results for expected power for x^n">
    </testcase>
    <testcase name="Contract: Math should return correct results for expected power of decimals x^n" time="0.0250" classname="should return correct results for expected power of decimals x^n">
    </testcase>
    <testcase name="Contract: Math should revert overflow uint when base number power to x^n is too large" time="0.0240" classname="should revert overflow uint when base number power to x^n is too large">
    </testcase>
  </testsuite>
  <testsuite name="Contract: MinimalProxyFactory" timestamp="2022-02-04T17:32:01" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MinimalProxyFactory.js" time="0.0000" failures="0">
    <testcase name="Contract: MinimalProxyFactory generates the correct create data" time="0.0230" classname="generates the correct create data">
    </testcase>
  </testsuite>
  <testsuite name="proxy can invoke non-payable functionality" timestamp="2022-02-04T17:32:01" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MinimalProxyFactory.js" time="0.2760" failures="0">
    <testcase name="Contract: MinimalProxyFactory proxy can invoke non-payable functionality can execute functions" time="0.0570" classname="can execute functions">
    </testcase>
    <testcase name="Contract: MinimalProxyFactory proxy can invoke non-payable functionality cannot send ETH if function is not payable" time="0.0440" classname="cannot send ETH if function is not payable">
    </testcase>
  </testsuite>
  <testsuite name="proxy can invoke payable functionality" timestamp="2022-02-04T17:32:01" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MinimalProxyFactory.js" time="0.1250" failures="0">
    <testcase name="Contract: MinimalProxyFactory proxy can invoke payable functionality can send ETH on calls" time="0.0550" classname="can send ETH on calls">
    </testcase>
  </testsuite>
  <testsuite name="proxy can handle reverts" timestamp="2022-02-04T17:32:01" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MinimalProxyFactory.js" time="0.1200" failures="0">
    <testcase name="Contract: MinimalProxyFactory proxy can handle reverts can forwards reverts" time="0.0140" classname="can forwards reverts">
    </testcase>
  </testsuite>
  <testsuite name="Contract: MintableSynthetix (spec tests)" timestamp="2022-02-04T17:32:01" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MintableSynthetix.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when system is setup" timestamp="2022-02-04T17:32:01" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MintableSynthetix.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="mintSecondary()" timestamp="2022-02-04T17:32:06" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MintableSynthetix.spec.js" time="0.0620" failures="0">
    <testcase name="Contract: MintableSynthetix (spec tests) when system is setup mintSecondary() should tranfer the tokens to the right account" time="0.0100" classname="should tranfer the tokens to the right account">
    </testcase>
    <testcase name="Contract: MintableSynthetix (spec tests) when system is setup mintSecondary() should increase the total supply" time="0.0150" classname="should increase the total supply">
    </testcase>
    <testcase name="Contract: MintableSynthetix (spec tests) when system is setup mintSecondary() should emit a Transfer event" time="0.0000" classname="should emit a Transfer event">
    </testcase>
  </testsuite>
  <testsuite name="mintSecondaryRewards()" timestamp="2022-02-04T17:32:06" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MintableSynthetix.spec.js" time="0.1080" failures="0">
    <testcase name="Contract: MintableSynthetix (spec tests) when system is setup mintSecondaryRewards() should tranfer the tokens initially to RewardsDistribution which  transfers them to RewardEscrowV2 (no distributions)" time="0.0190" classname="should tranfer the tokens initially to RewardsDistribution which  transfers them to RewardEscrowV2 (no distributions)">
    </testcase>
    <testcase name="Contract: MintableSynthetix (spec tests) when system is setup mintSecondaryRewards() should increase the total supply" time="0.0050" classname="should increase the total supply">
    </testcase>
    <testcase name="Contract: MintableSynthetix (spec tests) when system is setup mintSecondaryRewards() should emit a Transfer event" time="0.0000" classname="should emit a Transfer event">
    </testcase>
  </testsuite>
  <testsuite name="burnSecondary()" timestamp="2022-02-04T17:32:06" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MintableSynthetix.spec.js" time="0.0560" failures="0">
    <testcase name="Contract: MintableSynthetix (spec tests) when system is setup burnSecondary() should tranfer the tokens to the right account" time="0.0070" classname="should tranfer the tokens to the right account">
    </testcase>
    <testcase name="Contract: MintableSynthetix (spec tests) when system is setup burnSecondary() should decrease the total supply" time="0.0060" classname="should decrease the total supply">
    </testcase>
    <testcase name="Contract: MintableSynthetix (spec tests) when system is setup burnSecondary() should emit a Transfer event" time="0.0000" classname="should emit a Transfer event">
    </testcase>
  </testsuite>
  <testsuite name="Contract: MintableSynthetix (unit tests)" timestamp="2022-02-04T17:32:06" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MintableSynthetix.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: MintableSynthetix (unit tests) ensure only known functions are mutative" time="0.0370" classname="ensure only known functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="initial setup, smock all deps" timestamp="2022-02-04T17:32:06" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MintableSynthetix.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the target is deployed" timestamp="2022-02-04T17:32:06" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MintableSynthetix.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: MintableSynthetix (unit tests) initial setup, smock all deps when the target is deployed should set constructor params on deployment" time="0.1010" classname="should set constructor params on deployment">
    </testcase>
  </testsuite>
  <testsuite name="mintSecondary()" timestamp="2022-02-04T17:32:07" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MintableSynthetix.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="failure modes" timestamp="2022-02-04T17:32:07" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MintableSynthetix.unit.js" time="1.2110" failures="0">
    <testcase name="Contract: MintableSynthetix (unit tests) initial setup, smock all deps when the target is deployed mintSecondary() failure modes should only allow SynthetixBridgeToBase to call mintSecondary()" time="0.7800" classname="should only allow SynthetixBridgeToBase to call mintSecondary()">
    </testcase>
  </testsuite>
  <testsuite name="when invoked by the bridge" timestamp="2022-02-04T17:32:08" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MintableSynthetix.unit.js" time="1.3420" failures="0">
    <testcase name="Contract: MintableSynthetix (unit tests) initial setup, smock all deps when the target is deployed mintSecondary() when invoked by the bridge should increase the total supply" time="0.0050" classname="should increase the total supply">
    </testcase>
    <testcase name="Contract: MintableSynthetix (unit tests) initial setup, smock all deps when the target is deployed mintSecondary() when invoked by the bridge should invoke emitTransfer (which invokes proxy._emit" time="0.0030" classname="should invoke emitTransfer (which invokes proxy._emit">
    </testcase>
  </testsuite>
  <testsuite name="mintSecondaryRewards()" timestamp="2022-02-04T17:32:10" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MintableSynthetix.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="failure modes" timestamp="2022-02-04T17:32:10" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MintableSynthetix.unit.js" time="1.2640" failures="0">
    <testcase name="Contract: MintableSynthetix (unit tests) initial setup, smock all deps when the target is deployed mintSecondaryRewards() failure modes should only allow SynthetixBridgeToBase to call mintSecondaryRewards()" time="0.8140" classname="should only allow SynthetixBridgeToBase to call mintSecondaryRewards()">
    </testcase>
  </testsuite>
  <testsuite name="when invoked by the bridge" timestamp="2022-02-04T17:32:11" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MintableSynthetix.unit.js" time="1.4120" failures="0">
    <testcase name="Contract: MintableSynthetix (unit tests) initial setup, smock all deps when the target is deployed mintSecondaryRewards() when invoked by the bridge should increase the total supply" time="0.0070" classname="should increase the total supply">
    </testcase>
    <testcase name="Contract: MintableSynthetix (unit tests) initial setup, smock all deps when the target is deployed mintSecondaryRewards() when invoked by the bridge should invoke emitTransfer (which invokes proxy._emit" time="0.0010" classname="should invoke emitTransfer (which invokes proxy._emit">
    </testcase>
    <testcase name="Contract: MintableSynthetix (unit tests) initial setup, smock all deps when the target is deployed mintSecondaryRewards() when invoked by the bridge should invoke distributeRewards" time="0.0010" classname="should invoke distributeRewards">
    </testcase>
  </testsuite>
  <testsuite name="burnSecondary()" timestamp="2022-02-04T17:32:12" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MintableSynthetix.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="failure modes" timestamp="2022-02-04T17:32:12" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MintableSynthetix.unit.js" time="1.0620" failures="0">
    <testcase name="Contract: MintableSynthetix (unit tests) initial setup, smock all deps when the target is deployed burnSecondary() failure modes should only allow SynthetixBridgeToBase to call burnSecondary()" time="0.6440" classname="should only allow SynthetixBridgeToBase to call burnSecondary()">
    </testcase>
  </testsuite>
  <testsuite name="when invoked by the bridge" timestamp="2022-02-04T17:32:13" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MintableSynthetix.unit.js" time="0.8180" failures="0">
    <testcase name="Contract: MintableSynthetix (unit tests) initial setup, smock all deps when the target is deployed burnSecondary() when invoked by the bridge should decrease the total supply" time="0.0090" classname="should decrease the total supply">
    </testcase>
    <testcase name="Contract: MintableSynthetix (unit tests) initial setup, smock all deps when the target is deployed burnSecondary() when invoked by the bridge should invoke emitTransfer (which invokes proxy._emit" time="0.0010" classname="should invoke emitTransfer (which invokes proxy._emit">
    </testcase>
  </testsuite>
  <testsuite name="Contract: MixinResolver" timestamp="2022-02-04T17:32:14" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MixinResolver.js" time="0.0000" failures="0">
    <testcase name="Contract: MixinResolver ensure only known functions are mutative" time="0.0260" classname="ensure only known functions are mutative">
    </testcase>
    <testcase name="Contract: MixinResolver it fails when instantiated directly" time="0.0000" classname="it fails when instantiated directly">
    </testcase>
  </testsuite>
  <testsuite name="when mixed into a contract" timestamp="2022-02-04T17:32:14" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MixinResolver.js" time="0.0000" failures="0">
    <testcase name="Contract: MixinResolver when mixed into a contract resolver set on construction" time="0.0050" classname="resolver set on construction">
    </testcase>
    <testcase name="Contract: MixinResolver when mixed into a contract resolverAddressesRequired() view" time="0.0080" classname="resolverAddressesRequired() view">
    </testcase>
  </testsuite>
  <testsuite name="rebuildCache()" timestamp="2022-02-04T17:32:14" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MixinResolver.js" time="0.0000" failures="0">
    <testcase name="Contract: MixinResolver when mixed into a contract rebuildCache() when invoked without all the addresses it needs preset" time="0.0210" classname="when invoked without all the addresses it needs preset">
    </testcase>
  </testsuite>
  <testsuite name="when the given address resolver has all the required keys" timestamp="2022-02-04T17:32:14" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MixinResolver.js" time="0.1310" failures="0">
    <testcase name="Contract: MixinResolver when mixed into a contract rebuildCache() when the given address resolver has all the required keys then when invoked by the owner it succeeds" time="0.0320" classname="then when invoked by the owner it succeeds">
    </testcase>
  </testsuite>
  <testsuite name="isResolverCached()" timestamp="2022-02-04T17:32:15" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MixinResolver.js" time="0.0000" failures="0">
    <testcase name="Contract: MixinResolver when mixed into a contract isResolverCached() false when not all addresses cached" time="0.0110" classname="false when not all addresses cached">
    </testcase>
  </testsuite>
  <testsuite name="when the given address resolver has all the required keys" timestamp="2022-02-04T17:32:15" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MixinResolver.js" time="0.0000" failures="0">
    <testcase name="Contract: MixinResolver when mixed into a contract isResolverCached() when the given address resolver has all the required keys still false when given resolver not cached" time="0.0090" classname="still false when given resolver not cached">
    </testcase>
  </testsuite>
  <testsuite name="when rebuildCache() invoked" timestamp="2022-02-04T17:32:15" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MixinResolver.js" time="0.1160" failures="0">
    <testcase name="Contract: MixinResolver when mixed into a contract isResolverCached() when the given address resolver has all the required keys when rebuildCache() invoked then true as everything synced" time="0.0200" classname="then true as everything synced">
    </testcase>
  </testsuite>
  <testsuite name="Contract: MultiCollateralSynth" timestamp="2022-02-04T17:32:15" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MultiCollateralSynth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a MultiCollateral synth is added and connected to Synthetix" timestamp="2022-02-04T17:32:20" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MultiCollateralSynth.js" time="0.0000" failures="0">
    <testcase name="Contract: MultiCollateralSynth when a MultiCollateral synth is added and connected to Synthetix ensure only known functions are mutative" time="0.0270" classname="ensure only known functions are mutative">
    </testcase>
    <testcase name="Contract: MultiCollateralSynth when a MultiCollateral synth is added and connected to Synthetix ensure the list of resolver addresses are as expected" time="0.0070" classname="ensure the list of resolver addresses are as expected">
    </testcase>
  </testsuite>
  <testsuite name="when non-multiCollateral tries to issue" timestamp="2022-02-04T17:32:21" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MultiCollateralSynth.js" time="1.2610" failures="0">
    <testcase name="Contract: MultiCollateralSynth when a MultiCollateral synth is added and connected to Synthetix when non-multiCollateral tries to issue then it fails" time="0.8210" classname="then it fails">
    </testcase>
  </testsuite>
  <testsuite name="when non-multiCollateral tries to burn" timestamp="2022-02-04T17:32:22" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MultiCollateralSynth.js" time="1.2170" failures="0">
    <testcase name="Contract: MultiCollateralSynth when a MultiCollateral synth is added and connected to Synthetix when non-multiCollateral tries to burn then it fails" time="0.8460" classname="then it fails">
    </testcase>
  </testsuite>
  <testsuite name="when multiCollateral is set to the owner" timestamp="2022-02-04T17:32:24" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MultiCollateralSynth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when multiCollateral tries to issue" timestamp="2022-02-04T17:32:24" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MultiCollateralSynth.js" time="0.6460" failures="0">
    <testcase name="Contract: MultiCollateralSynth when a MultiCollateral synth is added and connected to Synthetix when multiCollateral is set to the owner when multiCollateral tries to issue then it can issue new synths" time="0.1920" classname="then it can issue new synths">
    </testcase>
  </testsuite>
  <testsuite name="when multiCollateral tries to burn" timestamp="2022-02-04T17:32:24" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MultiCollateralSynth.js" time="0.7810" failures="0">
    <testcase name="Contract: MultiCollateralSynth when a MultiCollateral synth is added and connected to Synthetix when multiCollateral is set to the owner when multiCollateral tries to burn then it can burn synths" time="0.3290" classname="then it can burn synths">
    </testcase>
  </testsuite>
  <testsuite name="when synthetix set to account1" timestamp="2022-02-04T17:32:25" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/MultiCollateralSynth.js" time="0.5970" failures="0">
    <testcase name="Contract: MultiCollateralSynth when a MultiCollateral synth is added and connected to Synthetix when multiCollateral is set to the owner when synthetix set to account1 then it can issue new synths as account1" time="0.0990" classname="then it can issue new synths as account1">
    </testcase>
  </testsuite>
  <testsuite name="Contract: NativeEtherWrapper" timestamp="2022-02-04T17:32:26" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/NativeEtherWrapper.js" time="0.0000" failures="0">
    <testcase name="Contract: NativeEtherWrapper ensure only expected functions are mutative" time="0.1190" classname="ensure only expected functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="On deployment of Contract" timestamp="2022-02-04T17:32:36" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/NativeEtherWrapper.js" time="0.0580" failures="0">
    <testcase name="Contract: NativeEtherWrapper On deployment of Contract should set constructor params on deployment" time="0.0180" classname="should set constructor params on deployment">
    </testcase>
    <testcase name="Contract: NativeEtherWrapper On deployment of Contract should access its dependencies via the address resolver" time="0.0120" classname="should access its dependencies via the address resolver">
    </testcase>
  </testsuite>
  <testsuite name="mint" timestamp="2022-02-04T17:32:37" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/NativeEtherWrapper.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when called with 0 ETH sent" timestamp="2022-02-04T17:32:37" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/NativeEtherWrapper.js" time="0.1540" failures="0">
    <testcase name="Contract: NativeEtherWrapper mint when called with 0 ETH sent reverts" time="0.0470" classname="reverts">
    </testcase>
  </testsuite>
  <testsuite name="when ETH is sent with call" timestamp="2022-02-04T17:32:37" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/NativeEtherWrapper.js" time="0.5310" failures="0">
    <testcase name="Contract: NativeEtherWrapper mint when ETH is sent with call wraps sent ETH into WETH" time="0.0150" classname="wraps sent ETH into WETH">
    </testcase>
    <testcase name="Contract: NativeEtherWrapper mint when ETH is sent with call calls EtherWrapper.mint(amount)" time="0.0050" classname="calls EtherWrapper.mint(amount)">
    </testcase>
    <testcase name="Contract: NativeEtherWrapper mint when ETH is sent with call transfers sETH to msg.sender" time="0.0300" classname="transfers sETH to msg.sender">
    </testcase>
  </testsuite>
  <testsuite name="burn" timestamp="2022-02-04T17:32:37" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/NativeEtherWrapper.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when called with amount = 0" timestamp="2022-02-04T17:32:37" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/NativeEtherWrapper.js" time="0.0620" failures="0">
    <testcase name="Contract: NativeEtherWrapper burn when called with amount = 0 reverts" time="0.0250" classname="reverts">
    </testcase>
  </testsuite>
  <testsuite name="when called with 0 sETH balance" timestamp="2022-02-04T17:32:37" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/NativeEtherWrapper.js" time="0.0800" failures="0">
    <testcase name="Contract: NativeEtherWrapper burn when called with 0 sETH balance reverts" time="0.0480" classname="reverts">
    </testcase>
  </testsuite>
  <testsuite name="when called with sETH balance" timestamp="2022-02-04T17:32:37" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/NativeEtherWrapper.js" time="0.9060" failures="0">
    <testcase name="Contract: NativeEtherWrapper burn when called with sETH balance transfers sETH from msg.sender to contract" time="0.0210" classname="transfers sETH from msg.sender to contract">
    </testcase>
    <testcase name="Contract: NativeEtherWrapper burn when called with sETH balance calls EtherWrapper.burn(amount)" time="0.0030" classname="calls EtherWrapper.burn(amount)">
    </testcase>
    <testcase name="Contract: NativeEtherWrapper burn when called with sETH balance unwraps received WETH into ETH" time="0.0040" classname="unwraps received WETH into ETH">
    </testcase>
  </testsuite>
  <testsuite name="Contract: Owned" timestamp="2022-02-04T17:32:38" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Owned.js" time="0.0000" failures="0">
    <testcase name="Contract: Owned should revert when owner parameter is passed the zero address" time="0.0310" classname="should revert when owner parameter is passed the zero address">
    </testcase>
    <testcase name="Contract: Owned should set owner address on deployment" time="0.0310" classname="should set owner address on deployment">
    </testcase>
  </testsuite>
  <testsuite name="given an instance" timestamp="2022-02-04T17:32:38" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Owned.js" time="0.2830" failures="0">
    <testcase name="Contract: Owned given an instance should not nominate new owner when not invoked by current contract owner" time="0.0330" classname="should not nominate new owner when not invoked by current contract owner">
    </testcase>
    <testcase name="Contract: Owned given an instance should nominate new owner when invoked by current contract owner" time="0.0250" classname="should nominate new owner when invoked by current contract owner">
    </testcase>
    <testcase name="Contract: Owned given an instance should not accept new owner nomination when not invoked by nominated owner" time="0.0230" classname="should not accept new owner nomination when not invoked by nominated owner">
    </testcase>
    <testcase name="Contract: Owned given an instance should accept new owner nomination when invoked by nominated owner" time="0.0660" classname="should accept new owner nomination when invoked by nominated owner">
    </testcase>
  </testsuite>
  <testsuite name="Contract: OwnerRelayOnEthereum" timestamp="2022-02-04T17:32:39" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/OwnerRelayOnEthereum.js" time="0.0000" failures="0">
    <testcase name="Contract: OwnerRelayOnEthereum requires the expected contracts" time="0.0240" classname="requires the expected contracts">
    </testcase>
    <testcase name="Contract: OwnerRelayOnEthereum shows that only the expected functions are mutative" time="0.0870" classname="shows that only the expected functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="when attempting to initiate a relay from a non-owner account" timestamp="2022-02-04T17:32:41" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/OwnerRelayOnEthereum.js" time="0.0460" failures="0">
    <testcase name="Contract: OwnerRelayOnEthereum when attempting to initiate a relay from a non-owner account reverts with the expected error" time="0.0460" classname="reverts with the expected error">
    </testcase>
  </testsuite>
  <testsuite name="when attempting to initiate a relay batch from a non-owner account" timestamp="2022-02-04T17:32:41" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/OwnerRelayOnEthereum.js" time="0.0240" failures="0">
    <testcase name="Contract: OwnerRelayOnEthereum when attempting to initiate a relay batch from a non-owner account reverts with the expected error" time="0.0230" classname="reverts with the expected error">
    </testcase>
  </testsuite>
  <testsuite name="when attempting to initiate a relay batch from an owner account but there is argument inconsistency" timestamp="2022-02-04T17:32:41" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/OwnerRelayOnEthereum.js" time="0.0230" failures="0">
    <testcase name="Contract: OwnerRelayOnEthereum when attempting to initiate a relay batch from an owner account but there is argument inconsistency reverts with the expected error" time="0.0210" classname="reverts with the expected error">
    </testcase>
  </testsuite>
  <testsuite name="when relaying from the owner account" timestamp="2022-02-04T17:32:41" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/OwnerRelayOnEthereum.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when initiating a single relay" timestamp="2022-02-04T17:32:41" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/OwnerRelayOnEthereum.js" time="0.0000" failures="0">
    <testcase name="Contract: OwnerRelayOnEthereum when relaying from the owner account when initiating a single relay relayed a message to OwnerRelayOnOptimism" time="0.0010" classname="relayed a message to OwnerRelayOnOptimism">
    </testcase>
    <testcase name="Contract: OwnerRelayOnEthereum when relaying from the owner account when initiating a single relay relayed the message with the expected crossDomainGasLimit" time="0.0000" classname="relayed the message with the expected crossDomainGasLimit">
    </testcase>
    <testcase name="Contract: OwnerRelayOnEthereum when relaying from the owner account when initiating a single relay relayed the correct data" time="0.0010" classname="relayed the correct data">
    </testcase>
    <testcase name="Contract: OwnerRelayOnEthereum when relaying from the owner account when initiating a single relay emited a RelayInitiated event" time="0.0000" classname="emited a RelayInitiated event">
    </testcase>
  </testsuite>
  <testsuite name="when not specifying a cross domain relay gas limit" timestamp="2022-02-04T17:32:41" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/OwnerRelayOnEthereum.js" time="0.0390" failures="0">
    <testcase name="Contract: OwnerRelayOnEthereum when relaying from the owner account when initiating a single relay when not specifying a cross domain relay gas limit relayed the message with the default crossDomainGasLimit" time="0.0000" classname="relayed the message with the default crossDomainGasLimit">
    </testcase>
  </testsuite>
  <testsuite name="when initiating a relay batch" timestamp="2022-02-04T17:32:41" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/OwnerRelayOnEthereum.js" time="0.0000" failures="0">
    <testcase name="Contract: OwnerRelayOnEthereum when relaying from the owner account when initiating a relay batch relayed a message to OwnerRelayOnOptimism" time="0.0000" classname="relayed a message to OwnerRelayOnOptimism">
    </testcase>
    <testcase name="Contract: OwnerRelayOnEthereum when relaying from the owner account when initiating a relay batch relayed the message with the expected crossDomainGasLimit" time="0.0000" classname="relayed the message with the expected crossDomainGasLimit">
    </testcase>
    <testcase name="Contract: OwnerRelayOnEthereum when relaying from the owner account when initiating a relay batch relayed the correct data" time="0.0000" classname="relayed the correct data">
    </testcase>
    <testcase name="Contract: OwnerRelayOnEthereum when relaying from the owner account when initiating a relay batch emited a RelayBatchInitiated event" time="0.0010" classname="emited a RelayBatchInitiated event">
    </testcase>
  </testsuite>
  <testsuite name="when not specifying a cross domain relay gas limit" timestamp="2022-02-04T17:32:41" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/OwnerRelayOnEthereum.js" time="0.0560" failures="0">
    <testcase name="Contract: OwnerRelayOnEthereum when relaying from the owner account when initiating a relay batch when not specifying a cross domain relay gas limit relayed the message with the default crossDomainGasLimit" time="0.0010" classname="relayed the message with the default crossDomainGasLimit">
    </testcase>
  </testsuite>
  <testsuite name="Contract: OwnerRelayOnOptimism" timestamp="2022-02-04T17:32:41" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/OwnerRelayOnOptimism.js" time="0.0000" failures="0">
    <testcase name="Contract: OwnerRelayOnOptimism requires the expected contracts" time="0.0170" classname="requires the expected contracts">
    </testcase>
    <testcase name="Contract: OwnerRelayOnOptimism shows that temp owner is set correctly" time="0.0080" classname="shows that temp owner is set correctly">
    </testcase>
    <testcase name="Contract: OwnerRelayOnOptimism shows that the temp owner duration is set correctly" time="0.0080" classname="shows that the temp owner duration is set correctly">
    </testcase>
    <testcase name="Contract: OwnerRelayOnOptimism shows that only the expected functions are mutative" time="0.0890" classname="shows that only the expected functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="when attempting to finalize a relay from an account that is not the Optimism Messenger" timestamp="2022-02-04T17:32:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/OwnerRelayOnOptimism.js" time="0.0310" failures="0">
    <testcase name="Contract: OwnerRelayOnOptimism when attempting to finalize a relay from an account that is not the Optimism Messenger reverts with the expected error" time="0.0310" classname="reverts with the expected error">
    </testcase>
  </testsuite>
  <testsuite name="when attempting to finalize a relay batch from an account that is not the Optimism Messenger" timestamp="2022-02-04T17:32:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/OwnerRelayOnOptimism.js" time="0.0190" failures="0">
    <testcase name="Contract: OwnerRelayOnOptimism when attempting to finalize a relay batch from an account that is not the Optimism Messenger reverts with the expected error" time="0.0190" classname="reverts with the expected error">
    </testcase>
  </testsuite>
  <testsuite name="when finalizing relaying from the Optimism Messenger" timestamp="2022-02-04T17:32:42" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/OwnerRelayOnOptimism.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when finalizing a single relay from the Optimism Messenger" timestamp="2022-02-04T17:32:42" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/OwnerRelayOnOptimism.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the initiator on L1 is NOT the OwnerRelayOnEthereum" timestamp="2022-02-04T17:32:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/OwnerRelayOnOptimism.js" time="0.0660" failures="0">
    <testcase name="Contract: OwnerRelayOnOptimism when finalizing relaying from the Optimism Messenger when finalizing a single relay from the Optimism Messenger when the initiator on L1 is NOT the OwnerRelayOnEthereum reverts with the expected error" time="0.0000" classname="reverts with the expected error">
    </testcase>
  </testsuite>
  <testsuite name="when the initiator on L1 is the OwnerRelayOnEthereum" timestamp="2022-02-04T17:32:42" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/OwnerRelayOnOptimism.js" time="0.0380" failures="0">
    <testcase name="Contract: OwnerRelayOnOptimism when finalizing relaying from the Optimism Messenger when finalizing a single relay from the Optimism Messenger when the initiator on L1 is the OwnerRelayOnEthereum should ultimately relayed contract.nominateNewOwner(...) with the correct data" time="0.0000" classname="should ultimately relayed contract.nominateNewOwner(...) with the correct data">
    </testcase>
    <testcase name="Contract: OwnerRelayOnOptimism when finalizing relaying from the Optimism Messenger when finalizing a single relay from the Optimism Messenger when the initiator on L1 is the OwnerRelayOnEthereum emitted a RelayFinalized event" time="0.0010" classname="emitted a RelayFinalized event">
    </testcase>
  </testsuite>
  <testsuite name="when finalizing a relay batch from the Optimism Messenger" timestamp="2022-02-04T17:32:42" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/OwnerRelayOnOptimism.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the initiator on L1 is NOT the OwnerRelayOnEthereum" timestamp="2022-02-04T17:32:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/OwnerRelayOnOptimism.js" time="0.0500" failures="0">
    <testcase name="Contract: OwnerRelayOnOptimism when finalizing relaying from the Optimism Messenger when finalizing a relay batch from the Optimism Messenger when the initiator on L1 is NOT the OwnerRelayOnEthereum reverts with the expected error" time="0.0000" classname="reverts with the expected error">
    </testcase>
  </testsuite>
  <testsuite name="when the initiator on L1 is the OwnerRelayOnEthereum" timestamp="2022-02-04T17:32:42" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/OwnerRelayOnOptimism.js" time="0.0440" failures="0">
    <testcase name="Contract: OwnerRelayOnOptimism when finalizing relaying from the Optimism Messenger when finalizing a relay batch from the Optimism Messenger when the initiator on L1 is the OwnerRelayOnEthereum should ultimately relay contract.nominateNewOwner(...) with the correct data" time="0.0000" classname="should ultimately relay contract.nominateNewOwner(...) with the correct data">
    </testcase>
    <testcase name="Contract: OwnerRelayOnOptimism when finalizing relaying from the Optimism Messenger when finalizing a relay batch from the Optimism Messenger when the initiator on L1 is the OwnerRelayOnEthereum emitted a RelayBatchFinalized event" time="0.0000" classname="emitted a RelayBatchFinalized event">
    </testcase>
  </testsuite>
  <testsuite name="when calling directRelay to bypass the L1 to L2 relay" timestamp="2022-02-04T17:32:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/OwnerRelayOnOptimism.js" time="0.0000" failures="0">
    <testcase name="Contract: OwnerRelayOnOptimism when calling directRelay to bypass the L1 to L2 relay should not allow any address to call direct relay" time="0.0230" classname="should not allow any address to call direct relay">
    </testcase>
  </testsuite>
  <testsuite name="before ownershipDuration expires" timestamp="2022-02-04T17:32:42" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/OwnerRelayOnOptimism.js" time="0.0330" failures="0">
    <testcase name="Contract: OwnerRelayOnOptimism when calling directRelay to bypass the L1 to L2 relay before ownershipDuration expires should allow the temp owner to call direct relay" time="0.0320" classname="should allow the temp owner to call direct relay">
    </testcase>
    <testcase name="Contract: OwnerRelayOnOptimism when calling directRelay to bypass the L1 to L2 relay before ownershipDuration expires emitted a DirectRelay event" time="0.0000" classname="emitted a DirectRelay event">
    </testcase>
  </testsuite>
  <testsuite name="after ownershipDuration expires" timestamp="2022-02-04T17:32:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/OwnerRelayOnOptimism.js" time="0.0370" failures="0">
    <testcase name="Contract: OwnerRelayOnOptimism when calling directRelay to bypass the L1 to L2 relay after ownershipDuration expires should not allow the temp owner to call direct relay" time="0.0200" classname="should not allow the temp owner to call direct relay">
    </testcase>
  </testsuite>
  <testsuite name="Contract: Pausable" timestamp="2022-02-04T17:32:42" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Pausable.js" time="0.0000" failures="0">
    <testcase name="Contract: Pausable ensure only known functions are mutative" time="0.0260" classname="ensure only known functions are mutative">
    </testcase>
    <testcase name="Contract: Pausable it fails when instantiated directly" time="0.0000" classname="it fails when instantiated directly">
    </testcase>
  </testsuite>
  <testsuite name="when extended into a contract" timestamp="2022-02-04T17:32:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Pausable.js" time="0.0000" failures="0">
    <testcase name="Contract: Pausable when extended into a contract is not paused by default" time="0.0180" classname="is not paused by default">
    </testcase>
  </testsuite>
  <testsuite name="setPaused()" timestamp="2022-02-04T17:32:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Pausable.js" time="0.0000" failures="0">
    <testcase name="Contract: Pausable when extended into a contract setPaused() can only be invoked by the owner" time="0.7740" classname="can only be invoked by the owner">
    </testcase>
  </testsuite>
  <testsuite name="when invoked by the owner to true" timestamp="2022-02-04T17:32:43" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Pausable.js" time="0.0000" failures="0">
    <testcase name="Contract: Pausable when extended into a contract setPaused() when invoked by the owner to true is it then paused" time="0.0050" classname="is it then paused">
    </testcase>
    <testcase name="Contract: Pausable when extended into a contract setPaused() when invoked by the owner to true with the current timestamp as the lastPauseTime" time="0.0100" classname="with the current timestamp as the lastPauseTime">
    </testcase>
    <testcase name="Contract: Pausable when extended into a contract setPaused() when invoked by the owner to true and the PauseChange event is emitted" time="0.0000" classname="and the PauseChange event is emitted">
    </testcase>
    <testcase name="Contract: Pausable when extended into a contract setPaused() when invoked by the owner to true and calling setPaused when already paused remains paused with no change to pause time" time="0.0250" classname="and calling setPaused when already paused remains paused with no change to pause time">
    </testcase>
  </testsuite>
  <testsuite name="when invoked by the owner to false" timestamp="2022-02-04T17:32:43" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Pausable.js" time="0.3350" failures="0">
    <testcase name="Contract: Pausable when extended into a contract setPaused() when invoked by the owner to true when invoked by the owner to false is it then unpaused" time="0.0050" classname="is it then unpaused">
    </testcase>
    <testcase name="Contract: Pausable when extended into a contract setPaused() when invoked by the owner to true when invoked by the owner to false and the lastPauseTime is still unchanged" time="0.0610" classname="and the lastPauseTime is still unchanged">
    </testcase>
    <testcase name="Contract: Pausable when extended into a contract setPaused() when invoked by the owner to true when invoked by the owner to false and the PauseChange event is emitted" time="0.0000" classname="and the PauseChange event is emitted">
    </testcase>
  </testsuite>
  <testsuite name="notPaused modifier" timestamp="2022-02-04T17:32:44" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Pausable.js" time="0.0000" failures="0">
    <testcase name="Contract: Pausable when extended into a contract notPaused modifier initial condition is met" time="0.0040" classname="initial condition is met">
    </testcase>
  </testsuite>
  <testsuite name="when setSomeValue() is invoked" timestamp="2022-02-04T17:32:44" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Pausable.js" time="0.0000" failures="0">
    <testcase name="Contract: Pausable when extended into a contract notPaused modifier when setSomeValue() is invoked succeeds as not paused" time="0.0060" classname="succeeds as not paused">
    </testcase>
  </testsuite>
  <testsuite name="when paused" timestamp="2022-02-04T17:32:44" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Pausable.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when setSomeValue() is invoked" timestamp="2022-02-04T17:32:44" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Pausable.js" time="0.1040" failures="0">
    <testcase name="Contract: Pausable when extended into a contract notPaused modifier when setSomeValue() is invoked when paused when setSomeValue() is invoked fails as the function is paused" time="0.0230" classname="fails as the function is paused">
    </testcase>
  </testsuite>
  <testsuite name="Contract: ProxyERC20" timestamp="2022-02-04T17:32:44" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ProxyERC20.js" time="0.0000" failures="0">
    <testcase name="Contract: ProxyERC20 only known functions are mutative" time="0.0280" classname="only known functions are mutative">
    </testcase>
    <testcase name="Contract: ProxyERC20 Must pass through to underlying via fallback function and emit on proxy" time="0.0230" classname="Must pass through to underlying via fallback function and emit on proxy">
    </testcase>
  </testsuite>
  <testsuite name="ProxyERC20 should adhere to ERC20 standard" timestamp="2022-02-04T17:32:45" tests="8" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ProxyERC20.js" time="3.9040" failures="0">
    <testcase name="Contract: ProxyERC20 ProxyERC20 should adhere to ERC20 standard should be able to query optional ERC20 name" time="0.0140" classname="should be able to query optional ERC20 name">
    </testcase>
    <testcase name="Contract: ProxyERC20 ProxyERC20 should adhere to ERC20 standard should be able to query optional ERC20 symbol" time="0.0190" classname="should be able to query optional ERC20 symbol">
    </testcase>
    <testcase name="Contract: ProxyERC20 ProxyERC20 should adhere to ERC20 standard should be able to query optional ERC20 decimals" time="0.0130" classname="should be able to query optional ERC20 decimals">
    </testcase>
    <testcase name="Contract: ProxyERC20 ProxyERC20 should adhere to ERC20 standard should be able to query ERC20 totalSupply" time="0.0100" classname="should be able to query ERC20 totalSupply">
    </testcase>
    <testcase name="Contract: ProxyERC20 ProxyERC20 should adhere to ERC20 standard should be able to query ERC20 balanceOf" time="0.0270" classname="should be able to query ERC20 balanceOf">
    </testcase>
    <testcase name="Contract: ProxyERC20 ProxyERC20 should adhere to ERC20 standard should be able to call ERC20 approve" time="0.0600" classname="should be able to call ERC20 approve">
    </testcase>
    <testcase name="Contract: ProxyERC20 ProxyERC20 should adhere to ERC20 standard should be able to call ERC20 transferFrom" time="0.3860" classname="should be able to call ERC20 transferFrom">
    </testcase>
    <testcase name="Contract: ProxyERC20 ProxyERC20 should adhere to ERC20 standard should be able to call ERC20 transfer" time="0.1560" classname="should be able to call ERC20 transfer">
    </testcase>
  </testsuite>
  <testsuite name="when third party contracts interact with our proxy" timestamp="2022-02-04T17:32:49" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ProxyERC20.js" time="1.4270" failures="0">
    <testcase name="Contract: ProxyERC20 when third party contracts interact with our proxy should be able to query ERC20 balanceOf" time="0.0390" classname="should be able to query ERC20 balanceOf">
    </testcase>
    <testcase name="Contract: ProxyERC20 when third party contracts interact with our proxy should be able to transferFrom ERC20" time="0.2120" classname="should be able to transferFrom ERC20">
    </testcase>
  </testsuite>
  <testsuite name="Contract: PurgeableSynth" timestamp="2022-02-04T17:32:50" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/PurgeableSynth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a Purgeable synth is added and connected to Synthetix" timestamp="2022-02-04T17:33:02" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/PurgeableSynth.js" time="0.0000" failures="0">
    <testcase name="Contract: PurgeableSynth when a Purgeable synth is added and connected to Synthetix ensure only known functions are mutative" time="0.0320" classname="ensure only known functions are mutative">
    </testcase>
    <testcase name="Contract: PurgeableSynth when a Purgeable synth is added and connected to Synthetix ensure the list of resolver addresses are as expected" time="0.0100" classname="ensure the list of resolver addresses are as expected">
    </testcase>
    <testcase name="Contract: PurgeableSynth when a Purgeable synth is added and connected to Synthetix disallow purge calls by everyone bar the owner" time="0.8460" classname="disallow purge calls by everyone bar the owner">
    </testcase>
  </testsuite>
  <testsuite name="when there&apos;s a price for the purgeable synth" timestamp="2022-02-04T17:33:04" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/PurgeableSynth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and a user holds 100K USD worth of purgeable synth iETH" timestamp="2022-02-04T17:33:04" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/PurgeableSynth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the system is suspended" timestamp="2022-02-04T17:33:04" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/PurgeableSynth.js" time="2.2180" failures="0">
    <testcase name="Contract: PurgeableSynth when a Purgeable synth is added and connected to Synthetix when there&apos;s a price for the purgeable synth and a user holds 100K USD worth of purgeable synth iETH when the system is suspended then purge() still works as expected" time="0.6480" classname="then purge() still works as expected">
    </testcase>
  </testsuite>
  <testsuite name="when the synth is stale" timestamp="2022-02-04T17:33:06" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/PurgeableSynth.js" time="0.0000" failures="0">
    <testcase name="Contract: PurgeableSynth when a Purgeable synth is added and connected to Synthetix when there&apos;s a price for the purgeable synth and a user holds 100K USD worth of purgeable synth iETH when the synth is stale then purge() reverts" time="0.1370" classname="then purge() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when rates are received" timestamp="2022-02-04T17:33:07" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/PurgeableSynth.js" time="1.1840" failures="0">
    <testcase name="Contract: PurgeableSynth when a Purgeable synth is added and connected to Synthetix when there&apos;s a price for the purgeable synth and a user holds 100K USD worth of purgeable synth iETH when the synth is stale when rates are received then purge() still works as expected" time="0.3160" classname="then purge() still works as expected">
    </testcase>
  </testsuite>
  <testsuite name="when purge is called for the synth" timestamp="2022-02-04T17:33:08" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/PurgeableSynth.js" time="3.9410" failures="0">
    <testcase name="Contract: PurgeableSynth when a Purgeable synth is added and connected to Synthetix when there&apos;s a price for the purgeable synth and a user holds 100K USD worth of purgeable synth iETH when purge is called for the synth then the user is at 0 balance" time="0.0250" classname="then the user is at 0 balance">
    </testcase>
    <testcase name="Contract: PurgeableSynth when a Purgeable synth is added and connected to Synthetix when there&apos;s a price for the purgeable synth and a user holds 100K USD worth of purgeable synth iETH when purge is called for the synth and they have the value added back to sUSD (with fees taken out)" time="0.1120" classname="and they have the value added back to sUSD (with fees taken out)">
    </testcase>
    <testcase name="Contract: PurgeableSynth when a Purgeable synth is added and connected to Synthetix when there&apos;s a price for the purgeable synth and a user holds 100K USD worth of purgeable synth iETH when purge is called for the synth then the synth has totalSupply back at 0" time="0.0220" classname="then the synth has totalSupply back at 0">
    </testcase>
    <testcase name="Contract: PurgeableSynth when a Purgeable synth is added and connected to Synthetix when there&apos;s a price for the purgeable synth and a user holds 100K USD worth of purgeable synth iETH when purge is called for the synth must issue the Purged event" time="0.0000" classname="must issue the Purged event">
    </testcase>
  </testsuite>
  <testsuite name="when purge is invoked with no accounts" timestamp="2022-02-04T17:33:12" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/PurgeableSynth.js" time="3.2960" failures="0">
    <testcase name="Contract: PurgeableSynth when a Purgeable synth is added and connected to Synthetix when there&apos;s a price for the purgeable synth and a user holds 100K USD worth of purgeable synth iETH when purge is invoked with no accounts then no change occurs" time="0.0130" classname="then no change occurs">
    </testcase>
    <testcase name="Contract: PurgeableSynth when a Purgeable synth is added and connected to Synthetix when there&apos;s a price for the purgeable synth and a user holds 100K USD worth of purgeable synth iETH when purge is invoked with no accounts and the totalSupply must be unchanged" time="0.0050" classname="and the totalSupply must be unchanged">
    </testcase>
    <testcase name="Contract: PurgeableSynth when a Purgeable synth is added and connected to Synthetix when there&apos;s a price for the purgeable synth and a user holds 100K USD worth of purgeable synth iETH when purge is invoked with no accounts and no events are emitted" time="0.0000" classname="and no events are emitted">
    </testcase>
  </testsuite>
  <testsuite name="when the user holds 5000 USD worth of the purgeable synth iETH" timestamp="2022-02-04T17:33:16" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/PurgeableSynth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when purge is invoked with both accounts" timestamp="2022-02-04T17:33:16" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/PurgeableSynth.js" time="1.1920" failures="0">
    <testcase name="Contract: PurgeableSynth when a Purgeable synth is added and connected to Synthetix when there&apos;s a price for the purgeable synth and a user holds 100K USD worth of purgeable synth iETH when the user holds 5000 USD worth of the purgeable synth iETH when purge is invoked with both accounts then it reverts as the totalSupply exceeds the 100,000USD max" time="0.1090" classname="then it reverts as the totalSupply exceeds the 100,000USD max">
    </testcase>
  </testsuite>
  <testsuite name="when purge is invoked with just one account" timestamp="2022-02-04T17:33:17" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/PurgeableSynth.js" time="1.4530" failures="0">
    <testcase name="Contract: PurgeableSynth when a Purgeable synth is added and connected to Synthetix when there&apos;s a price for the purgeable synth and a user holds 100K USD worth of purgeable synth iETH when the user holds 5000 USD worth of the purgeable synth iETH when purge is invoked with just one account then it reverts as the totalSupply exceeds the 100,000USD max" time="0.0630" classname="then it reverts as the totalSupply exceeds the 100,000USD max">
    </testcase>
  </testsuite>
  <testsuite name="Replacing an existing Synth with a Purgeable one to purge and remove it" timestamp="2022-02-04T17:33:18" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/PurgeableSynth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when sAUD has a price" timestamp="2022-02-04T17:33:18" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/PurgeableSynth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user holds some sAUD" timestamp="2022-02-04T17:33:18" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/PurgeableSynth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the sAUD synth has its totalSupply set to 0 by the owner" timestamp="2022-02-04T17:33:18" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/PurgeableSynth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the old sAUD synth is removed from Synthetix" timestamp="2022-02-04T17:33:18" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/PurgeableSynth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a Purgeable synth is added to replace the existing sAUD" timestamp="2022-02-04T17:33:18" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/PurgeableSynth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and it is added to Synthetix" timestamp="2022-02-04T17:33:18" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/PurgeableSynth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and the old sAUD TokenState and Proxy is connected to the replacement synth" timestamp="2022-02-04T17:33:18" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/PurgeableSynth.js" time="0.0000" failures="0">
    <testcase name="Contract: PurgeableSynth Replacing an existing Synth with a Purgeable one to purge and remove it when sAUD has a price when a user holds some sAUD when the sAUD synth has its totalSupply set to 0 by the owner and the old sAUD synth is removed from Synthetix when a Purgeable synth is added to replace the existing sAUD and it is added to Synthetix and the old sAUD TokenState and Proxy is connected to the replacement synth then the user balance has transferred" time="0.0150" classname="then the user balance has transferred">
    </testcase>
  </testsuite>
  <testsuite name="and purge is called on the replacement sAUD contract" timestamp="2022-02-04T17:33:19" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/PurgeableSynth.js" time="0.0000" failures="0">
    <testcase name="Contract: PurgeableSynth Replacing an existing Synth with a Purgeable one to purge and remove it when sAUD has a price when a user holds some sAUD when the sAUD synth has its totalSupply set to 0 by the owner and the old sAUD synth is removed from Synthetix when a Purgeable synth is added to replace the existing sAUD and it is added to Synthetix and the old sAUD TokenState and Proxy is connected to the replacement synth and purge is called on the replacement sAUD contract then the user now has a 0 balance in the replacement" time="0.0090" classname="then the user now has a 0 balance in the replacement">
    </testcase>
    <testcase name="Contract: PurgeableSynth Replacing an existing Synth with a Purgeable one to purge and remove it when sAUD has a price when a user holds some sAUD when the sAUD synth has its totalSupply set to 0 by the owner and the old sAUD synth is removed from Synthetix when a Purgeable synth is added to replace the existing sAUD and it is added to Synthetix and the old sAUD TokenState and Proxy is connected to the replacement synth and purge is called on the replacement sAUD contract and their balance must have gone back into sUSD" time="0.1330" classname="and their balance must have gone back into sUSD">
    </testcase>
    <testcase name="Contract: PurgeableSynth Replacing an existing Synth with a Purgeable one to purge and remove it when sAUD has a price when a user holds some sAUD when the sAUD synth has its totalSupply set to 0 by the owner and the old sAUD synth is removed from Synthetix when a Purgeable synth is added to replace the existing sAUD and it is added to Synthetix and the old sAUD TokenState and Proxy is connected to the replacement synth and purge is called on the replacement sAUD contract and the purge event is issued" time="0.0000" classname="and the purge event is issued">
    </testcase>
  </testsuite>
  <testsuite name="when the purged synth is removed from the system" timestamp="2022-02-04T17:33:21" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/PurgeableSynth.js" time="0.9700" failures="0">
    <testcase name="Contract: PurgeableSynth Replacing an existing Synth with a Purgeable one to purge and remove it when sAUD has a price when a user holds some sAUD when the sAUD synth has its totalSupply set to 0 by the owner and the old sAUD synth is removed from Synthetix when a Purgeable synth is added to replace the existing sAUD and it is added to Synthetix and the old sAUD TokenState and Proxy is connected to the replacement synth and purge is called on the replacement sAUD contract when the purged synth is removed from the system then the balance remains in USD (and no errors occur)" time="0.1400" classname="then the balance remains in USD (and no errors occur)">
    </testcase>
  </testsuite>
  <testsuite name="Contract: ReadProxy" timestamp="2022-02-04T17:33:22" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ReadProxy.js" time="0.0000" failures="0">
    <testcase name="Contract: ReadProxy only known functions are mutative" time="0.0340" classname="only known functions are mutative">
    </testcase>
    <testcase name="Contract: ReadProxy setTarget() can only be invoked by the owner" time="0.7170" classname="setTarget() can only be invoked by the owner">
    </testcase>
  </testsuite>
  <testsuite name="when the target is set by the owner" timestamp="2022-02-04T17:33:24" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ReadProxy.js" time="0.0000" failures="0">
    <testcase name="Contract: ReadProxy when the target is set by the owner then a TargetUpdated event is emitted with the new target address" time="0.0000" classname="then a TargetUpdated event is emitted with the new target address">
    </testcase>
    <testcase name="Contract: ReadProxy when the target is set by the owner Then a call to the forwarder must pass through to target via fallback function" time="0.0260" classname="Then a call to the forwarder must pass through to target via fallback function">
    </testcase>
  </testsuite>
  <testsuite name="when a third party uses the forwarder" timestamp="2022-02-04T17:33:24" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ReadProxy.js" time="0.0000" failures="0">
    <testcase name="Contract: ReadProxy when the target is set by the owner when a third party uses the forwarder when attempting to invoke a view that calls the forwarder it fails" time="0.0160" classname="when attempting to invoke a view that calls the forwarder it fails">
    </testcase>
  </testsuite>
  <testsuite name="when the resource is updated in the forwarders target" timestamp="2022-02-04T17:33:24" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ReadProxy.js" time="0.4420" failures="0">
    <testcase name="Contract: ReadProxy when the target is set by the owner when a third party uses the forwarder when the resource is updated in the forwarders target when invoking a view that calls the forwarder it succeeds and passes thru" time="0.0220" classname="when invoking a view that calls the forwarder it succeeds and passes thru">
    </testcase>
  </testsuite>
  <testsuite name="when the target has been updated" timestamp="2022-02-04T17:33:25" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ReadProxy.js" time="0.2870" failures="0">
    <testcase name="Contract: ReadProxy when the target is set by the owner when the target has been updated Then a call to the forwarder must pass through to target via fallback function" time="0.0230" classname="Then a call to the forwarder must pass through to target via fallback function">
    </testcase>
  </testsuite>
  <testsuite name="when the target is some mock contract with a view and a mutative function" timestamp="2022-02-04T17:33:25" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ReadProxy.js" time="0.7860" failures="0">
    <testcase name="Contract: ReadProxy when the target is some mock contract with a view and a mutative function When trying to forward to the view, it works as expected" time="0.0120" classname="When trying to forward to the view, it works as expected">
    </testcase>
    <testcase name="Contract: ReadProxy when the target is some mock contract with a view and a mutative function When trying to forward a call to the mutative function, it reverts" time="0.0220" classname="When trying to forward a call to the mutative function, it reverts">
    </testcase>
    <testcase name="Contract: ReadProxy when the target is some mock contract with a view and a mutative function When trying to forward a transaction to the mutative function, it reverts" time="0.0390" classname="When trying to forward a transaction to the mutative function, it reverts">
    </testcase>
  </testsuite>
  <testsuite name="Contract: RewardEscrow" timestamp="2022-02-04T17:33:26" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardEscrow.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Constructor &amp; Settings " timestamp="2022-02-04T17:33:26" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardEscrow.js" time="0.1900" failures="0">
    <testcase name="Contract: RewardEscrow Constructor &amp; Settings  should set synthetix on contructor" time="0.0070" classname="should set synthetix on contructor">
    </testcase>
    <testcase name="Contract: RewardEscrow Constructor &amp; Settings  should set feePool on contructor" time="0.0050" classname="should set feePool on contructor">
    </testcase>
    <testcase name="Contract: RewardEscrow Constructor &amp; Settings  should set owner on contructor" time="0.0100" classname="should set owner on contructor">
    </testcase>
    <testcase name="Contract: RewardEscrow Constructor &amp; Settings  should allow owner to set synthetix" time="0.0500" classname="should allow owner to set synthetix">
    </testcase>
    <testcase name="Contract: RewardEscrow Constructor &amp; Settings  should allow owner to set feePool" time="0.0220" classname="should allow owner to set feePool">
    </testcase>
  </testsuite>
  <testsuite name="Given there are no escrow entries" timestamp="2022-02-04T17:33:26" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardEscrow.js" time="0.1070" failures="0">
    <testcase name="Contract: RewardEscrow Given there are no escrow entries then numVestingEntries should return 0" time="0.0050" classname="then numVestingEntries should return 0">
    </testcase>
    <testcase name="Contract: RewardEscrow Given there are no escrow entries then getNextVestingEntry should return 0" time="0.0110" classname="then getNextVestingEntry should return 0">
    </testcase>
    <testcase name="Contract: RewardEscrow Given there are no escrow entries then vest should do nothing and not revert" time="0.0280" classname="then vest should do nothing and not revert">
    </testcase>
  </testsuite>
  <testsuite name="Functions" timestamp="2022-02-04T17:33:27" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardEscrow.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Vesting Schedule Writes" timestamp="2022-02-04T17:33:27" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardEscrow.js" time="0.4270" failures="0">
    <testcase name="Contract: RewardEscrow Functions Vesting Schedule Writes should not create a vesting entry with a zero amount" time="0.0870" classname="should not create a vesting entry with a zero amount">
    </testcase>
    <testcase name="Contract: RewardEscrow Functions Vesting Schedule Writes should not create a vesting entry if there is not enough SNX in the contracts balance" time="0.2260" classname="should not create a vesting entry if there is not enough SNX in the contracts balance">
    </testcase>
  </testsuite>
  <testsuite name="Vesting Schedule Reads " timestamp="2022-02-04T17:33:27" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardEscrow.js" time="2.0060" failures="0">
    <testcase name="Contract: RewardEscrow Functions Vesting Schedule Reads  should append a vesting entry and increase the contracts balance" time="0.0130" classname="should append a vesting entry and increase the contracts balance">
    </testcase>
    <testcase name="Contract: RewardEscrow Functions Vesting Schedule Reads  should get an accounts total Vested Account Balance" time="0.0190" classname="should get an accounts total Vested Account Balance">
    </testcase>
    <testcase name="Contract: RewardEscrow Functions Vesting Schedule Reads  should get an accounts number of vesting entries" time="0.0050" classname="should get an accounts number of vesting entries">
    </testcase>
    <testcase name="Contract: RewardEscrow Functions Vesting Schedule Reads  should get an accounts vesting schedule entry by index" time="0.0560" classname="should get an accounts vesting schedule entry by index">
    </testcase>
    <testcase name="Contract: RewardEscrow Functions Vesting Schedule Reads  should get an accounts vesting time for a vesting entry index" time="0.0410" classname="should get an accounts vesting time for a vesting entry index">
    </testcase>
    <testcase name="Contract: RewardEscrow Functions Vesting Schedule Reads  should get an accounts vesting quantity for a vesting entry index" time="0.0550" classname="should get an accounts vesting quantity for a vesting entry index">
    </testcase>
  </testsuite>
  <testsuite name="Partial Vesting" timestamp="2022-02-04T17:33:29" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardEscrow.js" time="0.9700" failures="0">
    <testcase name="Contract: RewardEscrow Functions Partial Vesting should get an accounts next vesting entry index" time="0.0080" classname="should get an accounts next vesting entry index">
    </testcase>
    <testcase name="Contract: RewardEscrow Functions Partial Vesting should get an accounts next vesting entry" time="0.0070" classname="should get an accounts next vesting entry">
    </testcase>
    <testcase name="Contract: RewardEscrow Functions Partial Vesting should get an accounts next vesting time" time="0.0090" classname="should get an accounts next vesting time">
    </testcase>
    <testcase name="Contract: RewardEscrow Functions Partial Vesting should get an accounts next vesting quantity" time="0.0180" classname="should get an accounts next vesting quantity">
    </testcase>
  </testsuite>
  <testsuite name="Vesting" timestamp="2022-02-04T17:33:30" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardEscrow.js" time="1.4970" failures="0">
    <testcase name="Contract: RewardEscrow Functions Vesting should vest and transfer snx from contract to the user" time="0.0870" classname="should vest and transfer snx from contract to the user">
    </testcase>
    <testcase name="Contract: RewardEscrow Functions Vesting should vest and emit a Vest event" time="0.0580" classname="should vest and emit a Vest event">
    </testcase>
    <testcase name="Contract: RewardEscrow Functions Vesting should vest and update totalEscrowedAccountBalance" time="0.0740" classname="should vest and update totalEscrowedAccountBalance">
    </testcase>
    <testcase name="Contract: RewardEscrow Functions Vesting should vest and update totalVestedAccountBalance" time="0.1230" classname="should vest and update totalVestedAccountBalance">
    </testcase>
    <testcase name="Contract: RewardEscrow Functions Vesting should vest and update totalEscrowedBalance" time="0.1010" classname="should vest and update totalEscrowedBalance">
    </testcase>
  </testsuite>
  <testsuite name="Stress Test" timestamp="2022-02-04T17:33:31" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardEscrow.js" time="61.3390" failures="0">
    <testcase name="Contract: RewardEscrow Functions Stress Test should not create more than MAX_VESTING_ENTRIES vesting entries" time="23.3300" classname="should not create more than MAX_VESTING_ENTRIES vesting entries">
    </testcase>
    <testcase name="Contract: RewardEscrow Functions Stress Test should be able to vest 52 week * 5 years vesting entries" time="13.9450" classname="should be able to vest 52 week * 5 years vesting entries">
    </testcase>
    <testcase name="Contract: RewardEscrow Functions Stress Test should be able to read an accounts schedule of 5 vesting entries" time="0.3300" classname="should be able to read an accounts schedule of 5 vesting entries">
    </testcase>
    <testcase name="Contract: RewardEscrow Functions Stress Test should be able to read the full account schedule 52 week * 5 years vesting entries" time="23.4970" classname="should be able to read the full account schedule 52 week * 5 years vesting entries">
    </testcase>
  </testsuite>
  <testsuite name="Transfering" timestamp="2022-02-04T17:34:33" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardEscrow.js" time="0.1260" failures="0">
    <testcase name="Contract: RewardEscrow Functions Transfering should not allow transfer of synthetix in escrow" time="0.0460" classname="should not allow transfer of synthetix in escrow">
    </testcase>
  </testsuite>
  <testsuite name="Contract: RewardEscrowV2" timestamp="2022-02-04T17:34:33" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardEscrowV2.js" time="0.0000" failures="0">
    <testcase name="Contract: RewardEscrowV2 ensure only expected functions are mutative" time="0.0320" classname="ensure only expected functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="Constructor &amp; Settings " timestamp="2022-02-04T17:34:35" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardEscrowV2.js" time="0.0310" failures="0">
    <testcase name="Contract: RewardEscrowV2 Constructor &amp; Settings  should set owner on contructor" time="0.0050" classname="should set owner on contructor">
    </testcase>
  </testsuite>
  <testsuite name="There are no escrow entries initially" timestamp="2022-02-04T17:34:35" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardEscrowV2.js" time="0.0180" failures="0">
    <testcase name="Contract: RewardEscrowV2 There are no escrow entries initially then numVestingEntries should return 0" time="0.0060" classname="then numVestingEntries should return 0">
    </testcase>
  </testsuite>
  <testsuite name="When account is pending escrow migration to new contract" timestamp="2022-02-04T17:34:35" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardEscrowV2.js" time="0.0230" failures="0">
    <testcase name="Contract: RewardEscrowV2 When account is pending escrow migration to new contract then numVestingEntries should return 0" time="0.0060" classname="then numVestingEntries should return 0">
    </testcase>
  </testsuite>
  <testsuite name="importVestingSchedule" timestamp="2022-02-04T17:34:35" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardEscrowV2.js" time="0.1660" failures="0">
    <testcase name="Contract: RewardEscrowV2 importVestingSchedule should revert after setup period over" time="0.0250" classname="should revert after setup period over">
    </testcase>
    <testcase name="Contract: RewardEscrowV2 importVestingSchedule should revert if migrateAccountEscrowBalances isnt called first" time="0.0990" classname="should revert if migrateAccountEscrowBalances isnt called first">
    </testcase>
  </testsuite>
  <testsuite name="migrateAccountEscrowBalances" timestamp="2022-02-04T17:34:35" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardEscrowV2.js" time="0.1020" failures="0">
    <testcase name="Contract: RewardEscrowV2 migrateAccountEscrowBalances should revert after setup period over" time="0.0380" classname="should revert after setup period over">
    </testcase>
    <testcase name="Contract: RewardEscrowV2 migrateAccountEscrowBalances should revert trying to re-import for same account" time="0.0410" classname="should revert trying to re-import for same account">
    </testcase>
  </testsuite>
  <testsuite name="migrateVestingSchedule" timestamp="2022-02-04T17:34:35" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardEscrowV2.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when totalBalancePendingMigration is 1000 SNX or less" timestamp="2022-02-04T17:34:35" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardEscrowV2.js" time="0.2130" failures="0">
    <testcase name="Contract: RewardEscrowV2 migrateVestingSchedule when totalBalancePendingMigration is 1000 SNX or less should migrate the pending migration balance of 800 as vestable entry" time="0.1220" classname="should migrate the pending migration balance of 800 as vestable entry">
    </testcase>
    <testcase name="Contract: RewardEscrowV2 migrateVestingSchedule when totalBalancePendingMigration is 1000 SNX or less should migrate the pending migration balance of 1000" time="0.0670" classname="should migrate the pending migration balance of 1000">
    </testcase>
  </testsuite>
  <testsuite name="when migrating pending vesting entries and entries that can be vested already" timestamp="2022-02-04T17:34:35" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardEscrowV2.js" time="12.1460" failures="0">
    <testcase name="Contract: RewardEscrowV2 migrateVestingSchedule when migrating pending vesting entries and entries that can be vested already should migrate 52 pending vesting entry schedule from old rewardEscrouw" time="1.9460" classname="should migrate 52 pending vesting entry schedule from old rewardEscrouw">
    </testcase>
  </testsuite>
  <testsuite name="when migrating pending vesting entries but less than 52 entries" timestamp="2022-02-04T17:34:47" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardEscrowV2.js" time="0.5340" failures="0">
    <testcase name="Contract: RewardEscrowV2 migrateVestingSchedule when migrating pending vesting entries but less than 52 entries should migrate 4 pending vesting entry schedule from old rewardEscrouw" time="0.2290" classname="should migrate 4 pending vesting entry schedule from old rewardEscrouw">
    </testcase>
  </testsuite>
  <testsuite name="Contract: RewardsDistribution" timestamp="2022-02-04T17:34:48" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardsDistribution.js" time="0.0000" failures="0">
    <testcase name="Contract: RewardsDistribution should set constructor params on deployment" time="0.0960" classname="should set constructor params on deployment">
    </testcase>
  </testsuite>
  <testsuite name="adding Reward Distributions" timestamp="2022-02-04T17:35:00" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardsDistribution.js" time="0.8910" failures="0">
    <testcase name="Contract: RewardsDistribution adding Reward Distributions should revert when non contract owner attempts to add a RewardDistribution" time="0.1680" classname="should revert when non contract owner attempts to add a RewardDistribution">
    </testcase>
    <testcase name="Contract: RewardsDistribution adding Reward Distributions should revert when adding a RewardDistribution with zero address" time="0.0260" classname="should revert when adding a RewardDistribution with zero address">
    </testcase>
    <testcase name="Contract: RewardsDistribution adding Reward Distributions should revert when adding a RewardDistribution with zero amount" time="0.2160" classname="should revert when adding a RewardDistribution with zero amount">
    </testcase>
    <testcase name="Contract: RewardsDistribution adding Reward Distributions should emit event and store onchain when adding a RewardDistribution" time="0.0330" classname="should emit event and store onchain when adding a RewardDistribution">
    </testcase>
    <testcase name="Contract: RewardsDistribution adding Reward Distributions should add multiple reward distributions onchain" time="0.3150" classname="should add multiple reward distributions onchain">
    </testcase>
  </testsuite>
  <testsuite name="editing Reward Distributions" timestamp="2022-02-04T17:35:01" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardsDistribution.js" time="0.1340" failures="0">
    <testcase name="Contract: RewardsDistribution editing Reward Distributions should modify onchain struct when editing a valid RewardDistribution index" time="0.0330" classname="should modify onchain struct when editing a valid RewardDistribution index">
    </testcase>
    <testcase name="Contract: RewardsDistribution editing Reward Distributions should revert when editing an index too high" time="0.0290" classname="should revert when editing an index too high">
    </testcase>
  </testsuite>
  <testsuite name="deleting Reward Distributions" timestamp="2022-02-04T17:35:01" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardsDistribution.js" time="0.8190" failures="0">
    <testcase name="Contract: RewardsDistribution deleting Reward Distributions should update distributions array when owner deletes a RewardDistribution" time="0.0660" classname="should update distributions array when owner deletes a RewardDistribution">
    </testcase>
    <testcase name="Contract: RewardsDistribution deleting Reward Distributions should update distributions array when owner deletes a RewardDistribution at index 1" time="0.2450" classname="should update distributions array when owner deletes a RewardDistribution at index 1">
    </testcase>
    <testcase name="Contract: RewardsDistribution deleting Reward Distributions should revert when non owner attempts to delete a RewardDistribution" time="0.0560" classname="should revert when non owner attempts to delete a RewardDistribution">
    </testcase>
  </testsuite>
  <testsuite name="when the authority is distributing rewards" timestamp="2022-02-04T17:35:02" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardsDistribution.js" time="1.9380" failures="0">
    <testcase name="Contract: RewardsDistribution when the authority is distributing rewards should revert when non authority attempts to distributeRewards()" time="0.0230" classname="should revert when non authority attempts to distributeRewards()">
    </testcase>
    <testcase name="Contract: RewardsDistribution when the authority is distributing rewards should revert when amount to distribute is zero" time="0.0500" classname="should revert when amount to distribute is zero">
    </testcase>
    <testcase name="Contract: RewardsDistribution when the authority is distributing rewards should revert when contract does not have the token balance to distribute" time="0.0500" classname="should revert when contract does not have the token balance to distribute">
    </testcase>
    <testcase name="Contract: RewardsDistribution when the authority is distributing rewards should send the correct amount of tokens to the listed addresses" time="0.3930" classname="should send the correct amount of tokens to the listed addresses">
    </testcase>
    <testcase name="Contract: RewardsDistribution when the authority is distributing rewards should call the notifyRewardAmount on mockRewardsRecipient" time="0.6040" classname="should call the notifyRewardAmount on mockRewardsRecipient">
    </testcase>
  </testsuite>
  <testsuite name="Contract: Rewards Integration Tests" timestamp="2022-02-04T17:35:04" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardsIntegrationTests.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="3 accounts with 33.33% SNX all issue MAX and claim rewards" timestamp="2022-02-04T17:35:24" tests="10" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardsIntegrationTests.js" time="60.5130" failures="0">
    <testcase name="Contract: Rewards Integration Tests 3 accounts with 33.33% SNX all issue MAX and claim rewards should allocate the 3 accounts a third of the rewards for 1 period" time="1.4510" classname="should allocate the 3 accounts a third of the rewards for 1 period">
    </testcase>
    <testcase name="Contract: Rewards Integration Tests 3 accounts with 33.33% SNX all issue MAX and claim rewards should show the totalRewardsAvailable in the claimable period 1" time="0.5890" classname="should show the totalRewardsAvailable in the claimable period 1">
    </testcase>
    <testcase name="Contract: Rewards Integration Tests 3 accounts with 33.33% SNX all issue MAX and claim rewards should show the totalRewardsAvailable in the claimable periods 1 &amp; 2" time="1.3160" classname="should show the totalRewardsAvailable in the claimable periods 1 &amp; 2">
    </testcase>
    <testcase name="Contract: Rewards Integration Tests 3 accounts with 33.33% SNX all issue MAX and claim rewards should show the totalRewardsAvailable in the claimable periods 1 &amp; 2 after 2 accounts claims" time="1.6950" classname="should show the totalRewardsAvailable in the claimable periods 1 &amp; 2 after 2 accounts claims">
    </testcase>
    <testcase name="Contract: Rewards Integration Tests 3 accounts with 33.33% SNX all issue MAX and claim rewards should mint SNX for the all claimable fee periods then all 3 accounts claim at the end of the claimable period" time="5.2540" classname="should mint SNX for the all claimable fee periods then all 3 accounts claim at the end of the claimable period">
    </testcase>
    <testcase name="Contract: Rewards Integration Tests 3 accounts with 33.33% SNX all issue MAX and claim rewards should rollover the unclaimed SNX rewards" time="14.5340" classname="should rollover the unclaimed SNX rewards">
    </testcase>
    <testcase name="Contract: Rewards Integration Tests 3 accounts with 33.33% SNX all issue MAX and claim rewards should rollover the unclaimed SNX rewards on week over 2 terms" time="6.2810" classname="should rollover the unclaimed SNX rewards on week over 2 terms">
    </testcase>
    <testcase name="Contract: Rewards Integration Tests 3 accounts with 33.33% SNX all issue MAX and claim rewards should rollover the partial unclaimed SNX rewards" time="5.1120" classname="should rollover the partial unclaimed SNX rewards">
    </testcase>
    <testcase name="Contract: Rewards Integration Tests 3 accounts with 33.33% SNX all issue MAX and claim rewards should allow a user to leave the system and return and still claim rewards" time="2.7580" classname="should allow a user to leave the system and return and still claim rewards">
    </testcase>
    <testcase name="Contract: Rewards Integration Tests 3 accounts with 33.33% SNX all issue MAX and claim rewards should allocate correct SNX rewards as others leave the system" time="4.0460" classname="should allocate correct SNX rewards as others leave the system">
    </testcase>
  </testsuite>
  <testsuite name="Exchange Rate Shift tests" timestamp="2022-02-04T17:36:24" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardsIntegrationTests.js" time="8.1220" failures="0">
    <testcase name="Contract: Rewards Integration Tests Exchange Rate Shift tests should assign accounts (1,2,3) to have (40%,40%,20%) of the debt/rewards" time="7.1040" classname="should assign accounts (1,2,3) to have (40%,40%,20%) of the debt/rewards">
    </testcase>
  </testsuite>
  <testsuite name="3 Accounts issue 10K sUSD each in week 1" timestamp="2022-02-04T17:36:32" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardsIntegrationTests.js" time="5.0380" failures="0">
    <testcase name="Contract: Rewards Integration Tests 3 Accounts issue 10K sUSD each in week 1 Acc1 issues and burns multiple times and should have accounts 1,2,3 rewards 50%,25%,25%" time="3.6260" classname="Acc1 issues and burns multiple times and should have accounts 1,2,3 rewards 50%,25%,25%">
    </testcase>
  </testsuite>
  <testsuite name="Collateralisation Ratio Penalties" timestamp="2022-02-04T17:36:37" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardsIntegrationTests.js" time="4.8320" failures="0">
    <testcase name="Contract: Rewards Integration Tests Collateralisation Ratio Penalties should apply no penalty when users claim rewards above the penalty threshold ratio of 1%" time="0.4000" classname="should apply no penalty when users claim rewards above the penalty threshold ratio of 1%">
    </testcase>
    <testcase name="Contract: Rewards Integration Tests Collateralisation Ratio Penalties should block user from claiming fees and rewards when users claim rewards &gt;10% threshold collateralisation ratio" time="0.3590" classname="should block user from claiming fees and rewards when users claim rewards &gt;10% threshold collateralisation ratio">
    </testcase>
  </testsuite>
  <testsuite name="When user is the last to call claimFees()" timestamp="2022-02-04T17:36:42" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/RewardsIntegrationTests.js" time="4.5080" failures="0">
    <testcase name="Contract: Rewards Integration Tests When user is the last to call claimFees() then account gets remainder of fees/rewards available after wei rounding" time="0.9800" classname="then account gets remainder of fees/rewards available after wei rounding">
    </testcase>
  </testsuite>
  <testsuite name="Contract: SafeDecimalMath" timestamp="2022-02-04T17:36:47" tests="33" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SafeDecimalMath.js" time="3.2800" failures="0">
    <testcase name="Contract: SafeDecimalMath should have the correct unit" time="0.0340" classname="should have the correct unit">
    </testcase>
    <testcase name="Contract: SafeDecimalMath should have the correct precise unit" time="0.0110" classname="should have the correct precise unit">
    </testcase>
    <testcase name="Contract: SafeDecimalMath should be able to from and to both kinds of units without getting a different result" time="0.0080" classname="should be able to from and to both kinds of units without getting a different result">
    </testcase>
    <testcase name="Contract: SafeDecimalMath should return correct results for expected multiplications" time="0.0230" classname="should return correct results for expected multiplications">
    </testcase>
    <testcase name="Contract: SafeDecimalMath should correctly multiply by zero" time="0.0230" classname="should correctly multiply by zero">
    </testcase>
    <testcase name="Contract: SafeDecimalMath should correctly multiply by one" time="0.0350" classname="should correctly multiply by one">
    </testcase>
    <testcase name="Contract: SafeDecimalMath should apply decimal multiplication commutatively" time="0.0380" classname="should apply decimal multiplication commutatively">
    </testcase>
    <testcase name="Contract: SafeDecimalMath should revert multiplication on overflow" time="0.0500" classname="should revert multiplication on overflow">
    </testcase>
    <testcase name="Contract: SafeDecimalMath should truncate instead of rounding when multiplying" time="0.0120" classname="should truncate instead of rounding when multiplying">
    </testcase>
    <testcase name="Contract: SafeDecimalMath should divide decimals correctly" time="0.0220" classname="should divide decimals correctly">
    </testcase>
    <testcase name="Contract: SafeDecimalMath should revert on divide by zero" time="0.0270" classname="should revert on divide by zero">
    </testcase>
    <testcase name="Contract: SafeDecimalMath should correctly divide by one" time="0.0390" classname="should correctly divide by one">
    </testcase>
    <testcase name="Contract: SafeDecimalMath should truncate instead of rounding when dividing" time="0.0250" classname="should truncate instead of rounding when dividing">
    </testcase>
    <testcase name="Contract: SafeDecimalMath should return correct results for expected rounding multiplications" time="0.0550" classname="should return correct results for expected rounding multiplications">
    </testcase>
    <testcase name="Contract: SafeDecimalMath should correctly multiply and round by zero" time="0.0330" classname="should correctly multiply and round by zero">
    </testcase>
    <testcase name="Contract: SafeDecimalMath should correctly multiply and round by one" time="0.0150" classname="should correctly multiply and round by one">
    </testcase>
    <testcase name="Contract: SafeDecimalMath should apply decimal and rounding multiplication commutatively" time="0.0410" classname="should apply decimal and rounding multiplication commutatively">
    </testcase>
    <testcase name="Contract: SafeDecimalMath should revert multiplication and rounding on overflow" time="0.0170" classname="should revert multiplication and rounding on overflow">
    </testcase>
    <testcase name="Contract: SafeDecimalMath should round instead of truncating when multiplying with rounding" time="0.0120" classname="should round instead of truncating when multiplying with rounding">
    </testcase>
    <testcase name="Contract: SafeDecimalMath should divide decimals and round correctly" time="0.0320" classname="should divide decimals and round correctly">
    </testcase>
    <testcase name="Contract: SafeDecimalMath should revert on divide by zero when rounding" time="0.0430" classname="should revert on divide by zero when rounding">
    </testcase>
    <testcase name="Contract: SafeDecimalMath should correctly divide by one when rounding" time="0.0150" classname="should correctly divide by one when rounding">
    </testcase>
    <testcase name="Contract: SafeDecimalMath should round instead of truncating when dividing and rounding" time="0.0120" classname="should round instead of truncating when dividing and rounding">
    </testcase>
    <testcase name="Contract: SafeDecimalMath [precise] should return correct results for expected rounding multiplications" time="0.0210" classname="[precise] should return correct results for expected rounding multiplications">
    </testcase>
    <testcase name="Contract: SafeDecimalMath [precise] should correctly multiply and round by zero" time="0.0660" classname="[precise] should correctly multiply and round by zero">
    </testcase>
    <testcase name="Contract: SafeDecimalMath [precise] should correctly multiply and round by one" time="0.0310" classname="[precise] should correctly multiply and round by one">
    </testcase>
    <testcase name="Contract: SafeDecimalMath [precise] should apply decimal and rounding multiplication commutatively" time="0.0220" classname="[precise] should apply decimal and rounding multiplication commutatively">
    </testcase>
    <testcase name="Contract: SafeDecimalMath [precise] should revert multiplication and rounding on overflow" time="0.0100" classname="[precise] should revert multiplication and rounding on overflow">
    </testcase>
    <testcase name="Contract: SafeDecimalMath [precise] should round instead of truncating when multiplying with rounding" time="0.0200" classname="[precise] should round instead of truncating when multiplying with rounding">
    </testcase>
    <testcase name="Contract: SafeDecimalMath [precise] should divide decimals and round correctly" time="0.0260" classname="[precise] should divide decimals and round correctly">
    </testcase>
    <testcase name="Contract: SafeDecimalMath [precise] should revert on divide by zero when rounding" time="0.0380" classname="[precise] should revert on divide by zero when rounding">
    </testcase>
    <testcase name="Contract: SafeDecimalMath [precise] should correctly divide by one when rounding" time="0.0180" classname="[precise] should correctly divide by one when rounding">
    </testcase>
    <testcase name="Contract: SafeDecimalMath [precise] should round instead of truncating when dividing and rounding" time="0.0820" classname="[precise] should round instead of truncating when dividing and rounding">
    </testcase>
  </testsuite>
  <testsuite name="Contract: ShortingRewards" timestamp="2022-02-04T17:36:50" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ShortingRewards.js" time="0.0000" failures="0">
    <testcase name="Contract: ShortingRewards ensure only known functions are mutative" time="0.0820" classname="ensure only known functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="Constructor &amp; Settings" timestamp="2022-02-04T17:37:12" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ShortingRewards.js" time="1.0920" failures="0">
    <testcase name="Contract: ShortingRewards Constructor &amp; Settings should set rewards token on constructor" time="0.0170" classname="should set rewards token on constructor">
    </testcase>
    <testcase name="Contract: ShortingRewards Constructor &amp; Settings should set owner on constructor" time="0.0230" classname="should set owner on constructor">
    </testcase>
  </testsuite>
  <testsuite name="Function permissions" timestamp="2022-02-04T17:37:13" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ShortingRewards.js" time="6.5290" failures="0">
    <testcase name="Contract: ShortingRewards Function permissions only owner can call notifyRewardAmount" time="1.8520" classname="only owner can call notifyRewardAmount">
    </testcase>
    <testcase name="Contract: ShortingRewards Function permissions only rewardsDistribution address can call notifyRewardAmount" time="0.8780" classname="only rewardsDistribution address can call notifyRewardAmount">
    </testcase>
    <testcase name="Contract: ShortingRewards Function permissions only owner address can call setRewardsDuration" time="0.9250" classname="only owner address can call setRewardsDuration">
    </testcase>
    <testcase name="Contract: ShortingRewards Function permissions only owner address can call setPaused" time="0.8720" classname="only owner address can call setPaused">
    </testcase>
  </testsuite>
  <testsuite name="Pausable" timestamp="2022-02-04T17:37:19" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ShortingRewards.js" time="1.5070" failures="0">
    <testcase name="Contract: ShortingRewards Pausable should revert calling enrol() when paused" time="0.4470" classname="should revert calling enrol() when paused">
    </testcase>
    <testcase name="Contract: ShortingRewards Pausable should not revert calling stake() when unpaused" time="0.2580" classname="should not revert calling stake() when unpaused">
    </testcase>
  </testsuite>
  <testsuite name="lastTimeRewardApplicable()" timestamp="2022-02-04T17:37:21" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ShortingRewards.js" time="0.0000" failures="0">
    <testcase name="Contract: ShortingRewards lastTimeRewardApplicable() should return 0" time="0.0130" classname="should return 0">
    </testcase>
  </testsuite>
  <testsuite name="when updated" timestamp="2022-02-04T17:37:21" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ShortingRewards.js" time="0.3890" failures="0">
    <testcase name="Contract: ShortingRewards lastTimeRewardApplicable() when updated should equal current timestamp" time="0.0400" classname="should equal current timestamp">
    </testcase>
  </testsuite>
  <testsuite name="rewardPerToken()" timestamp="2022-02-04T17:37:22" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ShortingRewards.js" time="1.3520" failures="0">
    <testcase name="Contract: ShortingRewards rewardPerToken() should return 0" time="0.0070" classname="should return 0">
    </testcase>
    <testcase name="Contract: ShortingRewards rewardPerToken() should be &gt; 0" time="0.5460" classname="should be &gt; 0">
    </testcase>
  </testsuite>
  <testsuite name="onlyShort modifier" timestamp="2022-02-04T17:37:23" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ShortingRewards.js" time="0.8060" failures="0">
    <testcase name="Contract: ShortingRewards onlyShort modifier enrol() can only be called by the short contract" time="0.0360" classname="enrol() can only be called by the short contract">
    </testcase>
    <testcase name="Contract: ShortingRewards onlyShort modifier withdraw() can only be called by the short contract" time="0.0420" classname="withdraw() can only be called by the short contract">
    </testcase>
  </testsuite>
  <testsuite name="enrol()" timestamp="2022-02-04T17:37:24" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ShortingRewards.js" time="1.3680" failures="0">
    <testcase name="Contract: ShortingRewards enrol() opening a short increases staking balance" time="0.2240" classname="opening a short increases staking balance">
    </testcase>
    <testcase name="Contract: ShortingRewards enrol() drawing on a short increases the staking balance" time="0.4030" classname="drawing on a short increases the staking balance">
    </testcase>
  </testsuite>
  <testsuite name="When positions are liquidated, they are withdraw from the rewards" timestamp="2022-02-04T17:37:25" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ShortingRewards.js" time="2.4390" failures="0">
    <testcase name="Contract: ShortingRewards When positions are liquidated, they are withdraw from the rewards closing reduces the balance to 0" time="0.6400" classname="closing reduces the balance to 0">
    </testcase>
    <testcase name="Contract: ShortingRewards When positions are liquidated, they are withdraw from the rewards partial liquidation reduces the balannce" time="0.7950" classname="partial liquidation reduces the balannce">
    </testcase>
  </testsuite>
  <testsuite name="earned()" timestamp="2022-02-04T17:37:28" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ShortingRewards.js" time="3.3690" failures="0">
    <testcase name="Contract: ShortingRewards earned() should be 0 when not staking" time="0.0290" classname="should be 0 when not staking">
    </testcase>
    <testcase name="Contract: ShortingRewards earned() should be &gt; 0 when staking" time="0.3520" classname="should be &gt; 0 when staking">
    </testcase>
    <testcase name="Contract: ShortingRewards earned() rewardRate should increase if new rewards come before DURATION ends" time="0.2220" classname="rewardRate should increase if new rewards come before DURATION ends">
    </testcase>
    <testcase name="Contract: ShortingRewards earned() rewards token balance should rollover after DURATION" time="0.5830" classname="rewards token balance should rollover after DURATION">
    </testcase>
  </testsuite>
  <testsuite name="getReward()" timestamp="2022-02-04T17:37:31" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ShortingRewards.js" time="1.0570" failures="0">
    <testcase name="Contract: ShortingRewards getReward() should increase rewards token balance" time="0.6430" classname="should increase rewards token balance">
    </testcase>
  </testsuite>
  <testsuite name="setRewardsDuration()" timestamp="2022-02-04T17:37:32" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ShortingRewards.js" time="2.8050" failures="0">
    <testcase name="Contract: ShortingRewards setRewardsDuration() should increase rewards duration before starting distribution" time="0.0430" classname="should increase rewards duration before starting distribution">
    </testcase>
    <testcase name="Contract: ShortingRewards setRewardsDuration() should revert when setting setRewardsDuration before the period has finished" time="0.3020" classname="should revert when setting setRewardsDuration before the period has finished">
    </testcase>
    <testcase name="Contract: ShortingRewards setRewardsDuration() should update when setting setRewardsDuration after the period has finished" time="0.3320" classname="should update when setting setRewardsDuration after the period has finished">
    </testcase>
    <testcase name="Contract: ShortingRewards setRewardsDuration() should update when setting setRewardsDuration after the period has finished" time="0.5630" classname="should update when setting setRewardsDuration after the period has finished">
    </testcase>
  </testsuite>
  <testsuite name="getRewardForDuration()" timestamp="2022-02-04T17:37:35" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ShortingRewards.js" time="0.4500" failures="0">
    <testcase name="Contract: ShortingRewards getRewardForDuration() should increase rewards token balance" time="0.1050" classname="should increase rewards token balance">
    </testcase>
  </testsuite>
  <testsuite name="withdraw()" timestamp="2022-02-04T17:37:35" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ShortingRewards.js" time="0.7360" failures="0">
    <testcase name="Contract: ShortingRewards withdraw() should increases lp token balance and decreases staking balance" time="0.3690" classname="should increases lp token balance and decreases staking balance">
    </testcase>
  </testsuite>
  <testsuite name="exit()" timestamp="2022-02-04T17:37:36" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ShortingRewards.js" time="0.8650" failures="0">
    <testcase name="Contract: ShortingRewards exit() should retrieve all earned and increase rewards bal" time="0.5050" classname="should retrieve all earned and increase rewards bal">
    </testcase>
  </testsuite>
  <testsuite name="notifyRewardAmount()" timestamp="2022-02-04T17:37:37" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ShortingRewards.js" time="1.2170" failures="0">
    <testcase name="Contract: ShortingRewards notifyRewardAmount() Reverts if the provided reward is greater than the balance." time="0.0830" classname="Reverts if the provided reward is greater than the balance.">
    </testcase>
    <testcase name="Contract: ShortingRewards notifyRewardAmount() Reverts if the provided reward is greater than the balance, plus rolled-over balance." time="0.1520" classname="Reverts if the provided reward is greater than the balance, plus rolled-over balance.">
    </testcase>
  </testsuite>
  <testsuite name="Integration Tests" timestamp="2022-02-04T17:37:38" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/ShortingRewards.js" time="4.8380" failures="0">
    <testcase name="Contract: ShortingRewards Integration Tests stake and claim" time="4.3310" classname="stake and claim">
    </testcase>
  </testsuite>
  <testsuite name="Contract: StakingRewards" timestamp="2022-02-04T17:37:43" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/StakingRewards.js" time="0.0000" failures="0">
    <testcase name="Contract: StakingRewards ensure only known functions are mutative" time="0.0550" classname="ensure only known functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="Constructor &amp; Settings" timestamp="2022-02-04T17:37:51" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/StakingRewards.js" time="0.1690" failures="0">
    <testcase name="Contract: StakingRewards Constructor &amp; Settings should set rewards token on constructor" time="0.0140" classname="should set rewards token on constructor">
    </testcase>
    <testcase name="Contract: StakingRewards Constructor &amp; Settings should staking token on constructor" time="0.0060" classname="should staking token on constructor">
    </testcase>
    <testcase name="Contract: StakingRewards Constructor &amp; Settings should set owner on constructor" time="0.0210" classname="should set owner on constructor">
    </testcase>
  </testsuite>
  <testsuite name="Function permissions" timestamp="2022-02-04T17:37:51" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/StakingRewards.js" time="3.3460" failures="0">
    <testcase name="Contract: StakingRewards Function permissions only owner can call notifyRewardAmount" time="0.9300" classname="only owner can call notifyRewardAmount">
    </testcase>
    <testcase name="Contract: StakingRewards Function permissions only rewardsDistribution address can call notifyRewardAmount" time="0.6630" classname="only rewardsDistribution address can call notifyRewardAmount">
    </testcase>
    <testcase name="Contract: StakingRewards Function permissions only owner address can call setRewardsDuration" time="0.7840" classname="only owner address can call setRewardsDuration">
    </testcase>
    <testcase name="Contract: StakingRewards Function permissions only owner address can call setPaused" time="0.8190" classname="only owner address can call setPaused">
    </testcase>
  </testsuite>
  <testsuite name="Pausable" timestamp="2022-02-04T17:37:54" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/StakingRewards.js" time="0.3250" failures="0">
    <testcase name="Contract: StakingRewards Pausable should revert calling stake() when paused" time="0.1220" classname="should revert calling stake() when paused">
    </testcase>
    <testcase name="Contract: StakingRewards Pausable should not revert calling stake() when unpaused" time="0.1310" classname="should not revert calling stake() when unpaused">
    </testcase>
  </testsuite>
  <testsuite name="External Rewards Recovery" timestamp="2022-02-04T17:37:54" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/StakingRewards.js" time="1.4880" failures="0">
    <testcase name="Contract: StakingRewards External Rewards Recovery only owner can call recoverERC20" time="0.9100" classname="only owner can call recoverERC20">
    </testcase>
    <testcase name="Contract: StakingRewards External Rewards Recovery should revert if recovering staking token" time="0.0440" classname="should revert if recovering staking token">
    </testcase>
    <testcase name="Contract: StakingRewards External Rewards Recovery should retrieve external token from StakingRewards and reduce contracts balance" time="0.0520" classname="should retrieve external token from StakingRewards and reduce contracts balance">
    </testcase>
    <testcase name="Contract: StakingRewards External Rewards Recovery should retrieve external token from StakingRewards and increase owners balance" time="0.1110" classname="should retrieve external token from StakingRewards and increase owners balance">
    </testcase>
    <testcase name="Contract: StakingRewards External Rewards Recovery should emit Recovered event" time="0.0390" classname="should emit Recovered event">
    </testcase>
  </testsuite>
  <testsuite name="lastTimeRewardApplicable()" timestamp="2022-02-04T17:37:56" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/StakingRewards.js" time="0.0000" failures="0">
    <testcase name="Contract: StakingRewards lastTimeRewardApplicable() should return 0" time="0.0050" classname="should return 0">
    </testcase>
  </testsuite>
  <testsuite name="when updated" timestamp="2022-02-04T17:37:56" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/StakingRewards.js" time="0.0570" failures="0">
    <testcase name="Contract: StakingRewards lastTimeRewardApplicable() when updated should equal current timestamp" time="0.0450" classname="should equal current timestamp">
    </testcase>
  </testsuite>
  <testsuite name="rewardPerToken()" timestamp="2022-02-04T17:37:56" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/StakingRewards.js" time="0.2740" failures="0">
    <testcase name="Contract: StakingRewards rewardPerToken() should return 0" time="0.0090" classname="should return 0">
    </testcase>
    <testcase name="Contract: StakingRewards rewardPerToken() should be &gt; 0" time="0.2280" classname="should be &gt; 0">
    </testcase>
  </testsuite>
  <testsuite name="stake()" timestamp="2022-02-04T17:37:56" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/StakingRewards.js" time="0.2010" failures="0">
    <testcase name="Contract: StakingRewards stake() staking increases staking balance" time="0.1320" classname="staking increases staking balance">
    </testcase>
    <testcase name="Contract: StakingRewards stake() cannot stake 0" time="0.0400" classname="cannot stake 0">
    </testcase>
  </testsuite>
  <testsuite name="earned()" timestamp="2022-02-04T17:37:56" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/StakingRewards.js" time="0.9100" failures="0">
    <testcase name="Contract: StakingRewards earned() should be 0 when not staking" time="0.0050" classname="should be 0 when not staking">
    </testcase>
    <testcase name="Contract: StakingRewards earned() should be &gt; 0 when staking" time="0.1870" classname="should be &gt; 0 when staking">
    </testcase>
    <testcase name="Contract: StakingRewards earned() rewardRate should increase if new rewards come before DURATION ends" time="0.2110" classname="rewardRate should increase if new rewards come before DURATION ends">
    </testcase>
    <testcase name="Contract: StakingRewards earned() rewards token balance should rollover after DURATION" time="0.4370" classname="rewards token balance should rollover after DURATION">
    </testcase>
  </testsuite>
  <testsuite name="getReward()" timestamp="2022-02-04T17:37:57" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/StakingRewards.js" time="0.2870" failures="0">
    <testcase name="Contract: StakingRewards getReward() should increase rewards token balance" time="0.2700" classname="should increase rewards token balance">
    </testcase>
  </testsuite>
  <testsuite name="setRewardsDuration()" timestamp="2022-02-04T17:37:58" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/StakingRewards.js" time="0.9870" failures="0">
    <testcase name="Contract: StakingRewards setRewardsDuration() should increase rewards duration before starting distribution" time="0.0570" classname="should increase rewards duration before starting distribution">
    </testcase>
    <testcase name="Contract: StakingRewards setRewardsDuration() should revert when setting setRewardsDuration before the period has finished" time="0.2240" classname="should revert when setting setRewardsDuration before the period has finished">
    </testcase>
    <testcase name="Contract: StakingRewards setRewardsDuration() should update when setting setRewardsDuration after the period has finished" time="0.2220" classname="should update when setting setRewardsDuration after the period has finished">
    </testcase>
    <testcase name="Contract: StakingRewards setRewardsDuration() should update when setting setRewardsDuration after the period has finished" time="0.4150" classname="should update when setting setRewardsDuration after the period has finished">
    </testcase>
  </testsuite>
  <testsuite name="getRewardForDuration()" timestamp="2022-02-04T17:37:59" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/StakingRewards.js" time="0.1290" failures="0">
    <testcase name="Contract: StakingRewards getRewardForDuration() should increase rewards token balance" time="0.1160" classname="should increase rewards token balance">
    </testcase>
  </testsuite>
  <testsuite name="withdraw()" timestamp="2022-02-04T17:37:59" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/StakingRewards.js" time="0.3170" failures="0">
    <testcase name="Contract: StakingRewards withdraw() cannot withdraw if nothing staked" time="0.0600" classname="cannot withdraw if nothing staked">
    </testcase>
    <testcase name="Contract: StakingRewards withdraw() should increases lp token balance and decreases staking balance" time="0.1680" classname="should increases lp token balance and decreases staking balance">
    </testcase>
    <testcase name="Contract: StakingRewards withdraw() cannot withdraw 0" time="0.0320" classname="cannot withdraw 0">
    </testcase>
  </testsuite>
  <testsuite name="exit()" timestamp="2022-02-04T17:37:59" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/StakingRewards.js" time="0.2960" failures="0">
    <testcase name="Contract: StakingRewards exit() should retrieve all earned and increase rewards bal" time="0.2830" classname="should retrieve all earned and increase rewards bal">
    </testcase>
  </testsuite>
  <testsuite name="notifyRewardAmount()" timestamp="2022-02-04T17:37:59" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/StakingRewards.js" time="0.4290" failures="0">
    <testcase name="Contract: StakingRewards notifyRewardAmount() Reverts if the provided reward is greater than the balance." time="0.0860" classname="Reverts if the provided reward is greater than the balance.">
    </testcase>
    <testcase name="Contract: StakingRewards notifyRewardAmount() Reverts if the provided reward is greater than the balance, plus rolled-over balance." time="0.1850" classname="Reverts if the provided reward is greater than the balance, plus rolled-over balance.">
    </testcase>
  </testsuite>
  <testsuite name="Integration Tests" timestamp="2022-02-04T17:38:00" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/StakingRewards.js" time="0.7840" failures="0">
    <testcase name="Contract: StakingRewards Integration Tests stake and claim" time="0.5910" classname="stake and claim">
    </testcase>
  </testsuite>
  <testsuite name="Contract: State" timestamp="2022-02-04T17:38:01" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/State.js" time="0.0000" failures="0">
    <testcase name="Contract: State ensure only known functions are mutative" time="0.0280" classname="ensure only known functions are mutative">
    </testcase>
    <testcase name="Contract: State it fails when instantiated directly" time="0.0000" classname="it fails when instantiated directly">
    </testcase>
  </testsuite>
  <testsuite name="when instantiated by a contract" timestamp="2022-02-04T17:38:01" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/State.js" time="0.0000" failures="0">
    <testcase name="Contract: State when instantiated by a contract the associated contract is set as expected" time="0.0140" classname="the associated contract is set as expected">
    </testcase>
  </testsuite>
  <testsuite name="setAssociatedContract()" timestamp="2022-02-04T17:38:01" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/State.js" time="0.6850" failures="0">
    <testcase name="Contract: State when instantiated by a contract setAssociatedContract() can only be invoked by the owner" time="0.5920" classname="can only be invoked by the owner">
    </testcase>
    <testcase name="Contract: State when instantiated by a contract setAssociatedContract() when invoked by the owner, it changes the associated owner" time="0.0390" classname="when invoked by the owner, it changes the associated owner">
    </testcase>
  </testsuite>
  <testsuite name="onlyAssociatedContract modifier" timestamp="2022-02-04T17:38:01" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/State.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when applied to a function" timestamp="2022-02-04T17:38:01" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/State.js" time="0.6190" failures="0">
    <testcase name="Contract: State when instantiated by a contract onlyAssociatedContract modifier when applied to a function then that function cannot be invoked by anyone else " time="0.5760" classname="then that function cannot be invoked by anyone else ">
    </testcase>
  </testsuite>
  <testsuite name="Contract: SupplySchedule" timestamp="2022-02-04T17:38:02" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SupplySchedule.js" time="0.0000" failures="0">
    <testcase name="Contract: SupplySchedule only expected functions should be mutative" time="0.0320" classname="only expected functions should be mutative">
    </testcase>
    <testcase name="Contract: SupplySchedule should set constructor params on deployment" time="0.2140" classname="should set constructor params on deployment">
    </testcase>
  </testsuite>
  <testsuite name="linking synthetix" timestamp="2022-02-04T17:38:03" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SupplySchedule.js" time="1.6550" failures="0">
    <testcase name="Contract: SupplySchedule linking synthetix should have set synthetix proxy" time="0.0050" classname="should have set synthetix proxy">
    </testcase>
    <testcase name="Contract: SupplySchedule linking synthetix should revert when setting synthetix proxy to ZERO_ADDRESS" time="0.0390" classname="should revert when setting synthetix proxy to ZERO_ADDRESS">
    </testcase>
    <testcase name="Contract: SupplySchedule linking synthetix should emit an event when setting synthetix proxy" time="0.0290" classname="should emit an event when setting synthetix proxy">
    </testcase>
    <testcase name="Contract: SupplySchedule linking synthetix should disallow a non-owner from setting the synthetix proxy" time="0.5630" classname="should disallow a non-owner from setting the synthetix proxy">
    </testcase>
  </testsuite>
  <testsuite name="functions and modifiers" timestamp="2022-02-04T17:38:05" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SupplySchedule.js" time="0.0000" failures="0">
    <testcase name="Contract: SupplySchedule functions and modifiers should allow owner to update the minter reward amount" time="0.0390" classname="should allow owner to update the minter reward amount">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers should disallow a non-owner from setting the minter reward amount" time="0.5150" classname="should disallow a non-owner from setting the minter reward amount">
    </testcase>
  </testsuite>
  <testsuite name="exponential decay supply with initial weekly supply of 1.44m" timestamp="2022-02-04T17:38:06" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SupplySchedule.js" time="1.5810" failures="0">
    <testcase name="Contract: SupplySchedule functions and modifiers exponential decay supply with initial weekly supply of 1.44m check calculating week 1 of inflation decay is valid" time="0.0210" classname="check calculating week 1 of inflation decay is valid">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers exponential decay supply with initial weekly supply of 1.44m should calculate Week 2 Supply of inflation decay from initial weekly supply" time="0.0080" classname="should calculate Week 2 Supply of inflation decay from initial weekly supply">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers exponential decay supply with initial weekly supply of 1.44m should calculate Week 3 Supply of inflation decay from initial weekly supply" time="0.0120" classname="should calculate Week 3 Supply of inflation decay from initial weekly supply">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers exponential decay supply with initial weekly supply of 1.44m should calculate Week 10 Supply of inflation decay from initial weekly supply" time="0.0090" classname="should calculate Week 10 Supply of inflation decay from initial weekly supply">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers exponential decay supply with initial weekly supply of 1.44m should calculate Week 11 Supply of inflation decay from initial weekly supply" time="0.0140" classname="should calculate Week 11 Supply of inflation decay from initial weekly supply">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers exponential decay supply with initial weekly supply of 1.44m should calculate last Week 195 Supply of inflation decay from initial weekly supply" time="0.0120" classname="should calculate last Week 195 Supply of inflation decay from initial weekly supply">
    </testcase>
  </testsuite>
  <testsuite name="terminal inflation supply with initial total supply of 1,000,000" timestamp="2022-02-04T17:38:07" tests="8" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SupplySchedule.js" time="2.2990" failures="0">
    <testcase name="Contract: SupplySchedule functions and modifiers terminal inflation supply with initial total supply of 1,000,000 should calculate weekly supply for 1 week at 1.25pa% with 1m principal" time="0.0070" classname="should calculate weekly supply for 1 week at 1.25pa% with 1m principal">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers terminal inflation supply with initial total supply of 1,000,000 should calculate compounded weekly supply for 2 weeks at 1.25pa%" time="0.0060" classname="should calculate compounded weekly supply for 2 weeks at 1.25pa%">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers terminal inflation supply with initial total supply of 1,000,000 should calculate compounded weekly supply for 4 weeks at 1.25pa%" time="0.0080" classname="should calculate compounded weekly supply for 4 weeks at 1.25pa%">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers terminal inflation supply with initial total supply of 1,000,000 should calculate compounded weekly supply with principal 10m for 10 weeks at 1.25pa%" time="0.0140" classname="should calculate compounded weekly supply with principal 10m for 10 weeks at 1.25pa%">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers terminal inflation supply with initial total supply of 1,000,000 should calculate compounded weekly supply with principal 260,387,945 for 1 week at 1.25pa%" time="0.0130" classname="should calculate compounded weekly supply with principal 260,387,945 for 1 week at 1.25pa%">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers terminal inflation supply with initial total supply of 1,000,000 should calculate compounded weekly supply with principal 260,387,945 for 2 weeks at 1.25pa%" time="0.0070" classname="should calculate compounded weekly supply with principal 260,387,945 for 2 weeks at 1.25pa%">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers terminal inflation supply with initial total supply of 1,000,000 should calculate compounded weekly supply with principal 260,387,945 for 10 weeks at 1.25pa%" time="0.0090" classname="should calculate compounded weekly supply with principal 260,387,945 for 10 weeks at 1.25pa%">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers terminal inflation supply with initial total supply of 1,000,000 should calculate compounded weekly supply with principal 260,387,945 for 100 weeks at 1.25pa%" time="0.0080" classname="should calculate compounded weekly supply with principal 260,387,945 for 100 weeks at 1.25pa%">
    </testcase>
  </testsuite>
  <testsuite name="mintable supply" timestamp="2022-02-04T17:38:09" tests="9" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SupplySchedule.js" time="0.0000" failures="1">
    <testcase name="Contract: SupplySchedule functions and modifiers mintable supply should calculate the mintable supply as 0 within 1st week in year 2 " time="0.0010" classname="should calculate the mintable supply as 0 within 1st week in year 2 ">
      <failure message="Time parameter (Wed Mar 06 2019 20:00:00 GMT-0500 (Eastern Standard Time)) is less than now Wed Mar 06 2019 20:56:23 GMT-0500 (Eastern Standard Time). You can only fast forward to times in the future." type="Error"><![CDATA[Error: Time parameter (Wed Mar 06 2019 20:00:00 GMT-0500 (Eastern Standard Time)) is less than now Wed Mar 06 2019 20:56:23 GMT-0500 (Eastern Standard Time). You can only fast forward to times in the future.
    at fastForwardTo (test/utils/index.js:111:10)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at Context.<anonymous> (test/contracts/SupplySchedule.js:296:5)]]></failure>
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers mintable supply should calculate the mintable supply for 1 weeks in year 2 in week 2 - 75M supply" time="0.0150" classname="should calculate the mintable supply for 1 weeks in year 2 in week 2 - 75M supply">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers mintable supply should calculate the mintable supply for 2 weeks in year 2 in week 3 - 75M supply" time="0.0270" classname="should calculate the mintable supply for 2 weeks in year 2 in week 3 - 75M supply">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers mintable supply should calculate the mintable supply for 3 weeks in year 2 in week 4 - 75M supply" time="0.0200" classname="should calculate the mintable supply for 3 weeks in year 2 in week 4 - 75M supply">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers mintable supply should calculate the mintable supply for 39 weeks without decay in Year 2 - 75M supply" time="0.0240" classname="should calculate the mintable supply for 39 weeks without decay in Year 2 - 75M supply">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers mintable supply should calculate the mintable supply for 39 weeks without decay, 1 week with decay in week 41" time="0.0250" classname="should calculate the mintable supply for 39 weeks without decay, 1 week with decay in week 41">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers mintable supply should calculate the mintable supply for 39 weeks without decay, 2 weeks with decay in week 42" time="0.0230" classname="should calculate the mintable supply for 39 weeks without decay, 2 weeks with decay in week 42">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers mintable supply should calculate mintable supply of 1x week after minting" time="0.0690" classname="should calculate mintable supply of 1x week after minting">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers mintable supply should calculate mintable supply of 2 weeks if 2+ weeks passed, after minting" time="0.1370" classname="should calculate mintable supply of 2 weeks if 2+ weeks passed, after minting">
    </testcase>
  </testsuite>
  <testsuite name="rounding down lastMintEvent to number of weeks issued since inflation start date" timestamp="2022-02-04T17:38:16" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SupplySchedule.js" time="1.2680" failures="0">
    <testcase name="Contract: SupplySchedule functions and modifiers mintable supply rounding down lastMintEvent to number of weeks issued since inflation start date should have 0 mintable supply, only after 1 day, if minting was 5 days late" time="0.0790" classname="should have 0 mintable supply, only after 1 day, if minting was 5 days late">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers mintable supply rounding down lastMintEvent to number of weeks issued since inflation start date should be 1 week of mintable supply, after 2+ days, if minting was 5 days late" time="0.1320" classname="should be 1 week of mintable supply, after 2+ days, if minting was 5 days late">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers mintable supply rounding down lastMintEvent to number of weeks issued since inflation start date should calculate 2 weeks of mintable supply after 1 week and 2+ days, if minting was 5 days late in week 2" time="0.0990" classname="should calculate 2 weeks of mintable supply after 1 week and 2+ days, if minting was 5 days late in week 2">
    </testcase>
  </testsuite>
  <testsuite name="setting weekCounter and lastMintEvent on supplySchedule to week 39" timestamp="2022-02-04T17:38:17" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SupplySchedule.js" time="1.8860" failures="0">
    <testcase name="Contract: SupplySchedule functions and modifiers mintable supply setting weekCounter and lastMintEvent on supplySchedule to week 39 should calculate week 40 as week 1 of decay " time="0.1010" classname="should calculate week 40 as week 1 of decay ">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers mintable supply setting weekCounter and lastMintEvent on supplySchedule to week 39 should calculate week 41 as week 2 of decay " time="0.1290" classname="should calculate week 41 as week 2 of decay ">
    </testcase>
    <testcase name="Contract: SupplySchedule functions and modifiers mintable supply setting weekCounter and lastMintEvent on supplySchedule to week 39 should calculate week 45 as week 6 of decay " time="0.0810" classname="should calculate week 45 as week 6 of decay ">
    </testcase>
  </testsuite>
  <testsuite name="setting weekCounter and lastMintEvent on supplySchedule to week 233" timestamp="2022-02-04T17:38:19" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SupplySchedule.js" time="0.6330" failures="0">
    <testcase name="Contract: SupplySchedule functions and modifiers mintable supply setting weekCounter and lastMintEvent on supplySchedule to week 233 should calculate week 234 as last week of decay (195th) " time="0.1570" classname="should calculate week 234 as last week of decay (195th) ">
    </testcase>
  </testsuite>
  <testsuite name="Contract: Synth" timestamp="2022-02-04T17:38:19" tests="7" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.0000" failures="0">
    <testcase name="Contract: Synth should set constructor params on deployment" time="0.1040" classname="should set constructor params on deployment">
    </testcase>
    <testcase name="Contract: Synth should transfer (ERC20) without error @gasprofile" time="0.2300" classname="should transfer (ERC20) without error @gasprofile">
    </testcase>
    <testcase name="Contract: Synth should revert when transferring (ERC20) with insufficient balance" time="0.2330" classname="should revert when transferring (ERC20) with insufficient balance">
    </testcase>
    <testcase name="Contract: Synth should transferFrom (ERC20) without error @gasprofile" time="0.2280" classname="should transferFrom (ERC20) without error @gasprofile">
    </testcase>
    <testcase name="Contract: Synth should revert when calling transferFrom (ERC20) with insufficient allowance" time="0.2380" classname="should revert when calling transferFrom (ERC20) with insufficient allowance">
    </testcase>
    <testcase name="Contract: Synth should revert when calling transferFrom (ERC20) with insufficient balance" time="0.2270" classname="should revert when calling transferFrom (ERC20) with insufficient balance">
    </testcase>
    <testcase name="Contract: Synth should transfer (ERC20) with no fee" time="0.2070" classname="should transfer (ERC20) with no fee">
    </testcase>
  </testsuite>
  <testsuite name="mutative functions and access" timestamp="2022-02-04T17:38:28" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.0000" failures="0">
    <testcase name="Contract: Synth mutative functions and access ensure only known functions are mutative" time="0.0540" classname="ensure only known functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="when non-internal contract tries to issue" timestamp="2022-02-04T17:38:28" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.7750" failures="0">
    <testcase name="Contract: Synth mutative functions and access when non-internal contract tries to issue then it fails" time="0.6450" classname="then it fails">
    </testcase>
  </testsuite>
  <testsuite name="when non-internal tries to burn" timestamp="2022-02-04T17:38:29" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.7960" failures="0">
    <testcase name="Contract: Synth mutative functions and access when non-internal tries to burn then it fails" time="0.6660" classname="then it fails">
    </testcase>
  </testsuite>
  <testsuite name="suspension conditions on transfers" timestamp="2022-02-04T17:38:30" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:38:30" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.0000" failures="0">
    <testcase name="Contract: Synth suspension conditions on transfers when System is suspended when transfer() is invoked, it reverts with operation prohibited" time="0.0580" classname="when transfer() is invoked, it reverts with operation prohibited">
    </testcase>
    <testcase name="Contract: Synth suspension conditions on transfers when System is suspended when transferFrom() is invoked, it reverts with operation prohibited" time="0.0740" classname="when transferFrom() is invoked, it reverts with operation prohibited">
    </testcase>
  </testsuite>
  <testsuite name="when the system is resumed" timestamp="2022-02-04T17:38:30" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="2.1180" failures="0">
    <testcase name="Contract: Synth suspension conditions on transfers when System is suspended when the system is resumed when transfer() is invoked, it works as expected" time="0.2380" classname="when transfer() is invoked, it works as expected">
    </testcase>
    <testcase name="Contract: Synth suspension conditions on transfers when System is suspended when the system is resumed when transferFrom() is invoked, it works as expected" time="0.0480" classname="when transferFrom() is invoked, it works as expected">
    </testcase>
  </testsuite>
  <testsuite name="when Synth is suspended" timestamp="2022-02-04T17:38:33" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.0000" failures="0">
    <testcase name="Contract: Synth suspension conditions on transfers when Synth is suspended when transfer() is invoked, it reverts with operation prohibited" time="0.0630" classname="when transfer() is invoked, it reverts with operation prohibited">
    </testcase>
    <testcase name="Contract: Synth suspension conditions on transfers when Synth is suspended when transferFrom() is invoked, it reverts with operation prohibited" time="0.0820" classname="when transferFrom() is invoked, it reverts with operation prohibited">
    </testcase>
  </testsuite>
  <testsuite name="when the system is resumed" timestamp="2022-02-04T17:38:34" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.9170" failures="0">
    <testcase name="Contract: Synth suspension conditions on transfers when Synth is suspended when the system is resumed when transfer() is invoked, it works as expected" time="0.0390" classname="when transfer() is invoked, it works as expected">
    </testcase>
    <testcase name="Contract: Synth suspension conditions on transfers when Synth is suspended when the system is resumed when transferFrom() is invoked, it works as expected" time="0.0600" classname="when transferFrom() is invoked, it works as expected">
    </testcase>
  </testsuite>
  <testsuite name="when sETH is suspended" timestamp="2022-02-04T17:38:34" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.0000" failures="0">
    <testcase name="Contract: Synth suspension conditions on transfers when sETH is suspended when transfer() is invoked for sUSD, it works as expected" time="0.0480" classname="when transfer() is invoked for sUSD, it works as expected">
    </testcase>
    <testcase name="Contract: Synth suspension conditions on transfers when sETH is suspended when transferFrom() is invoked for sUSD, it works as expected" time="0.0870" classname="when transferFrom() is invoked for sUSD, it works as expected">
    </testcase>
  </testsuite>
  <testsuite name="when sUSD is suspended for exchanging" timestamp="2022-02-04T17:38:35" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.8560" failures="0">
    <testcase name="Contract: Synth suspension conditions on transfers when sETH is suspended when sUSD is suspended for exchanging when transfer() is invoked for sUSD, it works as expected" time="0.0490" classname="when transfer() is invoked for sUSD, it works as expected">
    </testcase>
    <testcase name="Contract: Synth suspension conditions on transfers when sETH is suspended when sUSD is suspended for exchanging when transferFrom() is invoked for sETH, it works as expected" time="0.0460" classname="when transferFrom() is invoked for sETH, it works as expected">
    </testcase>
  </testsuite>
  <testsuite name="invoking issue/burn directly as Issuer" timestamp="2022-02-04T17:38:36" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.6280" failures="0">
    <testcase name="Contract: Synth invoking issue/burn directly as Issuer should issue successfully when called by Issuer" time="0.0450" classname="should issue successfully when called by Issuer">
    </testcase>
    <testcase name="Contract: Synth invoking issue/burn directly as Issuer should burn successfully when called by Issuer" time="0.0560" classname="should burn successfully when called by Issuer">
    </testcase>
  </testsuite>
  <testsuite name="transfer / transferFrom And Settle" timestamp="2022-02-04T17:38:37" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="suspension conditions" timestamp="2022-02-04T17:38:37" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:38:37" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.0000" failures="0">
    <testcase name="Contract: Synth transfer / transferFrom And Settle suspension conditions when System is suspended when transferAndSettle() is invoked, it reverts with operation prohibited" time="0.0490" classname="when transferAndSettle() is invoked, it reverts with operation prohibited">
    </testcase>
    <testcase name="Contract: Synth transfer / transferFrom And Settle suspension conditions when System is suspended when transferFromAndSettle() is invoked, it reverts with operation prohibited" time="0.0650" classname="when transferFromAndSettle() is invoked, it reverts with operation prohibited">
    </testcase>
  </testsuite>
  <testsuite name="when the system is resumed" timestamp="2022-02-04T17:38:38" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.7880" failures="0">
    <testcase name="Contract: Synth transfer / transferFrom And Settle suspension conditions when System is suspended when the system is resumed when transferAndSettle() is invoked, it works as expected" time="0.0410" classname="when transferAndSettle() is invoked, it works as expected">
    </testcase>
    <testcase name="Contract: Synth transfer / transferFrom And Settle suspension conditions when System is suspended when the system is resumed when transferFromAndSettle() is invoked, it works as expected" time="0.0630" classname="when transferFromAndSettle() is invoked, it works as expected">
    </testcase>
  </testsuite>
  <testsuite name="when Synth is suspended" timestamp="2022-02-04T17:38:38" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.0000" failures="0">
    <testcase name="Contract: Synth transfer / transferFrom And Settle suspension conditions when Synth is suspended when transferAndSettle() is invoked, it reverts with operation prohibited" time="0.0450" classname="when transferAndSettle() is invoked, it reverts with operation prohibited">
    </testcase>
    <testcase name="Contract: Synth transfer / transferFrom And Settle suspension conditions when Synth is suspended when transferFromAndSettle() is invoked, it reverts with operation prohibited" time="0.0390" classname="when transferFromAndSettle() is invoked, it reverts with operation prohibited">
    </testcase>
  </testsuite>
  <testsuite name="when the system is resumed" timestamp="2022-02-04T17:38:39" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.7970" failures="0">
    <testcase name="Contract: Synth transfer / transferFrom And Settle suspension conditions when Synth is suspended when the system is resumed when transferAndSettle() is invoked, it works as expected" time="0.0520" classname="when transferAndSettle() is invoked, it works as expected">
    </testcase>
    <testcase name="Contract: Synth transfer / transferFrom And Settle suspension conditions when Synth is suspended when the system is resumed when transferFromAndSettle() is invoked, it works as expected" time="0.0560" classname="when transferFromAndSettle() is invoked, it works as expected">
    </testcase>
  </testsuite>
  <testsuite name="when sETH is suspended" timestamp="2022-02-04T17:38:40" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.7480" failures="0">
    <testcase name="Contract: Synth transfer / transferFrom And Settle suspension conditions when sETH is suspended when transferAndSettle() is invoked for sUSD, it works as expected" time="0.0490" classname="when transferAndSettle() is invoked for sUSD, it works as expected">
    </testcase>
    <testcase name="Contract: Synth transfer / transferFrom And Settle suspension conditions when sETH is suspended when transferFromAndSettle() is invoked for sUSD, it works as expected" time="0.0510" classname="when transferFromAndSettle() is invoked for sUSD, it works as expected">
    </testcase>
  </testsuite>
  <testsuite name="with mock exchanger" timestamp="2022-02-04T17:38:41" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.0000" failures="0">
    <testcase name="Contract: Synth transfer / transferFrom And Settle with mock exchanger then transferableSynths should be the total amount" time="0.0160" classname="then transferableSynths should be the total amount">
    </testcase>
  </testsuite>
  <testsuite name="when max seconds in waiting period is non-zero" timestamp="2022-02-04T17:38:41" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.9080" failures="0">
    <testcase name="Contract: Synth transfer / transferFrom And Settle with mock exchanger when max seconds in waiting period is non-zero when the synth is attempted to be transferred away by the user, it reverts" time="0.0530" classname="when the synth is attempted to be transferred away by the user, it reverts">
    </testcase>
    <testcase name="Contract: Synth transfer / transferFrom And Settle with mock exchanger when max seconds in waiting period is non-zero when sEUR is attempted to be transferFrom away by another user, it reverts" time="0.0280" classname="when sEUR is attempted to be transferFrom away by another user, it reverts">
    </testcase>
  </testsuite>
  <testsuite name="when reclaim amount is set to 10" timestamp="2022-02-04T17:38:42" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.0000" failures="0">
    <testcase name="Contract: Synth transfer / transferFrom And Settle with mock exchanger when reclaim amount is set to 10 then transferableSynths should be the total amount minus the reclaim" time="0.0200" classname="then transferableSynths should be the total amount minus the reclaim">
    </testcase>
    <testcase name="Contract: Synth transfer / transferFrom And Settle with mock exchanger when reclaim amount is set to 10 should transfer all and settle 1000 sUSD less reclaim amount" time="0.0750" classname="should transfer all and settle 1000 sUSD less reclaim amount">
    </testcase>
    <testcase name="Contract: Synth transfer / transferFrom And Settle with mock exchanger when reclaim amount is set to 10 should transferFrom all and settle 1000 sUSD less reclaim amount" time="0.1160" classname="should transferFrom all and settle 1000 sUSD less reclaim amount">
    </testcase>
  </testsuite>
  <testsuite name="when account has more balance than transfer amount + reclaim" timestamp="2022-02-04T17:38:44" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="1.4520" failures="0">
    <testcase name="Contract: Synth transfer / transferFrom And Settle with mock exchanger when reclaim amount is set to 10 when account has more balance than transfer amount + reclaim should transfer 50 sUSD and burn 10 sUSD" time="0.0900" classname="should transfer 50 sUSD and burn 10 sUSD">
    </testcase>
    <testcase name="Contract: Synth transfer / transferFrom And Settle with mock exchanger when reclaim amount is set to 10 when account has more balance than transfer amount + reclaim should transferFrom 50 sUSD and settle reclaim amount" time="0.1750" classname="should transferFrom 50 sUSD and settle reclaim amount">
    </testcase>
  </testsuite>
  <testsuite name="when synth balance after reclamation is less than requested transfer value" timestamp="2022-02-04T17:38:45" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when reclaim 600 sUSD and attempting to transfer 500 sUSD synths" timestamp="2022-02-04T17:38:45" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="using regular transfer and transferFrom" timestamp="2022-02-04T17:38:45" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="1.3420" failures="0">
    <testcase name="Contract: Synth transfer / transferFrom And Settle with mock exchanger when synth balance after reclamation is less than requested transfer value when reclaim 600 sUSD and attempting to transfer 500 sUSD synths using regular transfer and transferFrom via regular transfer it reverts" time="0.0620" classname="via regular transfer it reverts">
    </testcase>
    <testcase name="Contract: Synth transfer / transferFrom And Settle with mock exchanger when synth balance after reclamation is less than requested transfer value when reclaim 600 sUSD and attempting to transfer 500 sUSD synths using regular transfer and transferFrom via transferFrom it also reverts" time="0.0820" classname="via transferFrom it also reverts">
    </testcase>
  </testsuite>
  <testsuite name="using transferAndSettle" timestamp="2022-02-04T17:38:46" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="1.6980" failures="0">
    <testcase name="Contract: Synth transfer / transferFrom And Settle with mock exchanger when synth balance after reclamation is less than requested transfer value when reclaim 600 sUSD and attempting to transfer 500 sUSD synths using transferAndSettle then transferableSynths should be the total amount" time="0.0150" classname="then transferableSynths should be the total amount">
    </testcase>
    <testcase name="Contract: Synth transfer / transferFrom And Settle with mock exchanger when synth balance after reclamation is less than requested transfer value when reclaim 600 sUSD and attempting to transfer 500 sUSD synths using transferAndSettle should transfer remaining balance less reclaimed" time="0.0880" classname="should transfer remaining balance less reclaimed">
    </testcase>
    <testcase name="Contract: Synth transfer / transferFrom And Settle with mock exchanger when synth balance after reclamation is less than requested transfer value when reclaim 600 sUSD and attempting to transfer 500 sUSD synths using transferAndSettle should transferFrom and send balance minus reclaimed amount" time="0.1390" classname="should transferFrom and send balance minus reclaimed amount">
    </testcase>
  </testsuite>
  <testsuite name="when transferring synths to FEE_ADDRESS" timestamp="2022-02-04T17:38:48" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.0000" failures="0">
    <testcase name="Contract: Synth when transferring synths to FEE_ADDRESS should transfer to FEE_ADDRESS and recorded as fee" time="0.1140" classname="should transfer to FEE_ADDRESS and recorded as fee">
    </testcase>
  </testsuite>
  <testsuite name="when a non-USD synth exists" timestamp="2022-02-04T17:38:48" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="3.6610" failures="0">
    <testcase name="Contract: Synth when transferring synths to FEE_ADDRESS when a non-USD synth exists when transferring it to FEE_ADDRESS it should exchange into sUSD first before sending" time="0.5510" classname="when transferring it to FEE_ADDRESS it should exchange into sUSD first before sending">
    </testcase>
  </testsuite>
  <testsuite name="when transferring synths to ZERO_ADDRESS" timestamp="2022-02-04T17:38:52" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synth.js" time="0.2750" failures="0">
    <testcase name="Contract: Synth when transferring synths to ZERO_ADDRESS should burn the synths and reduce totalSupply" time="0.0720" classname="should burn the synths and reduce totalSupply">
    </testcase>
  </testsuite>
  <testsuite name="Contract: Synthetix" timestamp="2022-02-04T17:38:52" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synthetix.js" time="0.0000" failures="0">
    <testcase name="Contract: Synthetix ensure only expected functions are mutative" time="0.0400" classname="ensure only expected functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="constructor" timestamp="2022-02-04T17:38:59" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synthetix.js" time="0.1640" failures="0">
    <testcase name="Contract: Synthetix constructor should set constructor params on deployment" time="0.1520" classname="should set constructor params on deployment">
    </testcase>
  </testsuite>
  <testsuite name="Exchanger calls" timestamp="2022-02-04T17:38:59" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synthetix.js" time="0.5470" failures="0">
    <testcase name="Contract: Synthetix Exchanger calls exchangeWithVirtual is called with the right arguments" time="0.0320" classname="exchangeWithVirtual is called with the right arguments">
    </testcase>
    <testcase name="Contract: Synthetix Exchanger calls exchangeWithTrackingForInitiator is called with the right arguments " time="0.0500" classname="exchangeWithTrackingForInitiator is called with the right arguments ">
    </testcase>
    <testcase name="Contract: Synthetix Exchanger calls exchangeAtomically is called with the right arguments " time="0.0400" classname="exchangeAtomically is called with the right arguments ">
    </testcase>
  </testsuite>
  <testsuite name="mint() - inflationary supply minting" timestamp="2022-02-04T17:39:00" tests="7" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synthetix.js" time="0.0000" failures="0">
    <testcase name="Contract: Synthetix mint() - inflationary supply minting should allow synthetix contract to mint inflationary decay for 234 weeks" time="3.1960" classname="should allow synthetix contract to mint inflationary decay for 234 weeks">
    </testcase>
    <testcase name="Contract: Synthetix mint() - inflationary supply minting should allow synthetix contract to mint 2 weeks of supply and minus minterReward" time="0.5760" classname="should allow synthetix contract to mint 2 weeks of supply and minus minterReward">
    </testcase>
    <testcase name="Contract: Synthetix mint() - inflationary supply minting should allow synthetix contract to mint the same supply for 39 weeks into the inflation prior to decay" time="0.8990" classname="should allow synthetix contract to mint the same supply for 39 weeks into the inflation prior to decay">
    </testcase>
    <testcase name="Contract: Synthetix mint() - inflationary supply minting should allow synthetix contract to mint 2 weeks into Terminal Inflation" time="3.2120" classname="should allow synthetix contract to mint 2 weeks into Terminal Inflation">
    </testcase>
    <testcase name="Contract: Synthetix mint() - inflationary supply minting should allow synthetix contract to mint Terminal Inflation to 2030" time="2.8340" classname="should allow synthetix contract to mint Terminal Inflation to 2030">
    </testcase>
    <testcase name="Contract: Synthetix mint() - inflationary supply minting should be able to mint again after another 7 days period" time="1.3730" classname="should be able to mint again after another 7 days period">
    </testcase>
    <testcase name="Contract: Synthetix mint() - inflationary supply minting should revert when trying to mint again within the 7 days period" time="0.7640" classname="should revert when trying to mint again within the 7 days period">
    </testcase>
  </testsuite>
  <testsuite name="suspension conditions" timestamp="2022-02-04T17:39:13" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synthetix.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when System is suspended" timestamp="2022-02-04T17:39:13" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synthetix.js" time="0.0000" failures="0">
    <testcase name="Contract: Synthetix mint() - inflationary supply minting suspension conditions when System is suspended then calling mint() reverts" time="0.0510" classname="then calling mint() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when System is resumed" timestamp="2022-02-04T17:39:13" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synthetix.js" time="1.5780" failures="0">
    <testcase name="Contract: Synthetix mint() - inflationary supply minting suspension conditions when System is suspended when System is resumed then calling mint() succeeds" time="1.0660" classname="then calling mint() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is suspended" timestamp="2022-02-04T17:39:15" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synthetix.js" time="0.0000" failures="0">
    <testcase name="Contract: Synthetix mint() - inflationary supply minting suspension conditions when Issuance is suspended then calling mint() reverts" time="0.0270" classname="then calling mint() reverts">
    </testcase>
  </testsuite>
  <testsuite name="when Issuance is resumed" timestamp="2022-02-04T17:39:15" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synthetix.js" time="1.7230" failures="0">
    <testcase name="Contract: Synthetix mint() - inflationary supply minting suspension conditions when Issuance is suspended when Issuance is resumed then calling mint() succeeds" time="1.0550" classname="then calling mint() succeeds">
    </testcase>
  </testsuite>
  <testsuite name="migration - transfer escrow balances to reward escrow v2" timestamp="2022-02-04T17:39:17" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synthetix.js" time="0.1880" failures="0">
    <testcase name="Contract: Synthetix migration - transfer escrow balances to reward escrow v2 should revert if called by non-owner account" time="0.0240" classname="should revert if called by non-owner account">
    </testcase>
    <testcase name="Contract: Synthetix migration - transfer escrow balances to reward escrow v2 should have transferred reward escrow balance to reward escrow v2" time="0.0540" classname="should have transferred reward escrow balance to reward escrow v2">
    </testcase>
  </testsuite>
  <testsuite name="Using a contract to invoke exchangeWithTrackingForInitiator" timestamp="2022-02-04T17:39:17" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synthetix.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a third party contract is setup to exchange synths" timestamp="2022-02-04T17:39:17" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synthetix.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when Barrie invokes the exchange function on the contract" timestamp="2022-02-04T17:39:17" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Synthetix.js" time="3.0450" failures="0">
    <testcase name="Contract: Synthetix Using a contract to invoke exchangeWithTrackingForInitiator when a third party contract is setup to exchange synths when Barrie invokes the exchange function on the contract then Barrie has the synths in her account" time="0.0090" classname="then Barrie has the synths in her account">
    </testcase>
    <testcase name="Contract: Synthetix Using a contract to invoke exchangeWithTrackingForInitiator when a third party contract is setup to exchange synths when Barrie invokes the exchange function on the contract and the contract has none" time="0.0060" classname="and the contract has none">
    </testcase>
    <testcase name="Contract: Synthetix Using a contract to invoke exchangeWithTrackingForInitiator when a third party contract is setup to exchange synths when Barrie invokes the exchange function on the contract and the event emitted indicates that Barrie was the destinationAddress" time="0.0320" classname="and the event emitted indicates that Barrie was the destinationAddress">
    </testcase>
  </testsuite>
  <testsuite name="Contract: SynthetixBridgeEscrow (spec tests) @ovm-skip" timestamp="2022-02-04T17:39:20" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeEscrow.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when deploying the system" timestamp="2022-02-04T17:39:20" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeEscrow.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="approveBridge" timestamp="2022-02-04T17:39:26" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeEscrow.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when invoked by the owner" timestamp="2022-02-04T17:39:26" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeEscrow.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when there is no approval" timestamp="2022-02-04T17:39:26" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeEscrow.spec.js" time="0.0650" failures="0">
    <testcase name="Contract: SynthetixBridgeEscrow (spec tests) @ovm-skip when deploying the system approveBridge when invoked by the owner when there is no approval  should fail" time="0.0330" classname=" should fail">
    </testcase>
  </testsuite>
  <testsuite name="when there is approval" timestamp="2022-02-04T17:39:26" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeEscrow.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the bridge invokes transferFrom()" timestamp="2022-02-04T17:39:26" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeEscrow.spec.js" time="0.1130" failures="0">
    <testcase name="Contract: SynthetixBridgeEscrow (spec tests) @ovm-skip when deploying the system approveBridge when invoked by the owner when there is approval when the bridge invokes transferFrom() increases the users&apos;s balance" time="0.0080" classname="increases the users&apos;s balance">
    </testcase>
  </testsuite>
  <testsuite name="Contract: SynthetixBridgeToOptimism (unit tests)" timestamp="2022-02-04T17:39:26" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeEscrow.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) ensure only known functions are mutative" time="0.0300" classname="ensure only known functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="when all the deps are mocked" timestamp="2022-02-04T17:39:26" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeEscrow.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the target is deployed" timestamp="2022-02-04T17:39:26" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeEscrow.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="approveBridge" timestamp="2022-02-04T17:39:26" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeEscrow.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="failure modes" timestamp="2022-02-04T17:39:26" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeEscrow.unit.js" time="0.7160" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed approveBridge failure modes reverts when not invoked by the owner" time="0.6040" classname="reverts when not invoked by the owner">
    </testcase>
  </testsuite>
  <testsuite name="when invoked by the owner" timestamp="2022-02-04T17:39:27" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeEscrow.unit.js" time="0.1280" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed approveBridge when invoked by the owner an BridgeApproval event is emitted" time="0.0000" classname="an BridgeApproval event is emitted">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed approveBridge when invoked by the owner approve is called via Synthetix" time="0.0000" classname="approve is called via Synthetix">
    </testcase>
  </testsuite>
  <testsuite name="Contract: SynthetixBridgeToBase (spec tests) @ovm-skip" timestamp="2022-02-04T17:39:27" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when deploying the system" timestamp="2022-02-04T17:39:27" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: SynthetixBridgeToBase (spec tests) @ovm-skip when deploying the system returns the expected cross domain message gas limit" time="0.0500" classname="returns the expected cross domain message gas limit">
    </testcase>
  </testsuite>
  <testsuite name="when a user does not have the required balance" timestamp="2022-02-04T17:39:32" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.spec.js" time="0.3120" failures="0">
    <testcase name="Contract: SynthetixBridgeToBase (spec tests) @ovm-skip when deploying the system when a user does not have the required balance withdraw() should fail" time="0.1090" classname="withdraw() should fail">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToBase (spec tests) @ovm-skip when deploying the system when a user does not have the required balance withdrawTo() should fail" time="0.1860" classname="withdrawTo() should fail">
    </testcase>
  </testsuite>
  <testsuite name="when a user has the required balance" timestamp="2022-02-04T17:39:32" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when requesting a withdrawal" timestamp="2022-02-04T17:39:32" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.spec.js" time="0.1270" failures="0">
    <testcase name="Contract: SynthetixBridgeToBase (spec tests) @ovm-skip when deploying the system when a user has the required balance when requesting a withdrawal reduces the user balance" time="0.0080" classname="reduces the user balance">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToBase (spec tests) @ovm-skip when deploying the system when a user has the required balance when requesting a withdrawal reduces the total supply" time="0.0060" classname="reduces the total supply">
    </testcase>
  </testsuite>
  <testsuite name="when requesting a withdrawal to a different address" timestamp="2022-02-04T17:39:32" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.spec.js" time="0.1370" failures="0">
    <testcase name="Contract: SynthetixBridgeToBase (spec tests) @ovm-skip when deploying the system when a user has the required balance when requesting a withdrawal to a different address reduces the user balance" time="0.0120" classname="reduces the user balance">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToBase (spec tests) @ovm-skip when deploying the system when a user has the required balance when requesting a withdrawal to a different address reduces the total supply" time="0.0060" classname="reduces the total supply">
    </testcase>
  </testsuite>
  <testsuite name="Contract: SynthetixBridgeToBase (unit tests)" timestamp="2022-02-04T17:39:33" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) ensure only known functions are mutative" time="0.0360" classname="ensure only known functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="when all the deps are (s)mocked" timestamp="2022-02-04T17:39:33" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the target is deployed" timestamp="2022-02-04T17:39:33" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed should set constructor params on deployment" time="0.0270" classname="should set constructor params on deployment">
    </testcase>
  </testsuite>
  <testsuite name="importVestingEntries" timestamp="2022-02-04T17:39:33" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="failure modes" timestamp="2022-02-04T17:39:33" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.unit.js" time="2.2860" failures="0">
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed importVestingEntries failure modes should only allow the relayer (aka messenger) to call importVestingEntries()" time="1.2260" classname="should only allow the relayer (aka messenger) to call importVestingEntries()">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed importVestingEntries failure modes should only allow the L1 bridge to invoke importVestingEntries() via the messenger" time="0.0450" classname="should only allow the L1 bridge to invoke importVestingEntries() via the messenger">
    </testcase>
  </testsuite>
  <testsuite name="when invoked by the messenger (aka relayer)" timestamp="2022-02-04T17:39:36" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.unit.js" time="0.9810" failures="0">
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed importVestingEntries when invoked by the messenger (aka relayer) importVestingEntries is called (via rewardEscrowV2)" time="0.0020" classname="importVestingEntries is called (via rewardEscrowV2)">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed importVestingEntries when invoked by the messenger (aka relayer) should emit a ImportedVestingEntries event" time="0.0000" classname="should emit a ImportedVestingEntries event">
    </testcase>
  </testsuite>
  <testsuite name="withdraw" timestamp="2022-02-04T17:39:37" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="failure modes" timestamp="2022-02-04T17:39:37" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.unit.js" time="0.9470" failures="0">
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed withdraw failure modes does not work when the user has less trasferable snx than the withdrawal amount" time="0.0580" classname="does not work when the user has less trasferable snx than the withdrawal amount">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed withdraw failure modes does not work when initiation has been suspended" time="0.0400" classname="does not work when initiation has been suspended">
    </testcase>
  </testsuite>
  <testsuite name="when invoked by a user" timestamp="2022-02-04T17:39:38" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.unit.js" time="1.2590" failures="0">
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed withdraw when invoked by a user then SNX is burned via mintableSyntetix.burnSecondary" time="0.0060" classname="then SNX is burned via mintableSyntetix.burnSecondary">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed withdraw when invoked by a user the message is relayed" time="0.0300" classname="the message is relayed">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed withdraw when invoked by a user and a WithdrawalInitiated event is emitted" time="0.0010" classname="and a WithdrawalInitiated event is emitted">
    </testcase>
  </testsuite>
  <testsuite name="withdrawTo" timestamp="2022-02-04T17:39:39" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="failure modes" timestamp="2022-02-04T17:39:39" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.unit.js" time="0.8180" failures="0">
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed withdrawTo failure modes does not work when the user has less trasferable snx than the withdrawal amount" time="0.0440" classname="does not work when the user has less trasferable snx than the withdrawal amount">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed withdrawTo failure modes does not work when initiation has been suspended" time="0.0580" classname="does not work when initiation has been suspended">
    </testcase>
  </testsuite>
  <testsuite name="when invoked by a user" timestamp="2022-02-04T17:39:40" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.unit.js" time="1.1960" failures="0">
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed withdrawTo when invoked by a user then SNX is burned via mintableSyntetix.burnSecondary to the specified address" time="0.0040" classname="then SNX is burned via mintableSyntetix.burnSecondary to the specified address">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed withdrawTo when invoked by a user the message is relayed" time="0.0300" classname="the message is relayed">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed withdrawTo when invoked by a user and a WithdrawalInitiated event is emitted" time="0.0000" classname="and a WithdrawalInitiated event is emitted">
    </testcase>
  </testsuite>
  <testsuite name="finalizeDeposit" timestamp="2022-02-04T17:39:41" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="failure modes" timestamp="2022-02-04T17:39:41" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.unit.js" time="1.4240" failures="0">
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed finalizeDeposit failure modes should only allow the relayer (aka messenger) to call finalizeDeposit()" time="0.6720" classname="should only allow the relayer (aka messenger) to call finalizeDeposit()">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed finalizeDeposit failure modes should only allow the L1 bridge to invoke finalizeDeposit() via the messenger" time="0.0350" classname="should only allow the L1 bridge to invoke finalizeDeposit() via the messenger">
    </testcase>
  </testsuite>
  <testsuite name="when invoked by the messenger (aka relayer)" timestamp="2022-02-04T17:39:42" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.unit.js" time="0.6610" failures="0">
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed finalizeDeposit when invoked by the messenger (aka relayer) should emit a DepositFinalized event" time="0.0010" classname="should emit a DepositFinalized event">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed finalizeDeposit when invoked by the messenger (aka relayer) then SNX is minted via MintableSynthetix.mintSecondary" time="0.0040" classname="then SNX is minted via MintableSynthetix.mintSecondary">
    </testcase>
  </testsuite>
  <testsuite name="finalizeRewardDeposit" timestamp="2022-02-04T17:39:43" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="failure modes" timestamp="2022-02-04T17:39:43" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.unit.js" time="1.3480" failures="0">
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed finalizeRewardDeposit failure modes should only allow the relayer (aka messenger) to call finalizeRewardDeposit()" time="0.6160" classname="should only allow the relayer (aka messenger) to call finalizeRewardDeposit()">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed finalizeRewardDeposit failure modes should only allow the L1 bridge to invoke finalizeRewardDeposit() via the messenger" time="0.0390" classname="should only allow the L1 bridge to invoke finalizeRewardDeposit() via the messenger">
    </testcase>
  </testsuite>
  <testsuite name="when invoked by the bridge on the other layer" timestamp="2022-02-04T17:39:44" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToBase.unit.js" time="0.6430" failures="0">
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed finalizeRewardDeposit when invoked by the bridge on the other layer should emit a RewardDepositFinalized event" time="0.0000" classname="should emit a RewardDepositFinalized event">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToBase (unit tests) when all the deps are (s)mocked when the target is deployed finalizeRewardDeposit when invoked by the bridge on the other layer then SNX is minted via MintbaleSynthetix.mintSecondary" time="0.0030" classname="then SNX is minted via MintbaleSynthetix.mintSecondary">
    </testcase>
  </testsuite>
  <testsuite name="Contract: SynthetixBridgeToOptimism (spec tests) @ovm-skip" timestamp="2022-02-04T17:39:45" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when deploying the system" timestamp="2022-02-04T17:39:45" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (spec tests) @ovm-skip when deploying the system returns the expected cross domain message gas limit" time="0.0480" classname="returns the expected cross domain message gas limit">
    </testcase>
  </testsuite>
  <testsuite name="migrateEscrow" timestamp="2022-02-04T17:39:49" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.spec.js" time="0.1180" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (spec tests) @ovm-skip when deploying the system migrateEscrow reverts when an entriesId subarray contains an empty array" time="0.1160" classname="reverts when an entriesId subarray contains an empty array">
    </testcase>
  </testsuite>
  <testsuite name="migrateEscrow" timestamp="2022-02-04T17:39:50" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.spec.js" time="0.4040" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (spec tests) @ovm-skip when deploying the system migrateEscrow reverts when an entriesId subarray contains an empty array" time="0.3700" classname="reverts when an entriesId subarray contains an empty array">
    </testcase>
  </testsuite>
  <testsuite name="deposit" timestamp="2022-02-04T17:39:50" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user has not provided allowance to the bridge contract" timestamp="2022-02-04T17:39:50" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.spec.js" time="0.2350" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (spec tests) @ovm-skip when deploying the system deposit when a user has not provided allowance to the bridge contract the deposit should fail" time="0.2220" classname="the deposit should fail">
    </testcase>
  </testsuite>
  <testsuite name="when a user has provided allowance to the bridge contract" timestamp="2022-02-04T17:39:50" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when performing a deposit" timestamp="2022-02-04T17:39:50" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.spec.js" time="0.4010" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (spec tests) @ovm-skip when deploying the system deposit when a user has provided allowance to the bridge contract when performing a deposit reduces the user balance" time="0.0420" classname="reduces the user balance">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (spec tests) @ovm-skip when deploying the system deposit when a user has provided allowance to the bridge contract when performing a deposit increases the escrow&apos;s balance" time="0.0110" classname="increases the escrow&apos;s balance">
    </testcase>
  </testsuite>
  <testsuite name="depositTo" timestamp="2022-02-04T17:39:51" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user has not provided allowance to the bridge contract" timestamp="2022-02-04T17:39:51" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.spec.js" time="0.0530" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (spec tests) @ovm-skip when deploying the system depositTo when a user has not provided allowance to the bridge contract the deposit should fail" time="0.0530" classname="the deposit should fail">
    </testcase>
  </testsuite>
  <testsuite name="when a user has provided allowance to the bridge contract" timestamp="2022-02-04T17:39:51" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when performing a deposit" timestamp="2022-02-04T17:39:51" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.spec.js" time="0.2290" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (spec tests) @ovm-skip when deploying the system depositTo when a user has provided allowance to the bridge contract when performing a deposit reduces the user balance" time="0.0110" classname="reduces the user balance">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (spec tests) @ovm-skip when deploying the system depositTo when a user has provided allowance to the bridge contract when performing a deposit increases the escrow&apos;s balance" time="0.0100" classname="increases the escrow&apos;s balance">
    </testcase>
  </testsuite>
  <testsuite name="depositReward" timestamp="2022-02-04T17:39:51" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a user has provided allowance to the bridge contract" timestamp="2022-02-04T17:39:51" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when performing a deposit" timestamp="2022-02-04T17:39:51" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.spec.js" time="0.0950" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (spec tests) @ovm-skip when deploying the system depositReward when a user has provided allowance to the bridge contract when performing a deposit reduces the user balance" time="0.0090" classname="reduces the user balance">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (spec tests) @ovm-skip when deploying the system depositReward when a user has provided allowance to the bridge contract when performing a deposit increases the escrow&apos;s balance" time="0.0080" classname="increases the escrow&apos;s balance">
    </testcase>
  </testsuite>
  <testsuite name="notifyReward" timestamp="2022-02-04T17:39:51" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="the owner has added SynthetixBridgeToOptimism to rewards distributins list" timestamp="2022-02-04T17:39:51" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="distributing the rewards" timestamp="2022-02-04T17:39:51" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.spec.js" time="0.1670" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (spec tests) @ovm-skip when deploying the system notifyReward the owner has added SynthetixBridgeToOptimism to rewards distributins list distributing the rewards the balance of the bridge remains intact" time="0.0120" classname="the balance of the bridge remains intact">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (spec tests) @ovm-skip when deploying the system notifyReward the owner has added SynthetixBridgeToOptimism to rewards distributins list distributing the rewards increases the escrow&apos;s balance" time="0.0060" classname="increases the escrow&apos;s balance">
    </testcase>
  </testsuite>
  <testsuite name="forwardTokensToEscrow" timestamp="2022-02-04T17:39:51" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when some SNX tokens are accidentally transferred to the bridge" timestamp="2022-02-04T17:39:51" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when anyone invokeds forwardTokensToEscrow" timestamp="2022-02-04T17:39:51" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.spec.js" time="0.0680" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (spec tests) @ovm-skip when deploying the system forwardTokensToEscrow when some SNX tokens are accidentally transferred to the bridge when anyone invokeds forwardTokensToEscrow then the tokens are sent from the bridge to the escrow" time="0.0140" classname="then the tokens are sent from the bridge to the escrow">
    </testcase>
  </testsuite>
  <testsuite name="Contract: SynthetixBridgeToOptimism (unit tests)" timestamp="2022-02-04T17:39:51" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) ensure only known functions are mutative" time="0.0280" classname="ensure only known functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="when all the deps are mocked" timestamp="2022-02-04T17:39:51" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the target is deployed" timestamp="2022-02-04T17:39:51" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed should set constructor params on deployment" time="0.0140" classname="should set constructor params on deployment">
    </testcase>
  </testsuite>
  <testsuite name="deposit" timestamp="2022-02-04T17:39:52" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="failure modes" timestamp="2022-02-04T17:39:52" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="0.9100" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed deposit failure modes does not work when initiation has been suspended" time="0.0470" classname="does not work when initiation has been suspended">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed deposit failure modes does not work when user has any debt" time="0.0420" classname="does not work when user has any debt">
    </testcase>
  </testsuite>
  <testsuite name="when invoked by a user directly" timestamp="2022-02-04T17:39:53" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="1.1200" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed deposit when invoked by a user directly only one event is emitted (DepositInitiated)" time="0.0000" classname="only one event is emitted (DepositInitiated)">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed deposit when invoked by a user directly only one message is sent" time="0.0310" classname="only one message is sent">
    </testcase>
  </testsuite>
  <testsuite name="depositTo" timestamp="2022-02-04T17:39:54" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="failure modes" timestamp="2022-02-04T17:39:54" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="0.8880" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed depositTo failure modes does not work when initiation has been suspended" time="0.0550" classname="does not work when initiation has been suspended">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed depositTo failure modes does not work when user has any debt" time="0.0390" classname="does not work when user has any debt">
    </testcase>
  </testsuite>
  <testsuite name="when invoked by a user" timestamp="2022-02-04T17:39:55" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="0.8650" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed depositTo when invoked by a user only one event is emitted (DepositInitiated)" time="0.0000" classname="only one event is emitted (DepositInitiated)">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed depositTo when invoked by a user only one message is sent" time="0.0310" classname="only one message is sent">
    </testcase>
  </testsuite>
  <testsuite name="migrateEscrow" timestamp="2022-02-04T17:39:56" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="failure modes" timestamp="2022-02-04T17:39:56" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="1.3730" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed migrateEscrow failure modes does not work when initiation has been suspended" time="0.0340" classname="does not work when initiation has been suspended">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed migrateEscrow failure modes does not work when user has any debt" time="0.0440" classname="does not work when user has any debt">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed migrateEscrow failure modes reverts when an entriesId subarray contains more than 26 entries" time="0.0810" classname="reverts when an entriesId subarray contains more than 26 entries">
    </testcase>
  </testsuite>
  <testsuite name="depositAndMigrateEscrow" timestamp="2022-02-04T17:39:57" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="failure modes" timestamp="2022-02-04T17:39:57" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="0.8730" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed depositAndMigrateEscrow failure modes does not work when initiation has been suspended" time="0.0540" classname="does not work when initiation has been suspended">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed depositAndMigrateEscrow failure modes does not work when user has any debt" time="0.0350" classname="does not work when user has any debt">
    </testcase>
  </testsuite>
  <testsuite name="when invoked by a user directly" timestamp="2022-02-04T17:39:58" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the user deposits and migrates" timestamp="2022-02-04T17:39:58" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="1.9070" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed depositAndMigrateEscrow when invoked by a user directly when the user deposits and migrates the L1 escrow is burned (via rewardEscrowV2.burnForMigration)" time="0.0020" classname="the L1 escrow is burned (via rewardEscrowV2.burnForMigration)">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed depositAndMigrateEscrow when invoked by a user directly when the user deposits and migrates three messages are relayed from L1 to L2: finalizeEscrowMigration &amp; finalizeDeposit" time="0.0870" classname="three messages are relayed from L1 to L2: finalizeEscrowMigration &amp; finalizeDeposit">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed depositAndMigrateEscrow when invoked by a user directly when the user deposits and migrates SNX is transferred from the user to the deposit contract" time="0.0140" classname="SNX is transferred from the user to the deposit contract">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed depositAndMigrateEscrow when invoked by a user directly when the user deposits and migrates and three events are emitted" time="0.0000" classname="and three events are emitted">
    </testcase>
  </testsuite>
  <testsuite name="when the user deposits but does not want to migrate any escrow entries)" timestamp="2022-02-04T17:40:00" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="0.8730" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed depositAndMigrateEscrow when invoked by a user directly when the user deposits but does not want to migrate any escrow entries) one message is relayed: finalizeDeposit" time="0.0300" classname="one message is relayed: finalizeDeposit">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed depositAndMigrateEscrow when invoked by a user directly when the user deposits but does not want to migrate any escrow entries) and one event is emitted (DepositInitiated)" time="0.0000" classname="and one event is emitted (DepositInitiated)">
    </testcase>
  </testsuite>
  <testsuite name="when the user migrates but deposits 0" timestamp="2022-02-04T17:40:01" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="1.3110" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed depositAndMigrateEscrow when invoked by a user directly when the user migrates but deposits 0 the L1 escrow is burned (via rewardEscrowV2.burnForMigration" time="0.0030" classname="the L1 escrow is burned (via rewardEscrowV2.burnForMigration">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed depositAndMigrateEscrow when invoked by a user directly when the user migrates but deposits 0 two messages are relayed: finalizeEscrowMigration" time="0.0520" classname="two messages are relayed: finalizeEscrowMigration">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed depositAndMigrateEscrow when invoked by a user directly when the user migrates but deposits 0 and two events are emitted (ExportedVestingEntries)" time="0.0000" classname="and two events are emitted (ExportedVestingEntries)">
    </testcase>
  </testsuite>
  <testsuite name="depositReward" timestamp="2022-02-04T17:40:02" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="failure modes" timestamp="2022-02-04T17:40:02" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="0.4100" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed depositReward failure modes does not work when initiation has been suspended" time="0.0390" classname="does not work when initiation has been suspended">
    </testcase>
  </testsuite>
  <testsuite name="when invoked by a user directly" timestamp="2022-02-04T17:40:02" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="1.2120" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed depositReward when invoked by a user directly then SNX is transferred from the account to the bridge escrow" time="0.0030" classname="then SNX is transferred from the account to the bridge escrow">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed depositReward when invoked by a user directly and the message is relayed" time="0.0290" classname="and the message is relayed">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed depositReward when invoked by a user directly and a RewardDepositInitiated event is emitted" time="0.0000" classname="and a RewardDepositInitiated event is emitted">
    </testcase>
  </testsuite>
  <testsuite name="notifyRewardAmount" timestamp="2022-02-04T17:40:04" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="failure modes" timestamp="2022-02-04T17:40:04" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="0.9480" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed notifyRewardAmount failure modes does not work when not invoked by the rewardDistribution address" time="0.6020" classname="does not work when not invoked by the rewardDistribution address">
    </testcase>
  </testsuite>
  <testsuite name="when invoked by the rewardsDistribution directly" timestamp="2022-02-04T17:40:05" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="1.1730" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed notifyRewardAmount when invoked by the rewardsDistribution directly then the message is relayed" time="0.0240" classname="then the message is relayed">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed notifyRewardAmount when invoked by the rewardsDistribution directly SNX is transferred from the bridge to the bridge escrow" time="0.0030" classname="SNX is transferred from the bridge to the bridge escrow">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed notifyRewardAmount when invoked by the rewardsDistribution directly and a RewardDepositInitiated event is emitted" time="0.0000" classname="and a RewardDepositInitiated event is emitted">
    </testcase>
  </testsuite>
  <testsuite name="finalizeWithdrawal" timestamp="2022-02-04T17:40:06" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="failure modes" timestamp="2022-02-04T17:40:06" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="1.3130" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed finalizeWithdrawal failure modes should only allow the relayer (aka messenger) to call finalizeWithdrawal()" time="0.6070" classname="should only allow the relayer (aka messenger) to call finalizeWithdrawal()">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed finalizeWithdrawal failure modes should only allow the L2 bridge to invoke finalizeWithdrawal() via the messenger" time="0.0220" classname="should only allow the L2 bridge to invoke finalizeWithdrawal() via the messenger">
    </testcase>
  </testsuite>
  <testsuite name="when invoked by the messenger (aka relayer)" timestamp="2022-02-04T17:40:07" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixBridgeToOptimism.unit.js" time="0.7350" failures="0">
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed finalizeWithdrawal when invoked by the messenger (aka relayer) should emit a WithdrawalFinalized event" time="0.0010" classname="should emit a WithdrawalFinalized event">
    </testcase>
    <testcase name="Contract: SynthetixBridgeToOptimism (unit tests) when all the deps are mocked when the target is deployed finalizeWithdrawal when invoked by the messenger (aka relayer) then SNX is minted via MintableSynthetix.finalizeWithdrawal" time="0.0050" classname="then SNX is minted via MintableSynthetix.finalizeWithdrawal">
    </testcase>
  </testsuite>
  <testsuite name="Contract: SynthetixEscrow" timestamp="2022-02-04T17:40:08" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixEscrow.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Constructor &amp; Settings " timestamp="2022-02-04T17:40:08" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixEscrow.js" time="0.0820" failures="0">
    <testcase name="Contract: SynthetixEscrow Constructor &amp; Settings  should set synthetix on contructor" time="0.0070" classname="should set synthetix on contructor">
    </testcase>
    <testcase name="Contract: SynthetixEscrow Constructor &amp; Settings  should set owner on contructor" time="0.0040" classname="should set owner on contructor">
    </testcase>
    <testcase name="Contract: SynthetixEscrow Constructor &amp; Settings  should allow owner to set synthetix" time="0.0280" classname="should allow owner to set synthetix">
    </testcase>
  </testsuite>
  <testsuite name="Only During Setup" timestamp="2022-02-04T17:40:08" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixEscrow.js" time="0.2510" failures="0">
    <testcase name="Contract: SynthetixEscrow Only During Setup should allow owner to purgeAccount" time="0.1070" classname="should allow owner to purgeAccount">
    </testcase>
    <testcase name="Contract: SynthetixEscrow Only During Setup should allow owner to call addVestingSchedule" time="0.1140" classname="should allow owner to call addVestingSchedule">
    </testcase>
  </testsuite>
  <testsuite name="Given there are no escrow entries" timestamp="2022-02-04T17:40:08" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixEscrow.js" time="0.0570" failures="0">
    <testcase name="Contract: SynthetixEscrow Given there are no escrow entries then numVestingEntries should return 0" time="0.0060" classname="then numVestingEntries should return 0">
    </testcase>
    <testcase name="Contract: SynthetixEscrow Given there are no escrow entries then getNextVestingEntry should return 0" time="0.0050" classname="then getNextVestingEntry should return 0">
    </testcase>
    <testcase name="Contract: SynthetixEscrow Given there are no escrow entries then calling vest should do nothing and not fail" time="0.0190" classname="then calling vest should do nothing and not fail">
    </testcase>
  </testsuite>
  <testsuite name="Functions" timestamp="2022-02-04T17:40:09" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixEscrow.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Vesting Schedule Writes" timestamp="2022-02-04T17:40:09" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixEscrow.js" time="0.1260" failures="0">
    <testcase name="Contract: SynthetixEscrow Functions Vesting Schedule Writes should not create a vesting entry with a zero amount" time="0.0530" classname="should not create a vesting entry with a zero amount">
    </testcase>
    <testcase name="Contract: SynthetixEscrow Functions Vesting Schedule Writes should not create a vesting entry if there is not enough SNX in the contracts balance" time="0.0540" classname="should not create a vesting entry if there is not enough SNX in the contracts balance">
    </testcase>
  </testsuite>
  <testsuite name="Vesting Schedule Reads " timestamp="2022-02-04T17:40:09" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixEscrow.js" time="0.8670" failures="0">
    <testcase name="Contract: SynthetixEscrow Functions Vesting Schedule Reads  should append a vesting entry and increase the contracts balance" time="0.0050" classname="should append a vesting entry and increase the contracts balance">
    </testcase>
    <testcase name="Contract: SynthetixEscrow Functions Vesting Schedule Reads  should get an accounts total Vested Account Balance" time="0.0060" classname="should get an accounts total Vested Account Balance">
    </testcase>
    <testcase name="Contract: SynthetixEscrow Functions Vesting Schedule Reads  should get an accounts number of vesting entries" time="0.0070" classname="should get an accounts number of vesting entries">
    </testcase>
    <testcase name="Contract: SynthetixEscrow Functions Vesting Schedule Reads  should get an accounts vesting schedule entry by index" time="0.0290" classname="should get an accounts vesting schedule entry by index">
    </testcase>
    <testcase name="Contract: SynthetixEscrow Functions Vesting Schedule Reads  should get an accounts vesting time for a vesting entry index" time="0.0250" classname="should get an accounts vesting time for a vesting entry index">
    </testcase>
    <testcase name="Contract: SynthetixEscrow Functions Vesting Schedule Reads  should get an accounts vesting quantity for a vesting entry index" time="0.0220" classname="should get an accounts vesting quantity for a vesting entry index">
    </testcase>
  </testsuite>
  <testsuite name="Partial Vesting" timestamp="2022-02-04T17:40:10" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixEscrow.js" time="0.7150" failures="0">
    <testcase name="Contract: SynthetixEscrow Functions Partial Vesting should get an accounts next vesting entry index" time="0.0090" classname="should get an accounts next vesting entry index">
    </testcase>
    <testcase name="Contract: SynthetixEscrow Functions Partial Vesting should get an accounts next vesting entry" time="0.0140" classname="should get an accounts next vesting entry">
    </testcase>
    <testcase name="Contract: SynthetixEscrow Functions Partial Vesting should get an accounts next vesting time" time="0.0090" classname="should get an accounts next vesting time">
    </testcase>
    <testcase name="Contract: SynthetixEscrow Functions Partial Vesting should get an accounts next vesting quantity" time="0.0120" classname="should get an accounts next vesting quantity">
    </testcase>
  </testsuite>
  <testsuite name="Vesting" timestamp="2022-02-04T17:40:10" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixEscrow.js" time="0.3710" failures="0">
    <testcase name="Contract: SynthetixEscrow Functions Vesting should vest and transfer snx from contract to the user" time="0.0760" classname="should vest and transfer snx from contract to the user">
    </testcase>
    <testcase name="Contract: SynthetixEscrow Functions Vesting should vest and emit a Vest event" time="0.0530" classname="should vest and emit a Vest event">
    </testcase>
  </testsuite>
  <testsuite name="Transfering" timestamp="2022-02-04T17:40:11" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixEscrow.js" time="0.0460" failures="0">
    <testcase name="Contract: SynthetixEscrow Functions Transfering should not allow transfer of synthetix in escrow" time="0.0330" classname="should not allow transfer of synthetix in escrow">
    </testcase>
  </testsuite>
  <testsuite name="Contract: SynthetixState" timestamp="2022-02-04T17:40:11" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixState.js" time="0.0000" failures="0">
    <testcase name="Contract: SynthetixState ensure only expected functions are mutative" time="0.0550" classname="ensure only expected functions are mutative">
    </testcase>
    <testcase name="Contract: SynthetixState should set constructor params on deployment" time="0.1090" classname="should set constructor params on deployment">
    </testcase>
  </testsuite>
  <testsuite name="setCurrentIssuanceData()" timestamp="2022-02-04T17:40:11" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixState.js" time="0.5890" failures="0">
    <testcase name="Contract: SynthetixState setCurrentIssuanceData() should allow the associated contract to setCurrentIssuanceData" time="0.0260" classname="should allow the associated contract to setCurrentIssuanceData">
    </testcase>
    <testcase name="Contract: SynthetixState setCurrentIssuanceData() should disallow another from setting the setCurrentIssuanceData" time="0.5340" classname="should disallow another from setting the setCurrentIssuanceData">
    </testcase>
  </testsuite>
  <testsuite name="clearIssuanceData()" timestamp="2022-02-04T17:40:12" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixState.js" time="0.6550" failures="0">
    <testcase name="Contract: SynthetixState clearIssuanceData() should allow the associated contract to clearIssuanceData" time="0.0380" classname="should allow the associated contract to clearIssuanceData">
    </testcase>
    <testcase name="Contract: SynthetixState clearIssuanceData() should disallow another address from calling clearIssuanceData" time="0.0320" classname="should disallow another address from calling clearIssuanceData">
    </testcase>
    <testcase name="Contract: SynthetixState clearIssuanceData() should disallow another from setting the setCurrentIssuanceData" time="0.5450" classname="should disallow another from setting the setCurrentIssuanceData">
    </testcase>
  </testsuite>
  <testsuite name="incrementTotalIssuerCount()" timestamp="2022-02-04T17:40:12" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixState.js" time="0.5870" failures="0">
    <testcase name="Contract: SynthetixState incrementTotalIssuerCount() should allow the associated contract to incrementTotalIssuerCount" time="0.0370" classname="should allow the associated contract to incrementTotalIssuerCount">
    </testcase>
    <testcase name="Contract: SynthetixState incrementTotalIssuerCount() should disallow another address from calling incrementTotalIssuerCount" time="0.5130" classname="should disallow another address from calling incrementTotalIssuerCount">
    </testcase>
  </testsuite>
  <testsuite name="decrementTotalIssuerCount()" timestamp="2022-02-04T17:40:13" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixState.js" time="0.5600" failures="0">
    <testcase name="Contract: SynthetixState decrementTotalIssuerCount() should allow the associated contract to decrementTotalIssuerCount" time="0.0520" classname="should allow the associated contract to decrementTotalIssuerCount">
    </testcase>
    <testcase name="Contract: SynthetixState decrementTotalIssuerCount() should disallow another address from calling decrementTotalIssuerCount" time="0.4820" classname="should disallow another address from calling decrementTotalIssuerCount">
    </testcase>
  </testsuite>
  <testsuite name="appendDebtLedgerValue()" timestamp="2022-02-04T17:40:13" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixState.js" time="0.5720" failures="0">
    <testcase name="Contract: SynthetixState appendDebtLedgerValue() should allow the associated contract to appendDebtLedgerValue" time="0.0420" classname="should allow the associated contract to appendDebtLedgerValue">
    </testcase>
    <testcase name="Contract: SynthetixState appendDebtLedgerValue() should disallow another address from calling appendDebtLedgerValue" time="0.5020" classname="should disallow another address from calling appendDebtLedgerValue">
    </testcase>
  </testsuite>
  <testsuite name="debtLedgerLength()" timestamp="2022-02-04T17:40:14" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixState.js" time="2.5290" failures="0">
    <testcase name="Contract: SynthetixState debtLedgerLength() should correctly report debtLedgerLength" time="2.5160" classname="should correctly report debtLedgerLength">
    </testcase>
  </testsuite>
  <testsuite name="lastDebtLedgerEntry()" timestamp="2022-02-04T17:40:16" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixState.js" time="0.0760" failures="0">
    <testcase name="Contract: SynthetixState lastDebtLedgerEntry() should correctly report lastDebtLedgerEntry" time="0.0580" classname="should correctly report lastDebtLedgerEntry">
    </testcase>
  </testsuite>
  <testsuite name="hasIssued()" timestamp="2022-02-04T17:40:17" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixState.js" time="0.0000" failures="0">
    <testcase name="Contract: SynthetixState hasIssued() is false by default" time="0.0100" classname="is false by default">
    </testcase>
  </testsuite>
  <testsuite name="when an account has issuance data" timestamp="2022-02-04T17:40:17" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthetixState.js" time="0.0550" failures="0">
    <testcase name="Contract: SynthetixState hasIssued() when an account has issuance data then hasIssued() is true" time="0.0050" classname="then hasIssued() is true">
    </testcase>
  </testsuite>
  <testsuite name="Contract: SynthRedeemer (unit tests)" timestamp="2022-02-04T17:40:17" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) ensure only known functions are mutative" time="0.0540" classname="ensure only known functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="when a contract is instantiated" timestamp="2022-02-04T17:40:17" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated by default there are no obvious redemptions" time="0.0130" classname="by default there are no obvious redemptions">
    </testcase>
  </testsuite>
  <testsuite name="deprecate()" timestamp="2022-02-04T17:40:17" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated deprecate() may only be called by the Issuer" time="0.8590" classname="may only be called by the Issuer">
    </testcase>
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated deprecate() reverts when the rate is 0" time="0.0320" classname="reverts when the rate is 0">
    </testcase>
  </testsuite>
  <testsuite name="when the synth has some supply" timestamp="2022-02-04T17:40:19" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when there is sufficient sUSD for the synth to be deprecated" timestamp="2022-02-04T17:40:19" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when successfully executed" timestamp="2022-02-04T17:40:19" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.5400" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated deprecate() when the synth has some supply when there is sufficient sUSD for the synth to be deprecated when successfully executed updates the redemption with the supplied rate" time="0.0090" classname="updates the redemption with the supplied rate">
    </testcase>
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated deprecate() when the synth has some supply when there is sufficient sUSD for the synth to be deprecated when successfully executed emits the correct event" time="0.0010" classname="emits the correct event">
    </testcase>
  </testsuite>
  <testsuite name="when the synth has some supply" timestamp="2022-02-04T17:40:19" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated deprecate() when the synth has some supply deprecation fails when insufficient sUSD supply" time="0.0390" classname="deprecation fails when insufficient sUSD supply">
    </testcase>
  </testsuite>
  <testsuite name="when there is sufficient sUSD for the synth to be deprecated" timestamp="2022-02-04T17:40:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.2690" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated deprecate() when the synth has some supply when there is sufficient sUSD for the synth to be deprecated then deprecation succeeds" time="0.0270" classname="then deprecation succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when a synth is deprecated" timestamp="2022-02-04T17:40:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.2570" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated deprecate() when a synth is deprecated then it cannot be deprecated again" time="0.0270" classname="then it cannot be deprecated again">
    </testcase>
  </testsuite>
  <testsuite name="totalSupply()" timestamp="2022-02-04T17:40:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated totalSupply() is 0 when no total supply of the underlying synth" time="0.0060" classname="is 0 when no total supply of the underlying synth">
    </testcase>
  </testsuite>
  <testsuite name="when a synth is deprecated" timestamp="2022-02-04T17:40:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.2300" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated totalSupply() when a synth is deprecated total supply is still 0 as no total supply of the underlying synth" time="0.0130" classname="total supply is still 0 as no total supply of the underlying synth">
    </testcase>
  </testsuite>
  <testsuite name="when the synth has some supply" timestamp="2022-02-04T17:40:21" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated totalSupply() when the synth has some supply then totalSupply returns 0 as there is no redemption rate" time="0.0120" classname="then totalSupply returns 0 as there is no redemption rate">
    </testcase>
  </testsuite>
  <testsuite name="when a synth is deprecated" timestamp="2022-02-04T17:40:21" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.2510" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated totalSupply() when the synth has some supply when a synth is deprecated total supply will be the synth supply multiplied by the redemption rate" time="0.0130" classname="total supply will be the synth supply multiplied by the redemption rate">
    </testcase>
  </testsuite>
  <testsuite name="balanceOf()" timestamp="2022-02-04T17:40:21" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated balanceOf() is 0 when no balance of the underlying synth" time="0.0080" classname="is 0 when no balance of the underlying synth">
    </testcase>
  </testsuite>
  <testsuite name="when a synth is deprecated" timestamp="2022-02-04T17:40:21" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.2300" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated balanceOf() when a synth is deprecated balance of is still 0 as no total supply of the underlying synth" time="0.0090" classname="balance of is still 0 as no total supply of the underlying synth">
    </testcase>
  </testsuite>
  <testsuite name="when the synth has some balance" timestamp="2022-02-04T17:40:22" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated balanceOf() when the synth has some balance then balance of still returns 0 as there is no redemption rate" time="0.0120" classname="then balance of still returns 0 as there is no redemption rate">
    </testcase>
  </testsuite>
  <testsuite name="when a synth is deprecated" timestamp="2022-02-04T17:40:22" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.2440" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated balanceOf() when the synth has some balance when a synth is deprecated balance of will be the synth supply multiplied by the redemption rate" time="0.0110" classname="balance of will be the synth supply multiplied by the redemption rate">
    </testcase>
  </testsuite>
  <testsuite name="redemption" timestamp="2022-02-04T17:40:22" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="redeem()" timestamp="2022-02-04T17:40:22" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated redemption redeem() reverts when synth not redeemable" time="0.0230" classname="reverts when synth not redeemable">
    </testcase>
  </testsuite>
  <testsuite name="when synth marked for redemption" timestamp="2022-02-04T17:40:22" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated redemption redeem() when synth marked for redemption redemption reverts when user has no balance" time="0.0340" classname="redemption reverts when user has no balance">
    </testcase>
  </testsuite>
  <testsuite name="when the user has a synth balance" timestamp="2022-02-04T17:40:23" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when redemption is called by the user" timestamp="2022-02-04T17:40:23" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.8470" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated redemption redeem() when synth marked for redemption when the user has a synth balance when redemption is called by the user then Issuer.burnForRedemption is called with the correct arguments" time="0.0020" classname="then Issuer.burnForRedemption is called with the correct arguments">
    </testcase>
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated redemption redeem() when synth marked for redemption when the user has a synth balance when redemption is called by the user transfers the correct amount of sUSD to the user" time="0.0020" classname="transfers the correct amount of sUSD to the user">
    </testcase>
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated redemption redeem() when synth marked for redemption when the user has a synth balance when redemption is called by the user emitting a SynthRedeemed event" time="0.0000" classname="emitting a SynthRedeemed event">
    </testcase>
  </testsuite>
  <testsuite name="redeemAll()" timestamp="2022-02-04T17:40:23" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated redemption redeemAll() reverts when neither synths are redeemable" time="0.0220" classname="reverts when neither synths are redeemable">
    </testcase>
  </testsuite>
  <testsuite name="when a synth marked for redemption" timestamp="2022-02-04T17:40:24" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the user has a synth balance for both synths" timestamp="2022-02-04T17:40:24" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when redeemAll is called by the user for both synths" timestamp="2022-02-04T17:40:24" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated redemption redeemAll() when a synth marked for redemption when the user has a synth balance for both synths when redeemAll is called by the user for both synths reverts when one synth not redeemable" time="0.0360" classname="reverts when one synth not redeemable">
    </testcase>
  </testsuite>
  <testsuite name="when the other synth is also deprecated" timestamp="2022-02-04T17:40:24" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when redemption is called by the user" timestamp="2022-02-04T17:40:24" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="For synth 0" timestamp="2022-02-04T17:40:24" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.6220" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated redemption redeemAll() when a synth marked for redemption when the user has a synth balance for both synths when redeemAll is called by the user for both synths when the other synth is also deprecated when redemption is called by the user For synth 0 then Issuer.burnForRedemption is called with the correct arguments" time="0.0030" classname="then Issuer.burnForRedemption is called with the correct arguments">
    </testcase>
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated redemption redeemAll() when a synth marked for redemption when the user has a synth balance for both synths when redeemAll is called by the user for both synths when the other synth is also deprecated when redemption is called by the user For synth 0 transfers the correct amount of sUSD to the user" time="0.0030" classname="transfers the correct amount of sUSD to the user">
    </testcase>
  </testsuite>
  <testsuite name="For synth 1" timestamp="2022-02-04T17:40:25" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.5370" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated redemption redeemAll() when a synth marked for redemption when the user has a synth balance for both synths when redeemAll is called by the user for both synths when the other synth is also deprecated when redemption is called by the user For synth 1 then Issuer.burnForRedemption is called with the correct arguments" time="0.0020" classname="then Issuer.burnForRedemption is called with the correct arguments">
    </testcase>
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated redemption redeemAll() when a synth marked for redemption when the user has a synth balance for both synths when redeemAll is called by the user for both synths when the other synth is also deprecated when redemption is called by the user For synth 1 transfers the correct amount of sUSD to the user" time="0.0020" classname="transfers the correct amount of sUSD to the user">
    </testcase>
  </testsuite>
  <testsuite name="redeemPartial()" timestamp="2022-02-04T17:40:25" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the user has a synth balance" timestamp="2022-02-04T17:40:25" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.2780" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated redemption redeemPartial() when the user has a synth balance reverts when synth not redeemable" time="0.0520" classname="reverts when synth not redeemable">
    </testcase>
  </testsuite>
  <testsuite name="when synth marked for redemption" timestamp="2022-02-04T17:40:25" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated redemption redeemPartial() when synth marked for redemption partial redemption reverts when user has no balance" time="0.0290" classname="partial redemption reverts when user has no balance">
    </testcase>
  </testsuite>
  <testsuite name="when the user has a synth balance" timestamp="2022-02-04T17:40:26" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when partial redemption is called by the user" timestamp="2022-02-04T17:40:26" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthRedeemer.unit.js" time="0.7900" failures="0">
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated redemption redeemPartial() when synth marked for redemption when the user has a synth balance when partial redemption is called by the user then Issuer.burnForRedemption is called with the correct arguments" time="0.0020" classname="then Issuer.burnForRedemption is called with the correct arguments">
    </testcase>
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated redemption redeemPartial() when synth marked for redemption when the user has a synth balance when partial redemption is called by the user transfers the correct amount of sUSD to the user" time="0.0020" classname="transfers the correct amount of sUSD to the user">
    </testcase>
    <testcase name="Contract: SynthRedeemer (unit tests) when a contract is instantiated redemption redeemPartial() when synth marked for redemption when the user has a synth balance when partial redemption is called by the user emitting a SynthRedeemed event" time="0.0000" classname="emitting a SynthRedeemed event">
    </testcase>
  </testsuite>
  <testsuite name="Contract: SynthUtil" timestamp="2022-02-04T17:40:26" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthUtil.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="given an instance" timestamp="2022-02-04T17:40:32" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthUtil.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="totalSynthsInKey" timestamp="2022-02-04T17:40:32" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthUtil.js" time="0.6110" failures="0">
    <testcase name="Contract: SynthUtil given an instance totalSynthsInKey should return the total balance of synths into the specified currency key" time="0.0540" classname="should return the total balance of synths into the specified currency key">
    </testcase>
  </testsuite>
  <testsuite name="synthsBalances" timestamp="2022-02-04T17:40:33" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthUtil.js" time="0.6250" failures="0">
    <testcase name="Contract: SynthUtil given an instance synthsBalances should return the balance and its value in sUSD for every synth in the wallet" time="0.0720" classname="should return the balance and its value in sUSD for every synth in the wallet">
    </testcase>
  </testsuite>
  <testsuite name="synthsRates" timestamp="2022-02-04T17:40:33" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthUtil.js" time="0.5710" failures="0">
    <testcase name="Contract: SynthUtil given an instance synthsRates should return the correct synth rates" time="0.0370" classname="should return the correct synth rates">
    </testcase>
  </testsuite>
  <testsuite name="synthsTotalSupplies" timestamp="2022-02-04T17:40:34" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SynthUtil.js" time="0.6060" failures="0">
    <testcase name="Contract: SynthUtil given an instance synthsTotalSupplies should return the correct synth total supplies" time="0.0790" classname="should return the correct synth total supplies">
    </testcase>
  </testsuite>
  <testsuite name="Contract: SystemSettings" timestamp="2022-02-04T17:40:34" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemSettings ensure only known functions are mutative" time="0.0530" classname="ensure only known functions are mutative">
    </testcase>
    <testcase name="Contract: SystemSettings ensure contract name method using the library return correct value" time="0.0120" classname="ensure contract name method using the library return correct value">
    </testcase>
  </testsuite>
  <testsuite name="setCrossDomainMessageGasLimit()" timestamp="2022-02-04T17:40:40" tests="8" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.8060" failures="0">
    <testcase name="Contract: SystemSettings setCrossDomainMessageGasLimit() only owner can invoke" time="0.5440" classname="only owner can invoke">
    </testcase>
    <testcase name="Contract: SystemSettings setCrossDomainMessageGasLimit() cannot exceed the maximum ovm gas limit" time="0.0180" classname="cannot exceed the maximum ovm gas limit">
    </testcase>
    <testcase name="Contract: SystemSettings setCrossDomainMessageGasLimit() cannot be set below the minimum ovm gas limit" time="0.0290" classname="cannot be set below the minimum ovm gas limit">
    </testcase>
    <testcase name="Contract: SystemSettings setCrossDomainMessageGasLimit() the owner a crossDomainMessageGasLimit of type 0 with emitted event" time="0.0440" classname="the owner a crossDomainMessageGasLimit of type 0 with emitted event">
    </testcase>
    <testcase name="Contract: SystemSettings setCrossDomainMessageGasLimit() the owner a crossDomainMessageGasLimit of type 1 with emitted event" time="0.0390" classname="the owner a crossDomainMessageGasLimit of type 1 with emitted event">
    </testcase>
    <testcase name="Contract: SystemSettings setCrossDomainMessageGasLimit() the owner a crossDomainMessageGasLimit of type 2 with emitted event" time="0.0410" classname="the owner a crossDomainMessageGasLimit of type 2 with emitted event">
    </testcase>
    <testcase name="Contract: SystemSettings setCrossDomainMessageGasLimit() the owner a crossDomainMessageGasLimit of type 3 with emitted event" time="0.0390" classname="the owner a crossDomainMessageGasLimit of type 3 with emitted event">
    </testcase>
    <testcase name="Contract: SystemSettings setCrossDomainMessageGasLimit() the owner a crossDomainMessageGasLimit of type 4 with emitted event" time="0.0360" classname="the owner a crossDomainMessageGasLimit of type 4 with emitted event">
    </testcase>
  </testsuite>
  <testsuite name="setTradingRewardsEnabled()" timestamp="2022-02-04T17:40:41" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="1.3690" failures="0">
    <testcase name="Contract: SystemSettings setTradingRewardsEnabled() only owner can invoke" time="0.5720" classname="only owner can invoke">
    </testcase>
    <testcase name="Contract: SystemSettings setTradingRewardsEnabled() the owner can invoke and replace with emitted event" time="0.0360" classname="the owner can invoke and replace with emitted event">
    </testcase>
  </testsuite>
  <testsuite name="setWaitingPeriodSecs()" timestamp="2022-02-04T17:40:42" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="2.2140" failures="0">
    <testcase name="Contract: SystemSettings setWaitingPeriodSecs() only owner can invoke" time="0.9810" classname="only owner can invoke">
    </testcase>
    <testcase name="Contract: SystemSettings setWaitingPeriodSecs() the owner can invoke and replace with emitted event" time="0.0810" classname="the owner can invoke and replace with emitted event">
    </testcase>
  </testsuite>
  <testsuite name="setPriceDeviationThresholdFactor()" timestamp="2022-02-04T17:40:44" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="1.0120" failures="0">
    <testcase name="Contract: SystemSettings setPriceDeviationThresholdFactor() only owner can invoke" time="0.9800" classname="only owner can invoke">
    </testcase>
    <testcase name="Contract: SystemSettings setPriceDeviationThresholdFactor() the owner can update with emitted event" time="0.0320" classname="the owner can update with emitted event">
    </testcase>
  </testsuite>
  <testsuite name="setIssuanceRatio()" timestamp="2022-02-04T17:40:45" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.9660" failures="0">
    <testcase name="Contract: SystemSettings setIssuanceRatio() should allow the owner to set the issuance ratio" time="0.0270" classname="should allow the owner to set the issuance ratio">
    </testcase>
    <testcase name="Contract: SystemSettings setIssuanceRatio() should allow the owner to set the issuance ratio to zero" time="0.0330" classname="should allow the owner to set the issuance ratio to zero">
    </testcase>
    <testcase name="Contract: SystemSettings setIssuanceRatio() should disallow a non-owner from setting the issuance ratio" time="0.8100" classname="should disallow a non-owner from setting the issuance ratio">
    </testcase>
    <testcase name="Contract: SystemSettings setIssuanceRatio() should disallow setting the issuance ratio above the MAX ratio" time="0.0810" classname="should disallow setting the issuance ratio above the MAX ratio">
    </testcase>
  </testsuite>
  <testsuite name="setFeePeriodDuration()" timestamp="2022-02-04T17:40:46" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemSettings setFeePeriodDuration() only owner can invoke" time="0.6060" classname="only owner can invoke">
    </testcase>
    <testcase name="Contract: SystemSettings setFeePeriodDuration() reverts when setting the fee period duration below minimum" time="0.0990" classname="reverts when setting the fee period duration below minimum">
    </testcase>
    <testcase name="Contract: SystemSettings setFeePeriodDuration() should disallow the owner from setting the fee period duration above maximum" time="0.0960" classname="should disallow the owner from setting the fee period duration above maximum">
    </testcase>
  </testsuite>
  <testsuite name="when updated by the owner" timestamp="2022-02-04T17:40:47" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.1200" failures="0">
    <testcase name="Contract: SystemSettings setFeePeriodDuration() when updated by the owner then the value is set" time="0.0310" classname="then the value is set">
    </testcase>
    <testcase name="Contract: SystemSettings setFeePeriodDuration() when updated by the owner and an event is emitted for that change" time="0.0000" classname="and an event is emitted for that change">
    </testcase>
  </testsuite>
  <testsuite name="setTargetThreshold()" timestamp="2022-02-04T17:40:47" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemSettings setTargetThreshold() only owner can invoke" time="0.5610" classname="only owner can invoke">
    </testcase>
    <testcase name="Contract: SystemSettings setTargetThreshold() reverts when owner sets the Target threshold above the max allowed value" time="0.0280" classname="reverts when owner sets the Target threshold above the max allowed value">
    </testcase>
  </testsuite>
  <testsuite name="when updated by the owner" timestamp="2022-02-04T17:40:48" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0680" failures="0">
    <testcase name="Contract: SystemSettings setTargetThreshold() when updated by the owner then the value is converted to a decimal representing the percentage" time="0.0080" classname="then the value is converted to a decimal representing the percentage">
    </testcase>
    <testcase name="Contract: SystemSettings setTargetThreshold() when updated by the owner and an event is emitted for that change" time="0.0000" classname="and an event is emitted for that change">
    </testcase>
  </testsuite>
  <testsuite name="setCollapseFeeRate" timestamp="2022-02-04T17:40:48" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="revert condtions" timestamp="2022-02-04T17:40:48" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0300" failures="0">
    <testcase name="Contract: SystemSettings setCollapseFeeRate revert condtions should fail if not called by the owner" time="0.0290" classname="should fail if not called by the owner">
    </testcase>
  </testsuite>
  <testsuite name="when it succeeds" timestamp="2022-02-04T17:40:48" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.1580" failures="0">
    <testcase name="Contract: SystemSettings setCollapseFeeRate when it succeeds should update the collapse service fee" time="0.0100" classname="should update the collapse service fee">
    </testcase>
    <testcase name="Contract: SystemSettings setCollapseFeeRate when it succeeds should allow the collapse fee rate to be 0" time="0.0560" classname="should allow the collapse fee rate to be 0">
    </testcase>
  </testsuite>
  <testsuite name="setInteractionDelay" timestamp="2022-02-04T17:40:48" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="revert condtions" timestamp="2022-02-04T17:40:48" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0710" failures="0">
    <testcase name="Contract: SystemSettings setInteractionDelay revert condtions should fail if not called by the owner" time="0.0260" classname="should fail if not called by the owner">
    </testcase>
    <testcase name="Contract: SystemSettings setInteractionDelay revert condtions should fail if the owner passes to big of a value" time="0.0420" classname="should fail if the owner passes to big of a value">
    </testcase>
  </testsuite>
  <testsuite name="when it succeeds" timestamp="2022-02-04T17:40:48" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0750" failures="0">
    <testcase name="Contract: SystemSettings setInteractionDelay when it succeeds should update the interaction delay" time="0.0230" classname="should update the interaction delay">
    </testcase>
  </testsuite>
  <testsuite name="setLiquidationDelay()" timestamp="2022-02-04T17:40:48" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.6890" failures="0">
    <testcase name="Contract: SystemSettings setLiquidationDelay() can only be invoked by owner" time="0.5320" classname="can only be invoked by owner">
    </testcase>
    <testcase name="Contract: SystemSettings setLiquidationDelay() when setLiquidationDelay is set to 0 then revert" time="0.0320" classname="when setLiquidationDelay is set to 0 then revert">
    </testcase>
    <testcase name="Contract: SystemSettings setLiquidationDelay() when setLiquidationDelay is set above 30 days then revert" time="0.0310" classname="when setLiquidationDelay is set above 30 days then revert">
    </testcase>
    <testcase name="Contract: SystemSettings setLiquidationDelay() owner can set liquidationDelay to 1 day" time="0.0400" classname="owner can set liquidationDelay to 1 day">
    </testcase>
    <testcase name="Contract: SystemSettings setLiquidationDelay() owner can set liquidationDelay to 30 days" time="0.0470" classname="owner can set liquidationDelay to 30 days">
    </testcase>
  </testsuite>
  <testsuite name="setLiquidationRatio()" timestamp="2022-02-04T17:40:49" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemSettings setLiquidationRatio() can only be invoked by owner" time="0.6780" classname="can only be invoked by owner">
    </testcase>
  </testsuite>
  <testsuite name="given liquidation penalty is 10%" timestamp="2022-02-04T17:40:58" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemSettings setLiquidationRatio() given liquidation penalty is 10% owner can change liquidationRatio to 300%" time="0.0440" classname="owner can change liquidationRatio to 300%">
    </testcase>
    <testcase name="Contract: SystemSettings setLiquidationRatio() given liquidation penalty is 10% owner can change liquidationRatio to 200%" time="0.0330" classname="owner can change liquidationRatio to 200%">
    </testcase>
    <testcase name="Contract: SystemSettings setLiquidationRatio() given liquidation penalty is 10% owner can change liquidationRatio up to 110%" time="0.0730" classname="owner can change liquidationRatio up to 110%">
    </testcase>
    <testcase name="Contract: SystemSettings setLiquidationRatio() given liquidation penalty is 10% reverts when changing liquidationCollateralRatio to 109%" time="0.0450" classname="reverts when changing liquidationCollateralRatio to 109%">
    </testcase>
    <testcase name="Contract: SystemSettings setLiquidationRatio() given liquidation penalty is 10% reverts when changing liquidationCollateralRatio to 100%" time="0.0560" classname="reverts when changing liquidationCollateralRatio to 100%">
    </testcase>
  </testsuite>
  <testsuite name="minimum liquidation ratio - given issuanceRatio is 800% at 0.125" timestamp="2022-02-04T17:40:58" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.5420" failures="0">
    <testcase name="Contract: SystemSettings setLiquidationRatio() given liquidation penalty is 10% minimum liquidation ratio - given issuanceRatio is 800% at 0.125 then MIN_LIQUIDATION_RATIO is equal double issuance ratio (400%)" time="0.0000" classname="then MIN_LIQUIDATION_RATIO is equal double issuance ratio (400%)">
    </testcase>
    <testcase name="Contract: SystemSettings setLiquidationRatio() given liquidation penalty is 10% minimum liquidation ratio - given issuanceRatio is 800% at 0.125 when setLiquidationRatio is set above MAX_LIQUIDATION_RATIO then revert" time="0.0470" classname="when setLiquidationRatio is set above MAX_LIQUIDATION_RATIO then revert">
    </testcase>
    <testcase name="Contract: SystemSettings setLiquidationRatio() given liquidation penalty is 10% minimum liquidation ratio - given issuanceRatio is 800% at 0.125 when owner sets liquidationCollateralRatio below the MIN_LIQUIDATION_RATIO, then should revert" time="0.0650" classname="when owner sets liquidationCollateralRatio below the MIN_LIQUIDATION_RATIO, then should revert">
    </testcase>
    <testcase name="Contract: SystemSettings setLiquidationRatio() given liquidation penalty is 10% minimum liquidation ratio - given issuanceRatio is 800% at 0.125 when owner sets liquidationCollateralRatio above the MIN_LIQUIDATION_RATIO, then it should be allowed" time="0.0460" classname="when owner sets liquidationCollateralRatio above the MIN_LIQUIDATION_RATIO, then it should be allowed">
    </testcase>
    <testcase name="Contract: SystemSettings setLiquidationRatio() given liquidation penalty is 10% minimum liquidation ratio - given issuanceRatio is 800% at 0.125 when owner sets liquidationCollateralRatio equal to MIN_LIQUIDATION_RATIO, then it should be allowed" time="0.0520" classname="when owner sets liquidationCollateralRatio equal to MIN_LIQUIDATION_RATIO, then it should be allowed">
    </testcase>
  </testsuite>
  <testsuite name="setLiquidationPenalty()" timestamp="2022-02-04T17:40:58" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.7950" failures="0">
    <testcase name="Contract: SystemSettings setLiquidationPenalty() can only be invoked by owner" time="0.6300" classname="can only be invoked by owner">
    </testcase>
    <testcase name="Contract: SystemSettings setLiquidationPenalty() when setLiquidationPenalty is set above MAX_LIQUIDATION_PENALTY then revert" time="0.0240" classname="when setLiquidationPenalty is set above MAX_LIQUIDATION_PENALTY then revert">
    </testcase>
    <testcase name="Contract: SystemSettings setLiquidationPenalty() owner can set liquidationPenalty to 25%" time="0.0400" classname="owner can set liquidationPenalty to 25%">
    </testcase>
    <testcase name="Contract: SystemSettings setLiquidationPenalty() owner can set liquidationPenalty to 1%" time="0.0470" classname="owner can set liquidationPenalty to 1%">
    </testcase>
    <testcase name="Contract: SystemSettings setLiquidationPenalty() owner can set liquidationPenalty to 0%" time="0.0450" classname="owner can set liquidationPenalty to 0%">
    </testcase>
  </testsuite>
  <testsuite name="liquidations constants" timestamp="2022-02-04T17:40:59" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0010" failures="0">
    <testcase name="Contract: SystemSettings liquidations constants MAX_LIQUIDATION_RATIO is 100%" time="0.0000" classname="MAX_LIQUIDATION_RATIO is 100%">
    </testcase>
    <testcase name="Contract: SystemSettings liquidations constants MAX_LIQUIDATION_PENALTY is 25%" time="0.0000" classname="MAX_LIQUIDATION_PENALTY is 25%">
    </testcase>
  </testsuite>
  <testsuite name="setRateStalePeriod()" timestamp="2022-02-04T17:40:59" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.7630" failures="0">
    <testcase name="Contract: SystemSettings setRateStalePeriod() should be able to change the rate stale period" time="0.0380" classname="should be able to change the rate stale period">
    </testcase>
    <testcase name="Contract: SystemSettings setRateStalePeriod() only owner is permitted to change the rate stale period" time="0.6850" classname="only owner is permitted to change the rate stale period">
    </testcase>
    <testcase name="Contract: SystemSettings setRateStalePeriod() should emit event on successful rate stale period change" time="0.0230" classname="should emit event on successful rate stale period change">
    </testcase>
  </testsuite>
  <testsuite name="setDebtSnapshotStaleTime()" timestamp="2022-02-04T17:41:00" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.5930" failures="0">
    <testcase name="Contract: SystemSettings setDebtSnapshotStaleTime() should be able to change the debt snapshot stale time" time="0.0510" classname="should be able to change the debt snapshot stale time">
    </testcase>
    <testcase name="Contract: SystemSettings setDebtSnapshotStaleTime() only owner is permitted to change the debt snapshot stale time" time="0.5210" classname="only owner is permitted to change the debt snapshot stale time">
    </testcase>
    <testcase name="Contract: SystemSettings setDebtSnapshotStaleTime() should emit event on successful rate stale period change" time="0.0210" classname="should emit event on successful rate stale period change">
    </testcase>
  </testsuite>
  <testsuite name="setExchangeFeeRateForSynths()" timestamp="2022-02-04T17:41:01" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Given synth exchange fee rates to set" timestamp="2022-02-04T17:41:01" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemSettings setExchangeFeeRateForSynths() Given synth exchange fee rates to set when a non owner calls then revert" time="0.5780" classname="when a non owner calls then revert">
    </testcase>
    <testcase name="Contract: SystemSettings setExchangeFeeRateForSynths() Given synth exchange fee rates to set when input array lengths dont match then revert " time="0.0320" classname="when input array lengths dont match then revert ">
    </testcase>
    <testcase name="Contract: SystemSettings setExchangeFeeRateForSynths() Given synth exchange fee rates to set when owner sets an exchange fee rate larger than MAX_EXCHANGE_FEE_RATE then revert" time="0.0380" classname="when owner sets an exchange fee rate larger than MAX_EXCHANGE_FEE_RATE then revert">
    </testcase>
  </testsuite>
  <testsuite name="Given new synth exchange fee rates to store" timestamp="2022-02-04T17:41:01" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.1830" failures="0">
    <testcase name="Contract: SystemSettings setExchangeFeeRateForSynths() Given synth exchange fee rates to set Given new synth exchange fee rates to store when 1 exchange rate then store it to be readable" time="0.0400" classname="when 1 exchange rate then store it to be readable">
    </testcase>
    <testcase name="Contract: SystemSettings setExchangeFeeRateForSynths() Given synth exchange fee rates to set Given new synth exchange fee rates to store when 1 exchange rate then emits update event" time="0.0200" classname="when 1 exchange rate then emits update event">
    </testcase>
    <testcase name="Contract: SystemSettings setExchangeFeeRateForSynths() Given synth exchange fee rates to set Given new synth exchange fee rates to store when multiple exchange rates then store them to be readable" time="0.0780" classname="when multiple exchange rates then store them to be readable">
    </testcase>
    <testcase name="Contract: SystemSettings setExchangeFeeRateForSynths() Given synth exchange fee rates to set Given new synth exchange fee rates to store when multiple exchange rates then each update event is emitted" time="0.0390" classname="when multiple exchange rates then each update event is emitted">
    </testcase>
  </testsuite>
  <testsuite name="setMinimumStakeTime()" timestamp="2022-02-04T17:41:01" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.7350" failures="0">
    <testcase name="Contract: SystemSettings setMinimumStakeTime() can only be invoked by owner" time="0.5840" classname="can only be invoked by owner">
    </testcase>
    <testcase name="Contract: SystemSettings setMinimumStakeTime() should revert if setMinimumStakeTime &gt; than 1 week" time="0.0250" classname="should revert if setMinimumStakeTime &gt; than 1 week">
    </testcase>
    <testcase name="Contract: SystemSettings setMinimumStakeTime() should allow setMinimumStakeTime less than equal 1 week" time="0.0900" classname="should allow setMinimumStakeTime less than equal 1 week">
    </testcase>
    <testcase name="Contract: SystemSettings setMinimumStakeTime() setting minimum stake time emits the correct event" time="0.0340" classname="setting minimum stake time emits the correct event">
    </testcase>
  </testsuite>
  <testsuite name="setAggregatorWarningFlags()" timestamp="2022-02-04T17:41:02" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemSettings setAggregatorWarningFlags() can only be invoked by owner" time="0.5090" classname="can only be invoked by owner">
    </testcase>
    <testcase name="Contract: SystemSettings setAggregatorWarningFlags() should revert if given the zero address" time="0.0460" classname="should revert if given the zero address">
    </testcase>
  </testsuite>
  <testsuite name="when successfully invoked" timestamp="2022-02-04T17:41:03" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0700" failures="0">
    <testcase name="Contract: SystemSettings setAggregatorWarningFlags() when successfully invoked then it changes the value as expected" time="0.0070" classname="then it changes the value as expected">
    </testcase>
    <testcase name="Contract: SystemSettings setAggregatorWarningFlags() when successfully invoked and emits an AggregatorWarningFlagsUpdated event" time="0.0010" classname="and emits an AggregatorWarningFlagsUpdated event">
    </testcase>
  </testsuite>
  <testsuite name="setEtherWrapperMaxETH()" timestamp="2022-02-04T17:41:03" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemSettings setEtherWrapperMaxETH() can only be invoked by owner" time="0.5100" classname="can only be invoked by owner">
    </testcase>
  </testsuite>
  <testsuite name="when successfully invoked" timestamp="2022-02-04T17:41:03" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0630" failures="0">
    <testcase name="Contract: SystemSettings setEtherWrapperMaxETH() when successfully invoked then it changes the value as expected" time="0.0110" classname="then it changes the value as expected">
    </testcase>
    <testcase name="Contract: SystemSettings setEtherWrapperMaxETH() when successfully invoked and emits an EtherWrapperMaxETHUpdated event" time="0.0010" classname="and emits an EtherWrapperMaxETHUpdated event">
    </testcase>
  </testsuite>
  <testsuite name="setEtherWrapperMintFeeRate()" timestamp="2022-02-04T17:41:03" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemSettings setEtherWrapperMintFeeRate() can only be invoked by owner" time="0.5410" classname="can only be invoked by owner">
    </testcase>
    <testcase name="Contract: SystemSettings setEtherWrapperMintFeeRate() should revert if the rate exceeds MAX_WRAPPER_MINT_FEE_RATE" time="0.0230" classname="should revert if the rate exceeds MAX_WRAPPER_MINT_FEE_RATE">
    </testcase>
  </testsuite>
  <testsuite name="when successfully invoked" timestamp="2022-02-04T17:41:04" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0720" failures="0">
    <testcase name="Contract: SystemSettings setEtherWrapperMintFeeRate() when successfully invoked then it changes the value as expected" time="0.0120" classname="then it changes the value as expected">
    </testcase>
    <testcase name="Contract: SystemSettings setEtherWrapperMintFeeRate() when successfully invoked and emits an EtherWrapperMintFeeRateUpdated event" time="0.0000" classname="and emits an EtherWrapperMintFeeRateUpdated event">
    </testcase>
  </testsuite>
  <testsuite name="setEtherWrapperBurnFeeRate()" timestamp="2022-02-04T17:41:04" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemSettings setEtherWrapperBurnFeeRate() can only be invoked by owner" time="0.4850" classname="can only be invoked by owner">
    </testcase>
    <testcase name="Contract: SystemSettings setEtherWrapperBurnFeeRate() should revert if the rate exceeds MAX_WRAPPER_BURN_FEE_RATE" time="0.0260" classname="should revert if the rate exceeds MAX_WRAPPER_BURN_FEE_RATE">
    </testcase>
  </testsuite>
  <testsuite name="when successfully invoked" timestamp="2022-02-04T17:41:05" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0570" failures="0">
    <testcase name="Contract: SystemSettings setEtherWrapperBurnFeeRate() when successfully invoked then it changes the value as expected" time="0.0120" classname="then it changes the value as expected">
    </testcase>
    <testcase name="Contract: SystemSettings setEtherWrapperBurnFeeRate() when successfully invoked and emits an EtherWrapperBurnFeeRateUpdated event" time="0.0000" classname="and emits an EtherWrapperBurnFeeRateUpdated event">
    </testcase>
  </testsuite>
  <testsuite name="setAtomicMaxVolumePerBlock" timestamp="2022-02-04T17:41:05" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemSettings setAtomicMaxVolumePerBlock can only be invoked by owner" time="0.5190" classname="can only be invoked by owner">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicMaxVolumePerBlock should revert if limit exceeds uint192" time="0.0320" classname="should revert if limit exceeds uint192">
    </testcase>
  </testsuite>
  <testsuite name="when successfully invoked" timestamp="2022-02-04T17:41:05" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.1520" failures="0">
    <testcase name="Contract: SystemSettings setAtomicMaxVolumePerBlock when successfully invoked then it changes the value as expected" time="0.0130" classname="then it changes the value as expected">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicMaxVolumePerBlock when successfully invoked and emits an AtomicMaxVolumePerBlockUpdated event" time="0.0000" classname="and emits an AtomicMaxVolumePerBlockUpdated event">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicMaxVolumePerBlock when successfully invoked allows to be changed" time="0.0210" classname="allows to be changed">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicMaxVolumePerBlock when successfully invoked allows to be reset to zero" time="0.0300" classname="allows to be reset to zero">
    </testcase>
  </testsuite>
  <testsuite name="setAtomicTwapWindow" timestamp="2022-02-04T17:41:05" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemSettings setAtomicTwapWindow can only be invoked by owner" time="0.5010" classname="can only be invoked by owner">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicTwapWindow should revert if window is below minimum" time="0.0210" classname="should revert if window is below minimum">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicTwapWindow should revert if window is above maximum" time="0.0350" classname="should revert if window is above maximum">
    </testcase>
  </testsuite>
  <testsuite name="when successfully invoked" timestamp="2022-02-04T17:41:06" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.1180" failures="0">
    <testcase name="Contract: SystemSettings setAtomicTwapWindow when successfully invoked then it changes the value as expected" time="0.0170" classname="then it changes the value as expected">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicTwapWindow when successfully invoked and emits an AtomicTwapWindowUpdated event" time="0.0000" classname="and emits an AtomicTwapWindowUpdated event">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicTwapWindow when successfully invoked allows to be changed" time="0.0360" classname="allows to be changed">
    </testcase>
  </testsuite>
  <testsuite name="setAtomicEquivalentForDexPricing" timestamp="2022-02-04T17:41:06" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemSettings setAtomicEquivalentForDexPricing can only be invoked by owner" time="0.4730" classname="can only be invoked by owner">
    </testcase>
  </testsuite>
  <testsuite name="when successfully invoked" timestamp="2022-02-04T17:41:06" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.1910" failures="0">
    <testcase name="Contract: SystemSettings setAtomicEquivalentForDexPricing when successfully invoked then it changes the value as expected" time="0.0060" classname="then it changes the value as expected">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicEquivalentForDexPricing when successfully invoked and emits an AtomicEquivalentForDexPricingUpdated event" time="0.0000" classname="and emits an AtomicEquivalentForDexPricingUpdated event">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicEquivalentForDexPricing when successfully invoked allows equivalent to be changed" time="0.0280" classname="allows equivalent to be changed">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicEquivalentForDexPricing when successfully invoked cannot be set to 0 address" time="0.0210" classname="cannot be set to 0 address">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicEquivalentForDexPricing when successfully invoked allows to be reset" time="0.0270" classname="allows to be reset">
    </testcase>
  </testsuite>
  <testsuite name="setAtomicExchangeFeeRate" timestamp="2022-02-04T17:41:07" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemSettings setAtomicExchangeFeeRate can only be invoked by owner" time="0.5170" classname="can only be invoked by owner">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicExchangeFeeRate should revert if fee is above maximum" time="0.0250" classname="should revert if fee is above maximum">
    </testcase>
  </testsuite>
  <testsuite name="when successfully invoked" timestamp="2022-02-04T17:41:07" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.1510" failures="0">
    <testcase name="Contract: SystemSettings setAtomicExchangeFeeRate when successfully invoked then it changes the value as expected" time="0.0090" classname="then it changes the value as expected">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicExchangeFeeRate when successfully invoked and emits an AtomicExchangeFeeUpdated event" time="0.0000" classname="and emits an AtomicExchangeFeeUpdated event">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicExchangeFeeRate when successfully invoked allows fee to be changed" time="0.0360" classname="allows fee to be changed">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicExchangeFeeRate when successfully invoked allows to be reset" time="0.0250" classname="allows to be reset">
    </testcase>
  </testsuite>
  <testsuite name="setAtomicPriceBuffer" timestamp="2022-02-04T17:41:07" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemSettings setAtomicPriceBuffer can only be invoked by owner" time="0.4990" classname="can only be invoked by owner">
    </testcase>
  </testsuite>
  <testsuite name="when successfully invoked" timestamp="2022-02-04T17:41:08" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.1640" failures="0">
    <testcase name="Contract: SystemSettings setAtomicPriceBuffer when successfully invoked then it changes the value as expected" time="0.0110" classname="then it changes the value as expected">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicPriceBuffer when successfully invoked and emits an AtomicPriceBufferUpdated event" time="0.0000" classname="and emits an AtomicPriceBufferUpdated event">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicPriceBuffer when successfully invoked allows to be changed" time="0.0280" classname="allows to be changed">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicPriceBuffer when successfully invoked allows to be reset to zero" time="0.0300" classname="allows to be reset to zero">
    </testcase>
  </testsuite>
  <testsuite name="setAtomicVolatilityConsiderationWindow" timestamp="2022-02-04T17:41:08" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemSettings setAtomicVolatilityConsiderationWindow can only be invoked by owner" time="0.4740" classname="can only be invoked by owner">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicVolatilityConsiderationWindow should revert if window is below minimum" time="0.0240" classname="should revert if window is below minimum">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicVolatilityConsiderationWindow should revert if window is above maximum" time="0.0220" classname="should revert if window is above maximum">
    </testcase>
  </testsuite>
  <testsuite name="when successfully invoked" timestamp="2022-02-04T17:41:09" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.1730" failures="0">
    <testcase name="Contract: SystemSettings setAtomicVolatilityConsiderationWindow when successfully invoked then it changes the value as expected" time="0.0070" classname="then it changes the value as expected">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicVolatilityConsiderationWindow when successfully invoked and emits a AtomicVolatilityConsiderationWindowUpdated event" time="0.0000" classname="and emits a AtomicVolatilityConsiderationWindowUpdated event">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicVolatilityConsiderationWindow when successfully invoked allows to be changed" time="0.0310" classname="allows to be changed">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicVolatilityConsiderationWindow when successfully invoked allows to be reset to zero" time="0.0390" classname="allows to be reset to zero">
    </testcase>
  </testsuite>
  <testsuite name="setAtomicVolatilityUpdateThreshold" timestamp="2022-02-04T17:41:09" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemSettings setAtomicVolatilityUpdateThreshold can only be invoked by owner" time="0.5130" classname="can only be invoked by owner">
    </testcase>
  </testsuite>
  <testsuite name="when successfully invoked" timestamp="2022-02-04T17:41:09" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.1530" failures="0">
    <testcase name="Contract: SystemSettings setAtomicVolatilityUpdateThreshold when successfully invoked then it changes the value as expected" time="0.0070" classname="then it changes the value as expected">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicVolatilityUpdateThreshold when successfully invoked and emits an AtomicVolatilityUpdateThresholdUpdated event" time="0.0010" classname="and emits an AtomicVolatilityUpdateThresholdUpdated event">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicVolatilityUpdateThreshold when successfully invoked allows to be changed" time="0.0270" classname="allows to be changed">
    </testcase>
    <testcase name="Contract: SystemSettings setAtomicVolatilityUpdateThreshold when successfully invoked allows to be reset to zero" time="0.0290" classname="allows to be reset to zero">
    </testcase>
  </testsuite>
  <testsuite name="setWrapperMaxTokenAmount()" timestamp="2022-02-04T17:41:09" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemSettings setWrapperMaxTokenAmount() can only be invoked by owner" time="0.5080" classname="can only be invoked by owner">
    </testcase>
  </testsuite>
  <testsuite name="when successfully invoked" timestamp="2022-02-04T17:41:10" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0980" failures="0">
    <testcase name="Contract: SystemSettings setWrapperMaxTokenAmount() when successfully invoked then it changes the value as expected" time="0.0090" classname="then it changes the value as expected">
    </testcase>
    <testcase name="Contract: SystemSettings setWrapperMaxTokenAmount() when successfully invoked does not change value for different address" time="0.0100" classname="does not change value for different address">
    </testcase>
    <testcase name="Contract: SystemSettings setWrapperMaxTokenAmount() when successfully invoked and emits a WrapperMaxTokenAmountUpdated event" time="0.0000" classname="and emits a WrapperMaxTokenAmountUpdated event">
    </testcase>
  </testsuite>
  <testsuite name="setWrapperMintFeeRate()" timestamp="2022-02-04T17:41:10" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemSettings setWrapperMintFeeRate() can only be invoked by owner" time="0.4780" classname="can only be invoked by owner">
    </testcase>
    <testcase name="Contract: SystemSettings setWrapperMintFeeRate() should revert if the rate exceeds MAX_WRAPPER_MINT_FEE_RATE" time="0.0350" classname="should revert if the rate exceeds MAX_WRAPPER_MINT_FEE_RATE">
    </testcase>
    <testcase name="Contract: SystemSettings setWrapperMintFeeRate() should revert if the fee is negative and burn fee is not at least positive and greater in magnitude" time="0.0350" classname="should revert if the fee is negative and burn fee is not at least positive and greater in magnitude">
    </testcase>
  </testsuite>
  <testsuite name="when successfully invoked" timestamp="2022-02-04T17:41:11" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.1730" failures="0">
    <testcase name="Contract: SystemSettings setWrapperMintFeeRate() when successfully invoked then it changes the value as expected" time="0.0160" classname="then it changes the value as expected">
    </testcase>
    <testcase name="Contract: SystemSettings setWrapperMintFeeRate() when successfully invoked does not change value for different address" time="0.0070" classname="does not change value for different address">
    </testcase>
    <testcase name="Contract: SystemSettings setWrapperMintFeeRate() when successfully invoked and emits an WrapperMintFeeRateUpdated event" time="0.0010" classname="and emits an WrapperMintFeeRateUpdated event">
    </testcase>
  </testsuite>
  <testsuite name="setWrapperBurnFeeRate()" timestamp="2022-02-04T17:41:11" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemSettings setWrapperBurnFeeRate() can only be invoked by owner" time="0.5030" classname="can only be invoked by owner">
    </testcase>
    <testcase name="Contract: SystemSettings setWrapperBurnFeeRate() should revert if the rate exceeds MAX_WRAPPER_BURN_FEE_RATE" time="0.0270" classname="should revert if the rate exceeds MAX_WRAPPER_BURN_FEE_RATE">
    </testcase>
    <testcase name="Contract: SystemSettings setWrapperBurnFeeRate() should revert if the fee is negative and burn fee is not at least positive and greater in magnitude" time="0.0370" classname="should revert if the fee is negative and burn fee is not at least positive and greater in magnitude">
    </testcase>
  </testsuite>
  <testsuite name="when successfully invoked" timestamp="2022-02-04T17:41:11" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.1620" failures="0">
    <testcase name="Contract: SystemSettings setWrapperBurnFeeRate() when successfully invoked then it changes the value as expected" time="0.0070" classname="then it changes the value as expected">
    </testcase>
    <testcase name="Contract: SystemSettings setWrapperBurnFeeRate() when successfully invoked does not change value for different address" time="0.0060" classname="does not change value for different address">
    </testcase>
    <testcase name="Contract: SystemSettings setWrapperBurnFeeRate() when successfully invoked and emits an EtherWrapperBurnFeeRateUpdated event" time="0.0000" classname="and emits an EtherWrapperBurnFeeRateUpdated event">
    </testcase>
  </testsuite>
  <testsuite name="setExchangeDynamicFeeThreshold()" timestamp="2022-02-04T17:41:11" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.5420" failures="0">
    <testcase name="Contract: SystemSettings setExchangeDynamicFeeThreshold() only owner can invoke" time="0.5090" classname="only owner can invoke">
    </testcase>
    <testcase name="Contract: SystemSettings setExchangeDynamicFeeThreshold() the owner can invoke and replace with emitted event" time="0.0300" classname="the owner can invoke and replace with emitted event">
    </testcase>
  </testsuite>
  <testsuite name="setExchangeDynamicFeeWeightDecay()" timestamp="2022-02-04T17:41:12" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.4770" failures="0">
    <testcase name="Contract: SystemSettings setExchangeDynamicFeeWeightDecay() only owner can invoke" time="0.4400" classname="only owner can invoke">
    </testcase>
    <testcase name="Contract: SystemSettings setExchangeDynamicFeeWeightDecay() the owner can invoke and replace with emitted event" time="0.0350" classname="the owner can invoke and replace with emitted event">
    </testcase>
  </testsuite>
  <testsuite name="setExchangeDynamicFeeRounds()" timestamp="2022-02-04T17:41:12" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.5280" failures="0">
    <testcase name="Contract: SystemSettings setExchangeDynamicFeeRounds() only owner can invoke" time="0.4950" classname="only owner can invoke">
    </testcase>
    <testcase name="Contract: SystemSettings setExchangeDynamicFeeRounds() the owner can invoke and replace with emitted event" time="0.0300" classname="the owner can invoke and replace with emitted event">
    </testcase>
  </testsuite>
  <testsuite name="setExchangeMaxDynamicFee()" timestamp="2022-02-04T17:41:13" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemSettings.js" time="0.5750" failures="0">
    <testcase name="Contract: SystemSettings setExchangeMaxDynamicFee() only owner can invoke" time="0.5050" classname="only owner can invoke">
    </testcase>
    <testcase name="Contract: SystemSettings setExchangeMaxDynamicFee() the owner can invoke and replace with emitted event" time="0.0310" classname="the owner can invoke and replace with emitted event">
    </testcase>
    <testcase name="Contract: SystemSettings setExchangeMaxDynamicFee() when owner sets a value higher than MAX_EXCHANGE_FEE_RATE then revert" time="0.0380" classname="when owner sets a value higher than MAX_EXCHANGE_FEE_RATE then revert">
    </testcase>
  </testsuite>
  <testsuite name="Contract: SystemStatus" timestamp="2022-02-04T17:41:14" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus ensure only known functions are mutative" time="0.0290" classname="ensure only known functions are mutative">
    </testcase>
    <testcase name="Contract: SystemStatus not even the owner can suspend" time="0.2010" classname="not even the owner can suspend">
    </testcase>
  </testsuite>
  <testsuite name="when the owner is given access to suspend and resume everything" timestamp="2022-02-04T17:41:14" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="suspendSystem()" timestamp="2022-02-04T17:41:14" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSystem() is not suspended initially" time="0.0090" classname="is not suspended initially">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSystem() and all the require checks succeed" time="0.0280" classname="and all the require checks succeed">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSystem() can only be invoked by the owner initially" time="0.7750" classname="can only be invoked by the owner initially">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSystem() by default isSystemUpgrading() is false" time="0.0050" classname="by default isSystemUpgrading() is false">
    </testcase>
  </testsuite>
  <testsuite name="when the owner suspends" timestamp="2022-02-04T17:41:15" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.4770" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSystem() when the owner suspends it succeeds" time="0.0060" classname="it succeeds">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSystem() when the owner suspends and isSystemUpgrading() is false" time="0.0080" classname="and isSystemUpgrading() is false">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSystem() when the owner suspends and emits the expected event" time="0.0000" classname="and emits the expected event">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSystem() when the owner suspends and the require checks all revert as expected" time="0.0320" classname="and the require checks all revert as expected">
    </testcase>
  </testsuite>
  <testsuite name="when the owner adds an address to suspend only" timestamp="2022-02-04T17:41:16" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSystem() when the owner adds an address to suspend only other addresses still cannot suspend" time="0.0920" classname="other addresses still cannot suspend">
    </testcase>
  </testsuite>
  <testsuite name="and that address invokes suspend with upgrading" timestamp="2022-02-04T17:41:16" tests="7" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="1.4070" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSystem() when the owner adds an address to suspend only and that address invokes suspend with upgrading it succeeds" time="0.0090" classname="it succeeds">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSystem() when the owner adds an address to suspend only and that address invokes suspend with upgrading and emits the expected event" time="0.0000" classname="and emits the expected event">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSystem() when the owner adds an address to suspend only and that address invokes suspend with upgrading and isSystemUpgrading() is true" time="0.0070" classname="and isSystemUpgrading() is true">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSystem() when the owner adds an address to suspend only and that address invokes suspend with upgrading and the require checks all revert with system upgrading, as expected" time="0.0340" classname="and the require checks all revert with system upgrading, as expected">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSystem() when the owner adds an address to suspend only and that address invokes suspend with upgrading yet that address cannot resume" time="0.0400" classname="yet that address cannot resume">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSystem() when the owner adds an address to suspend only and that address invokes suspend with upgrading nor can it do any other restricted action" time="0.2600" classname="nor can it do any other restricted action">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSystem() when the owner adds an address to suspend only and that address invokes suspend with upgrading yet the owner can still resume" time="0.0300" classname="yet the owner can still resume">
    </testcase>
  </testsuite>
  <testsuite name="resumeSystem()" timestamp="2022-02-04T17:41:17" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSystem() can only be invoked by the owner initially" time="0.7890" classname="can only be invoked by the owner initially">
    </testcase>
  </testsuite>
  <testsuite name="when the owner suspends within the upgrading flag" timestamp="2022-02-04T17:41:18" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the owner adds an address to resume only" timestamp="2022-02-04T17:41:18" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSystem() when the owner suspends within the upgrading flag when the owner adds an address to resume only other addresses still cannot resume" time="0.0500" classname="other addresses still cannot resume">
    </testcase>
  </testsuite>
  <testsuite name="and that address invokes resume" timestamp="2022-02-04T17:41:18" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.8470" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSystem() when the owner suspends within the upgrading flag when the owner adds an address to resume only and that address invokes resume it succeeds" time="0.0050" classname="it succeeds">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSystem() when the owner suspends within the upgrading flag when the owner adds an address to resume only and that address invokes resume and emits the expected event with the upgrading flag" time="0.0000" classname="and emits the expected event with the upgrading flag">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSystem() when the owner suspends within the upgrading flag when the owner adds an address to resume only and that address invokes resume and all the require checks succeed" time="0.0230" classname="and all the require checks succeed">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSystem() when the owner suspends within the upgrading flag when the owner adds an address to resume only and that address invokes resume yet that address cannot suspend" time="0.0260" classname="yet that address cannot suspend">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSystem() when the owner suspends within the upgrading flag when the owner adds an address to resume only and that address invokes resume nor can it do any other restricted action" time="0.1590" classname="nor can it do any other restricted action">
    </testcase>
  </testsuite>
  <testsuite name="suspendIssuance()" timestamp="2022-02-04T17:41:19" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendIssuance() is not suspended initially" time="0.0050" classname="is not suspended initially">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendIssuance() can only be invoked by the owner initially" time="0.5700" classname="can only be invoked by the owner initially">
    </testcase>
  </testsuite>
  <testsuite name="when the owner suspends" timestamp="2022-02-04T17:41:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0990" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendIssuance() when the owner suspends it succeeds" time="0.0090" classname="it succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when the owner adds an address to suspend only" timestamp="2022-02-04T17:41:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendIssuance() when the owner adds an address to suspend only other addresses still cannot suspend" time="0.0820" classname="other addresses still cannot suspend">
    </testcase>
  </testsuite>
  <testsuite name="and that address invokes suspend" timestamp="2022-02-04T17:41:20" tests="7" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="2.9940" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendIssuance() when the owner adds an address to suspend only and that address invokes suspend it succeeds" time="0.0090" classname="it succeeds">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendIssuance() when the owner adds an address to suspend only and that address invokes suspend and emits the expected event" time="0.0000" classname="and emits the expected event">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendIssuance() when the owner adds an address to suspend only and that address invokes suspend and the issuance require check reverts as expected" time="0.0090" classname="and the issuance require check reverts as expected">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendIssuance() when the owner adds an address to suspend only and that address invokes suspend but not the others" time="0.0100" classname="but not the others">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendIssuance() when the owner adds an address to suspend only and that address invokes suspend yet that address cannot resume" time="0.0190" classname="yet that address cannot resume">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendIssuance() when the owner adds an address to suspend only and that address invokes suspend nor can it do any other restricted action" time="0.1200" classname="nor can it do any other restricted action">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendIssuance() when the owner adds an address to suspend only and that address invokes suspend yet the owner can still resume" time="0.0170" classname="yet the owner can still resume">
    </testcase>
  </testsuite>
  <testsuite name="resumeIssuance()" timestamp="2022-02-04T17:41:23" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeIssuance() can only be invoked by the owner initially" time="0.5050" classname="can only be invoked by the owner initially">
    </testcase>
  </testsuite>
  <testsuite name="when the owner suspends" timestamp="2022-02-04T17:41:24" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the owner adds an address to resume only" timestamp="2022-02-04T17:41:24" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeIssuance() when the owner suspends when the owner adds an address to resume only other addresses still cannot resume" time="0.0430" classname="other addresses still cannot resume">
    </testcase>
  </testsuite>
  <testsuite name="and that address invokes resume" timestamp="2022-02-04T17:41:24" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.7290" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeIssuance() when the owner suspends when the owner adds an address to resume only and that address invokes resume it succeeds" time="0.0050" classname="it succeeds">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeIssuance() when the owner suspends when the owner adds an address to resume only and that address invokes resume and emits the expected event" time="0.0000" classname="and emits the expected event">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeIssuance() when the owner suspends when the owner adds an address to resume only and that address invokes resume and all the require checks succeed" time="0.0170" classname="and all the require checks succeed">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeIssuance() when the owner suspends when the owner adds an address to resume only and that address invokes resume yet that address cannot suspend" time="0.0220" classname="yet that address cannot suspend">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeIssuance() when the owner suspends when the owner adds an address to resume only and that address invokes resume nor can it do any other restricted action" time="0.1510" classname="nor can it do any other restricted action">
    </testcase>
  </testsuite>
  <testsuite name="suspendExchange()" timestamp="2022-02-04T17:41:25" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendExchange() is not suspended initially" time="0.0040" classname="is not suspended initially">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendExchange() can only be invoked by the owner initially" time="0.5140" classname="can only be invoked by the owner initially">
    </testcase>
  </testsuite>
  <testsuite name="when the owner suspends" timestamp="2022-02-04T17:41:25" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0750" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendExchange() when the owner suspends it succeeds" time="0.0040" classname="it succeeds">
    </testcase>
  </testsuite>
  <testsuite name="when the owner adds an address to suspend only" timestamp="2022-02-04T17:41:25" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendExchange() when the owner adds an address to suspend only other addresses still cannot suspend" time="0.0440" classname="other addresses still cannot suspend">
    </testcase>
  </testsuite>
  <testsuite name="and that address invokes suspend" timestamp="2022-02-04T17:41:25" tests="8" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.9150" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendExchange() when the owner adds an address to suspend only and that address invokes suspend it succeeds" time="0.0090" classname="it succeeds">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendExchange() when the owner adds an address to suspend only and that address invokes suspend and emits the expected event" time="0.0000" classname="and emits the expected event">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendExchange() when the owner adds an address to suspend only and that address invokes suspend and the exchange require check reverts as expected" time="0.0040" classname="and the exchange require check reverts as expected">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendExchange() when the owner adds an address to suspend only and that address invokes suspend and requireExchangeBetweenSynthsAllowed reverts as expected" time="0.0100" classname="and requireExchangeBetweenSynthsAllowed reverts as expected">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendExchange() when the owner adds an address to suspend only and that address invokes suspend but not the others" time="0.0100" classname="but not the others">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendExchange() when the owner adds an address to suspend only and that address invokes suspend yet that address cannot resume" time="0.0180" classname="yet that address cannot resume">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendExchange() when the owner adds an address to suspend only and that address invokes suspend nor can it do any other restricted action" time="0.1150" classname="nor can it do any other restricted action">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendExchange() when the owner adds an address to suspend only and that address invokes suspend yet the owner can still resume" time="0.0130" classname="yet the owner can still resume">
    </testcase>
  </testsuite>
  <testsuite name="resumeExchange()" timestamp="2022-02-04T17:41:26" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeExchange() can only be invoked by the owner initially" time="0.5510" classname="can only be invoked by the owner initially">
    </testcase>
  </testsuite>
  <testsuite name="when the owner suspends" timestamp="2022-02-04T17:41:27" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the owner adds an address to resume only" timestamp="2022-02-04T17:41:27" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeExchange() when the owner suspends when the owner adds an address to resume only other addresses still cannot resume" time="0.0510" classname="other addresses still cannot resume">
    </testcase>
  </testsuite>
  <testsuite name="and that address invokes resume" timestamp="2022-02-04T17:41:27" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="1.0680" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeExchange() when the owner suspends when the owner adds an address to resume only and that address invokes resume it succeeds" time="0.0080" classname="it succeeds">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeExchange() when the owner suspends when the owner adds an address to resume only and that address invokes resume and emits the expected event" time="0.0000" classname="and emits the expected event">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeExchange() when the owner suspends when the owner adds an address to resume only and that address invokes resume and all the require checks succeed" time="0.0360" classname="and all the require checks succeed">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeExchange() when the owner suspends when the owner adds an address to resume only and that address invokes resume yet that address cannot suspend" time="0.0510" classname="yet that address cannot suspend">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeExchange() when the owner suspends when the owner adds an address to resume only and that address invokes resume nor can it do any other restricted action" time="0.1950" classname="nor can it do any other restricted action">
    </testcase>
  </testsuite>
  <testsuite name="suspendSynthExchange()" timestamp="2022-02-04T17:41:28" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynthExchange() is not suspended initially" time="0.0070" classname="is not suspended initially">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynthExchange() can only be invoked by the owner initially" time="0.7660" classname="can only be invoked by the owner initially">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynthExchange() getSynthExchangeSuspensions(sETH, sBTC, iBTC) is empty" time="0.0080" classname="getSynthExchangeSuspensions(sETH, sBTC, iBTC) is empty">
    </testcase>
  </testsuite>
  <testsuite name="when the owner suspends" timestamp="2022-02-04T17:41:29" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.2240" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynthExchange() when the owner suspends it succeeds" time="0.0060" classname="it succeeds">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynthExchange() when the owner suspends getSynthExchangeSuspensions(sETH, sBTC, iBTC) returns values for sBTC" time="0.0070" classname="getSynthExchangeSuspensions(sETH, sBTC, iBTC) returns values for sBTC">
    </testcase>
  </testsuite>
  <testsuite name="when the owner adds an address to suspend only" timestamp="2022-02-04T17:41:29" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynthExchange() when the owner adds an address to suspend only other addresses still cannot suspend" time="0.0830" classname="other addresses still cannot suspend">
    </testcase>
  </testsuite>
  <testsuite name="and that address invokes suspend" timestamp="2022-02-04T17:41:30" tests="7" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="1.0140" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynthExchange() when the owner adds an address to suspend only and that address invokes suspend it succeeds" time="0.0050" classname="it succeeds">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynthExchange() when the owner adds an address to suspend only and that address invokes suspend and emits the expected event" time="0.0000" classname="and emits the expected event">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynthExchange() when the owner adds an address to suspend only and that address invokes suspend and the synth require check reverts as expected" time="0.0080" classname="and the synth require check reverts as expected">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynthExchange() when the owner adds an address to suspend only and that address invokes suspend but not the others" time="0.0260" classname="but not the others">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynthExchange() when the owner adds an address to suspend only and that address invokes suspend and requireExchangeBetweenSynthsAllowed() reverts if one is the given synth" time="0.0330" classname="and requireExchangeBetweenSynthsAllowed() reverts if one is the given synth">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynthExchange() when the owner adds an address to suspend only and that address invokes suspend yet that address cannot resume" time="0.0280" classname="yet that address cannot resume">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynthExchange() when the owner adds an address to suspend only and that address invokes suspend yet the owner can still resume" time="0.0290" classname="yet the owner can still resume">
    </testcase>
  </testsuite>
  <testsuite name="resumeSynthExchange()" timestamp="2022-02-04T17:41:31" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynthExchange() can only be invoked by the owner initially" time="0.5710" classname="can only be invoked by the owner initially">
    </testcase>
  </testsuite>
  <testsuite name="when the owner suspends" timestamp="2022-02-04T17:41:31" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the owner adds an address to resume only" timestamp="2022-02-04T17:41:31" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynthExchange() when the owner suspends when the owner adds an address to resume only other addresses still cannot resume" time="0.0510" classname="other addresses still cannot resume">
    </testcase>
  </testsuite>
  <testsuite name="and that address invokes resume" timestamp="2022-02-04T17:41:31" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.7280" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynthExchange() when the owner suspends when the owner adds an address to resume only and that address invokes resume it succeeds" time="0.0100" classname="it succeeds">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynthExchange() when the owner suspends when the owner adds an address to resume only and that address invokes resume and emits the expected event" time="0.0000" classname="and emits the expected event">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynthExchange() when the owner suspends when the owner adds an address to resume only and that address invokes resume and all the require checks succeed" time="0.0420" classname="and all the require checks succeed">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynthExchange() when the owner suspends when the owner adds an address to resume only and that address invokes resume yet that address cannot suspend" time="0.0200" classname="yet that address cannot suspend">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynthExchange() when the owner suspends when the owner adds an address to resume only and that address invokes resume getSynthExchangeSuspensions(sETH, sBTC, iBTC) is empty" time="0.0100" classname="getSynthExchangeSuspensions(sETH, sBTC, iBTC) is empty">
    </testcase>
  </testsuite>
  <testsuite name="suspendSynthsExchange()" timestamp="2022-02-04T17:41:32" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynthsExchange() can only be invoked by the owner initially" time="0.5860" classname="can only be invoked by the owner initially">
    </testcase>
  </testsuite>
  <testsuite name="when the owner suspends" timestamp="2022-02-04T17:41:33" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.2640" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynthsExchange() when the owner suspends it succeeds for BTC" time="0.0070" classname="it succeeds for BTC">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynthsExchange() when the owner suspends and for ETH" time="0.0070" classname="and for ETH">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynthsExchange() when the owner suspends getSynthExchangeSuspensions(sETH, sBTC, iBTC) returns values for sETH and sBTC" time="0.0120" classname="getSynthExchangeSuspensions(sETH, sBTC, iBTC) returns values for sETH and sBTC">
    </testcase>
  </testsuite>
  <testsuite name="resumeSynthsExchange()" timestamp="2022-02-04T17:41:33" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynthsExchange() can only be invoked by the owner initially" time="0.5730" classname="can only be invoked by the owner initially">
    </testcase>
  </testsuite>
  <testsuite name="when the owner suspends" timestamp="2022-02-04T17:41:34" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the owner adds an address to resume only" timestamp="2022-02-04T17:41:34" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="and that address invokes resume" timestamp="2022-02-04T17:41:34" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.4410" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynthsExchange() when the owner suspends when the owner adds an address to resume only and that address invokes resume it succeeds for sBTC" time="0.0140" classname="it succeeds for sBTC">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynthsExchange() when the owner suspends when the owner adds an address to resume only and that address invokes resume and for sETH" time="0.0150" classname="and for sETH">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynthsExchange() when the owner suspends when the owner adds an address to resume only and that address invokes resume and all the require checks succeed" time="0.0280" classname="and all the require checks succeed">
    </testcase>
  </testsuite>
  <testsuite name="suspendSynth()" timestamp="2022-02-04T17:41:34" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynth() is not suspended initially" time="0.0040" classname="is not suspended initially">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynth() can only be invoked by the owner initially" time="0.5590" classname="can only be invoked by the owner initially">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynth() getSynthSuspensions(sETH, sBTC, iBTC) is empty" time="0.0110" classname="getSynthSuspensions(sETH, sBTC, iBTC) is empty">
    </testcase>
  </testsuite>
  <testsuite name="when the owner suspends" timestamp="2022-02-04T17:41:35" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.1770" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynth() when the owner suspends it succeeds" time="0.0060" classname="it succeeds">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynth() when the owner suspends getSynthSuspensions(sETH, sBTC, iBTC) returns values for sBTC" time="0.0110" classname="getSynthSuspensions(sETH, sBTC, iBTC) returns values for sBTC">
    </testcase>
  </testsuite>
  <testsuite name="when the owner adds an address to suspend only" timestamp="2022-02-04T17:41:35" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynth() when the owner adds an address to suspend only other addresses still cannot suspend" time="0.0480" classname="other addresses still cannot suspend">
    </testcase>
  </testsuite>
  <testsuite name="and that address invokes suspend" timestamp="2022-02-04T17:41:35" tests="9" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="1.1570" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynth() when the owner adds an address to suspend only and that address invokes suspend it succeeds" time="0.0050" classname="it succeeds">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynth() when the owner adds an address to suspend only and that address invokes suspend and emits the expected event" time="0.0000" classname="and emits the expected event">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynth() when the owner adds an address to suspend only and that address invokes suspend and the synth require check reverts as expected" time="0.0150" classname="and the synth require check reverts as expected">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynth() when the owner adds an address to suspend only and that address invokes suspend but not the others" time="0.0170" classname="but not the others">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynth() when the owner adds an address to suspend only and that address invokes suspend and requireSynthsActive() reverts if one is the given synth" time="0.0320" classname="and requireSynthsActive() reverts if one is the given synth">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynth() when the owner adds an address to suspend only and that address invokes suspend and requireExchangeBetweenSynthsAllowed() reverts if one is the given synth" time="0.0380" classname="and requireExchangeBetweenSynthsAllowed() reverts if one is the given synth">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynth() when the owner adds an address to suspend only and that address invokes suspend yet that address cannot resume" time="0.0270" classname="yet that address cannot resume">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynth() when the owner adds an address to suspend only and that address invokes suspend nor can it do any other restricted action" time="0.1260" classname="nor can it do any other restricted action">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynth() when the owner adds an address to suspend only and that address invokes suspend yet the owner can still resume" time="0.0120" classname="yet the owner can still resume">
    </testcase>
  </testsuite>
  <testsuite name="suspendSynths()" timestamp="2022-02-04T17:41:36" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynths() can only be invoked by the owner initially" time="0.5330" classname="can only be invoked by the owner initially">
    </testcase>
  </testsuite>
  <testsuite name="when the owner suspends" timestamp="2022-02-04T17:41:37" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.2890" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynths() when the owner suspends it succeeds for sBTC" time="0.0060" classname="it succeeds for sBTC">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynths() when the owner suspends and for sETH" time="0.0060" classname="and for sETH">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything suspendSynths() when the owner suspends getSynthSuspensions(sETH, sBTC, iBTC) returns values for both" time="0.0090" classname="getSynthSuspensions(sETH, sBTC, iBTC) returns values for both">
    </testcase>
  </testsuite>
  <testsuite name="resumeSynth()" timestamp="2022-02-04T17:41:37" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynth() can only be invoked by the owner initially" time="0.5050" classname="can only be invoked by the owner initially">
    </testcase>
  </testsuite>
  <testsuite name="when the owner suspends" timestamp="2022-02-04T17:41:38" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the owner adds an address to resume only" timestamp="2022-02-04T17:41:38" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynth() when the owner suspends when the owner adds an address to resume only other addresses still cannot resume" time="0.0480" classname="other addresses still cannot resume">
    </testcase>
  </testsuite>
  <testsuite name="and that address invokes resume" timestamp="2022-02-04T17:41:38" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.9330" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynth() when the owner suspends when the owner adds an address to resume only and that address invokes resume it succeeds" time="0.0070" classname="it succeeds">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynth() when the owner suspends when the owner adds an address to resume only and that address invokes resume and emits the expected event" time="0.0000" classname="and emits the expected event">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynth() when the owner suspends when the owner adds an address to resume only and that address invokes resume and all the require checks succeed" time="0.0370" classname="and all the require checks succeed">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynth() when the owner suspends when the owner adds an address to resume only and that address invokes resume yet that address cannot suspend" time="0.0260" classname="yet that address cannot suspend">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynth() when the owner suspends when the owner adds an address to resume only and that address invokes resume nor can it do any other restricted action" time="0.1320" classname="nor can it do any other restricted action">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynth() when the owner suspends when the owner adds an address to resume only and that address invokes resume getSynthSuspensions(sETH, sBTC, iBTC) is empty" time="0.0120" classname="getSynthSuspensions(sETH, sBTC, iBTC) is empty">
    </testcase>
  </testsuite>
  <testsuite name="resumeSynths()" timestamp="2022-02-04T17:41:39" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynths() can only be invoked by the owner initially" time="0.5160" classname="can only be invoked by the owner initially">
    </testcase>
  </testsuite>
  <testsuite name="when the owner suspends" timestamp="2022-02-04T17:41:40" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the owner adds an address to resume only" timestamp="2022-02-04T17:41:40" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynths() when the owner suspends when the owner adds an address to resume only other addresses still cannot resume" time="0.0640" classname="other addresses still cannot resume">
    </testcase>
  </testsuite>
  <testsuite name="and that address invokes resume" timestamp="2022-02-04T17:41:40" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.4070" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynths() when the owner suspends when the owner adds an address to resume only and that address invokes resume it succeeds for sBTC" time="0.0070" classname="it succeeds for sBTC">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynths() when the owner suspends when the owner adds an address to resume only and that address invokes resume and for sETH" time="0.0100" classname="and for sETH">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything resumeSynths() when the owner suspends when the owner adds an address to resume only and that address invokes resume getSynthSuspensions(sETH, sBTC, iBTC) is empty" time="0.0100" classname="getSynthSuspensions(sETH, sBTC, iBTC) is empty">
    </testcase>
  </testsuite>
  <testsuite name="updateAccessControl()" timestamp="2022-02-04T17:41:40" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything updateAccessControl() can only be invoked by the owner" time="0.5330" classname="can only be invoked by the owner">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything updateAccessControl() when invoked with an invalid section, it reverts" time="0.0130" classname="when invoked with an invalid section, it reverts">
    </testcase>
  </testsuite>
  <testsuite name="when invoked by the owner" timestamp="2022-02-04T17:41:41" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything updateAccessControl() when invoked by the owner then it emits the expected event" time="0.0000" classname="then it emits the expected event">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything updateAccessControl() when invoked by the owner and the user can perform the action" time="0.0230" classname="and the user can perform the action">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything updateAccessControl() when invoked by the owner but not the other" time="0.0170" classname="but not the other">
    </testcase>
  </testsuite>
  <testsuite name="when overridden for the same user" timestamp="2022-02-04T17:41:41" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.2350" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything updateAccessControl() when invoked by the owner when overridden for the same user then it emits the expected event" time="0.0000" classname="then it emits the expected event">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything updateAccessControl() when invoked by the owner when overridden for the same user and the user cannot perform the action" time="0.0280" classname="and the user cannot perform the action">
    </testcase>
  </testsuite>
  <testsuite name="updateAccessControls()" timestamp="2022-02-04T17:41:41" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.0000" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything updateAccessControls() can only be invoked by the owner" time="0.5510" classname="can only be invoked by the owner">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything updateAccessControls() when invoked with an invalid section, it reverts" time="0.0300" classname="when invoked with an invalid section, it reverts">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything updateAccessControls() when invoked with invalid lengths, it reverts" time="0.0260" classname="when invoked with invalid lengths, it reverts">
    </testcase>
  </testsuite>
  <testsuite name="when invoked by the owner" timestamp="2022-02-04T17:41:42" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/SystemStatus.js" time="0.4290" failures="0">
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything updateAccessControls() when invoked by the owner then it emits the expected events" time="0.0000" classname="then it emits the expected events">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything updateAccessControls() when invoked by the owner and the users can perform the actions given" time="0.0660" classname="and the users can perform the actions given">
    </testcase>
    <testcase name="Contract: SystemStatus when the owner is given access to suspend and resume everything updateAccessControls() when invoked by the owner but not the others" time="0.0960" classname="but not the others">
    </testcase>
  </testsuite>
  <testsuite name="Contract: TemporarilyOwned" timestamp="2022-02-04T17:41:43" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TemporarilyOwned.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when attempting to deploy with an invalid owner address" timestamp="2022-02-04T17:41:43" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TemporarilyOwned.js" time="0.0330" failures="0">
    <testcase name="Contract: TemporarilyOwned when attempting to deploy with an invalid owner address reverts" time="0.0320" classname="reverts">
    </testcase>
  </testsuite>
  <testsuite name="when attempting to deploy with 0 duration" timestamp="2022-02-04T17:41:43" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TemporarilyOwned.js" time="0.0260" failures="0">
    <testcase name="Contract: TemporarilyOwned when attempting to deploy with 0 duration reverts" time="0.0240" classname="reverts">
    </testcase>
  </testsuite>
  <testsuite name="when deploying with valid parameters" timestamp="2022-02-04T17:41:43" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TemporarilyOwned.js" time="0.0000" failures="0">
    <testcase name="Contract: TemporarilyOwned when deploying with valid parameters properly set temporaryOwner" time="0.0070" classname="properly set temporaryOwner">
    </testcase>
    <testcase name="Contract: TemporarilyOwned when deploying with valid parameters properly set expiry date" time="0.0060" classname="properly set expiry date">
    </testcase>
  </testsuite>
  <testsuite name="before expiration" timestamp="2022-02-04T17:41:43" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TemporarilyOwned.js" time="0.6210" failures="0">
    <testcase name="Contract: TemporarilyOwned when deploying with valid parameters before expiration only allows the owner to execute" time="0.6140" classname="only allows the owner to execute">
    </testcase>
  </testsuite>
  <testsuite name="after expiration" timestamp="2022-02-04T17:41:43" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TemporarilyOwned.js" time="0.0270" failures="0">
    <testcase name="Contract: TemporarilyOwned when deploying with valid parameters after expiration does not allow temp owner to change the value" time="0.0230" classname="does not allow temp owner to change the value">
    </testcase>
  </testsuite>
  <testsuite name="when attempting to set a new expiry time" timestamp="2022-02-04T17:41:43" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TemporarilyOwned.js" time="0.6980" failures="0">
    <testcase name="Contract: TemporarilyOwned when attempting to set a new expiry time only allows the owner to execute" time="0.5060" classname="only allows the owner to execute">
    </testcase>
    <testcase name="Contract: TemporarilyOwned when attempting to set a new expiry time should only set a new expiry time if it is sooner than what is currently set" time="0.0180" classname="should only set a new expiry time if it is sooner than what is currently set">
    </testcase>
    <testcase name="Contract: TemporarilyOwned when attempting to set a new expiry time should properly set the expiry time" time="0.0300" classname="should properly set the expiry time">
    </testcase>
    <testcase name="Contract: TemporarilyOwned when attempting to set a new expiry time should not allow nominated owner to accept ownership after expiration" time="0.0570" classname="should not allow nominated owner to accept ownership after expiration">
    </testcase>
    <testcase name="Contract: TemporarilyOwned when attempting to set a new expiry time should not allow the nomination of a new owner after expiration" time="0.0320" classname="should not allow the nomination of a new owner after expiration">
    </testcase>
  </testsuite>
  <testsuite name="when attempting to change ownership" timestamp="2022-02-04T17:41:44" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TemporarilyOwned.js" time="0.2850" failures="0">
    <testcase name="Contract: TemporarilyOwned when attempting to change ownership should not nominate new owner when not invoked by current contract owner" time="0.1220" classname="should not nominate new owner when not invoked by current contract owner">
    </testcase>
    <testcase name="Contract: TemporarilyOwned when attempting to change ownership should nominate new owner when invoked by current contract owner" time="0.0290" classname="should nominate new owner when invoked by current contract owner">
    </testcase>
    <testcase name="Contract: TemporarilyOwned when attempting to change ownership should not accept new owner nomination when not invoked by nominated owner" time="0.0530" classname="should not accept new owner nomination when not invoked by nominated owner">
    </testcase>
    <testcase name="Contract: TemporarilyOwned when attempting to change ownership should accept new owner nomination when invoked by nominated owner" time="0.0760" classname="should accept new owner nomination when invoked by nominated owner">
    </testcase>
  </testsuite>
  <testsuite name="Contract: TokenState" timestamp="2022-02-04T17:41:44" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TokenState.js" time="0.0000" failures="0">
    <testcase name="Contract: TokenState ensure only known functions are mutative" time="0.0640" classname="ensure only known functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="setAllowance()" timestamp="2022-02-04T17:41:44" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TokenState.js" time="0.6150" failures="0">
    <testcase name="Contract: TokenState setAllowance() can only be invoked by the associated contracts" time="0.5130" classname="can only be invoked by the associated contracts">
    </testcase>
    <testcase name="Contract: TokenState setAllowance() when invoked, it sets the correct allowance" time="0.0550" classname="when invoked, it sets the correct allowance">
    </testcase>
  </testsuite>
  <testsuite name="setBalanceOf()" timestamp="2022-02-04T17:41:45" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TokenState.js" time="0.6460" failures="0">
    <testcase name="Contract: TokenState setBalanceOf() can only be invoked by the associated contracts" time="0.5510" classname="can only be invoked by the associated contracts">
    </testcase>
    <testcase name="Contract: TokenState setBalanceOf() when invoked, it sets the correct balance" time="0.0470" classname="when invoked, it sets the correct balance">
    </testcase>
  </testsuite>
  <testsuite name="Contract: TradingRewards" timestamp="2022-02-04T17:41:46" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when deploying the system" timestamp="2022-02-04T17:41:46" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: TradingRewards when deploying the system has expected balances for accounts" time="0.0430" classname="has expected balances for accounts">
    </testcase>
    <testcase name="Contract: TradingRewards when deploying the system has expected parameters" time="0.0300" classname="has expected parameters">
    </testcase>
  </testsuite>
  <testsuite name="when SystemSettings tradingRewardsEnabled is false" timestamp="2022-02-04T17:41:52" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is false tradingRewardsEnabled is false" time="0.0240" classname="tradingRewardsEnabled is false">
    </testcase>
  </testsuite>
  <testsuite name="when performing an exchange" timestamp="2022-02-04T17:41:52" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.spec.js" time="4.7980" failures="0">
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is false when performing an exchange emitted a SynthExchange event" time="0.0000" classname="emitted a SynthExchange event">
    </testcase>
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is false when performing an exchange did not emit an ExchangeFeeRecorded event" time="0.0000" classname="did not emit an ExchangeFeeRecorded event">
    </testcase>
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is false when performing an exchange did not record a fee in TradingRewards" time="0.0120" classname="did not record a fee in TradingRewards">
    </testcase>
  </testsuite>
  <testsuite name="when SystemSettings tradingRewardsEnabled is set to true" timestamp="2022-02-04T17:41:56" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.spec.js" time="0.0000" failures="0">
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is set to true tradingRewardsEnabled is true" time="0.0160" classname="tradingRewardsEnabled is true">
    </testcase>
  </testsuite>
  <testsuite name="when performing a regular exchange" timestamp="2022-02-04T17:41:56" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.spec.js" time="0.3630" failures="0">
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is set to true when performing a regular exchange emitted a SynthExchange event" time="0.0000" classname="emitted a SynthExchange event">
    </testcase>
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is set to true when performing a regular exchange emitted an ExchangeFeeRecorded event" time="0.0050" classname="emitted an ExchangeFeeRecorded event">
    </testcase>
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is set to true when performing a regular exchange recorded a fee in TradingRewards" time="0.0070" classname="recorded a fee in TradingRewards">
    </testcase>
  </testsuite>
  <testsuite name="when performing a regular exchange" timestamp="2022-02-04T17:41:57" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.spec.js" time="0.7480" failures="0">
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is set to true when performing a regular exchange emitted a SynthExchange event" time="0.0000" classname="emitted a SynthExchange event">
    </testcase>
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is set to true when performing a regular exchange emitted an ExchangeFeeRecorded event" time="0.0010" classname="emitted an ExchangeFeeRecorded event">
    </testcase>
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is set to true when performing a regular exchange recorded a fee in TradingRewards" time="0.0070" classname="recorded a fee in TradingRewards">
    </testcase>
  </testsuite>
  <testsuite name="when performing a regular exchange" timestamp="2022-02-04T17:41:58" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.spec.js" time="0.6930" failures="0">
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is set to true when performing a regular exchange emitted a SynthExchange event" time="0.0000" classname="emitted a SynthExchange event">
    </testcase>
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is set to true when performing a regular exchange emitted an ExchangeFeeRecorded event" time="0.0010" classname="emitted an ExchangeFeeRecorded event">
    </testcase>
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is set to true when performing a regular exchange recorded a fee in TradingRewards" time="0.0070" classname="recorded a fee in TradingRewards">
    </testcase>
  </testsuite>
  <testsuite name="when performing a regular exchange" timestamp="2022-02-04T17:41:58" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.spec.js" time="1.0550" failures="0">
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is set to true when performing a regular exchange emitted a SynthExchange event" time="0.0000" classname="emitted a SynthExchange event">
    </testcase>
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is set to true when performing a regular exchange emitted an ExchangeFeeRecorded event" time="0.0010" classname="emitted an ExchangeFeeRecorded event">
    </testcase>
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is set to true when performing a regular exchange recorded a fee in TradingRewards" time="0.0060" classname="recorded a fee in TradingRewards">
    </testcase>
  </testsuite>
  <testsuite name="when exchangeFeeRate is set to 0" timestamp="2022-02-04T17:41:59" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when performing an exchange" timestamp="2022-02-04T17:41:59" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.spec.js" time="0.4060" failures="0">
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is set to true when exchangeFeeRate is set to 0 when performing an exchange emitted a SynthExchange event" time="0.0000" classname="emitted a SynthExchange event">
    </testcase>
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is set to true when exchangeFeeRate is set to 0 when performing an exchange did not emit an ExchangeFeeRecorded event" time="0.0010" classname="did not emit an ExchangeFeeRecorded event">
    </testcase>
  </testsuite>
  <testsuite name="when executing an exchange with tracking" timestamp="2022-02-04T17:42:00" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a valid reward address is passed" timestamp="2022-02-04T17:42:00" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.spec.js" time="0.4690" failures="0">
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is set to true when executing an exchange with tracking when a valid reward address is passed emitted a SynthExchange event" time="0.0000" classname="emitted a SynthExchange event">
    </testcase>
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is set to true when executing an exchange with tracking when a valid reward address is passed emitted an ExchangeFeeRecorded event" time="0.0000" classname="emitted an ExchangeFeeRecorded event">
    </testcase>
  </testsuite>
  <testsuite name="when no valid reward address is passed" timestamp="2022-02-04T17:42:00" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.spec.js" time="0.3350" failures="0">
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is set to true when executing an exchange with tracking when no valid reward address is passed emitted a SynthExchange event" time="0.0000" classname="emitted a SynthExchange event">
    </testcase>
    <testcase name="Contract: TradingRewards when deploying the system when SystemSettings tradingRewardsEnabled is set to true when executing an exchange with tracking when no valid reward address is passed did not emit an ExchangeFeeRecorded event" time="0.0000" classname="did not emit an ExchangeFeeRecorded event">
    </testcase>
  </testsuite>
  <testsuite name="Contract: TradingRewards (unit tests)" timestamp="2022-02-04T17:42:01" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) ensure only known functions are mutative" time="0.0890" classname="ensure only known functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="when deploying a TradingRewards contract without setting up its address resolver" timestamp="2022-02-04T17:42:01" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0760" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when deploying a TradingRewards contract without setting up its address resolver reverts when trying to record a fee" time="0.0380" classname="reverts when trying to record a fee">
    </testcase>
  </testsuite>
  <testsuite name="when deploying a TradingRewards contract with invalid constructor parameters" timestamp="2022-02-04T17:42:01" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.2380" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when deploying a TradingRewards contract with invalid constructor parameters reverts when owner address is invalid" time="0.0510" classname="reverts when owner address is invalid">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when deploying a TradingRewards contract with invalid constructor parameters reverts when the period controller is invalid" time="0.1850" classname="reverts when the period controller is invalid">
    </testcase>
  </testsuite>
  <testsuite name="when going through various periods" timestamp="2022-02-04T17:42:01" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when deploying a rewards token" timestamp="2022-02-04T17:42:01" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token has the expected parameters" time="0.0270" classname="has the expected parameters">
    </testcase>
  </testsuite>
  <testsuite name="when a FakeTradingRewards contract is deployed" timestamp="2022-02-04T17:42:02" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed has the expected parameters" time="0.0290" classname="has the expected parameters">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed reverts when trying to send ether to the contract" time="0.0310" classname="reverts when trying to send ether to the contract">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed reverts when any address attempts to change the periodController" time="0.0260" classname="reverts when any address attempts to change the periodController">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed reverts when the period controller is set to an invalid address" time="0.0410" classname="reverts when the period controller is set to an invalid address">
    </testcase>
  </testsuite>
  <testsuite name="when checking general state" timestamp="2022-02-04T17:42:02" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.2130" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when checking general state reports the expected current period id" time="0.0060" classname="reports the expected current period id">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when checking general state reports the expected total rewards balance" time="0.0070" classname="reports the expected total rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when checking general state reports the expected available rewards balance" time="0.0050" classname="reports the expected available rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when checking general state has the expected token balance" time="0.0070" classname="has the expected token balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when checking general state reports the expected unassigned rewards balance" time="0.0250" classname="reports the expected unassigned rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when checking general state reports the expected reward token balances per account" time="0.1600" classname="reports the expected reward token balances per account">
    </testcase>
  </testsuite>
  <testsuite name="when checking state for period 0" timestamp="2022-02-04T17:42:02" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.5850" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when checking state for period 0 correctly tracks total fees for period 0" time="0.0080" classname="correctly tracks total fees for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when checking state for period 0 remembers total rewards for period 0" time="0.0210" classname="remembers total rewards for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when checking state for period 0 tracks the available rewards for period 0" time="0.0040" classname="tracks the available rewards for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when checking state for period 0 correctly reports if period 0 is finalized/claimable" time="0.0160" classname="correctly reports if period 0 is finalized/claimable">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when checking state for period 0 correctly records fees for each account for period 0" time="0.1910" classname="correctly records fees for each account for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when checking state for period 0 reports the correct available rewards per account for period 0" time="0.2960" classname="reports the correct available rewards per account for period 0">
    </testcase>
  </testsuite>
  <testsuite name="when any address attempts to record fees" timestamp="2022-02-04T17:42:03" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0780" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when any address attempts to record fees allows any address to record a fee (since this is a mock contract)" time="0.0450" classname="allows any address to record a fee (since this is a mock contract)">
    </testcase>
  </testsuite>
  <testsuite name="when fees are recorded in period 0" timestamp="2022-02-04T17:42:03" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 reports available rewards for current period to be 0, since its not finalized" time="0.0090" classname="reports available rewards for current period to be 0, since its not finalized">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 reverts when any of the accounts attempt to claim rewards from period 0" time="0.0640" classname="reverts when any of the accounts attempt to claim rewards from period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 reverts when any account attempts to close the current period" time="0.0530" classname="reverts when any account attempts to close the current period">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 reverts if the period is attempted to be closed with insufficient balance" time="0.0540" classname="reverts if the period is attempted to be closed with insufficient balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 reverts when attempting to recover free reward tokens and there arent any" time="0.0580" classname="reverts when attempting to recover free reward tokens and there arent any">
    </testcase>
  </testsuite>
  <testsuite name="when checking state for period 0" timestamp="2022-02-04T17:42:03" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.3200" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when checking state for period 0 correctly tracks total fees for period 0" time="0.0150" classname="correctly tracks total fees for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when checking state for period 0 remembers total rewards for period 0" time="0.0080" classname="remembers total rewards for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when checking state for period 0 tracks the available rewards for period 0" time="0.0050" classname="tracks the available rewards for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when checking state for period 0 correctly reports if period 0 is finalized/claimable" time="0.0120" classname="correctly reports if period 0 is finalized/claimable">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when checking state for period 0 correctly records fees for each account for period 0" time="0.1240" classname="correctly records fees for each account for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when checking state for period 0 reports the correct available rewards per account for period 0" time="0.1490" classname="reports the correct available rewards per account for period 0">
    </testcase>
  </testsuite>
  <testsuite name="when period 0 is closed with no rewards" timestamp="2022-02-04T17:42:03" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when period 0 is closed with no rewards reverts when an account attempts to claim" time="0.0370" classname="reverts when an account attempts to claim">
    </testcase>
  </testsuite>
  <testsuite name="when checking general state" timestamp="2022-02-04T17:42:03" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.1930" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when period 0 is closed with no rewards when checking general state reports the expected current period id" time="0.0080" classname="reports the expected current period id">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when period 0 is closed with no rewards when checking general state reports the expected total rewards balance" time="0.0060" classname="reports the expected total rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when period 0 is closed with no rewards when checking general state reports the expected available rewards balance" time="0.0050" classname="reports the expected available rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when period 0 is closed with no rewards when checking general state has the expected token balance" time="0.0080" classname="has the expected token balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when period 0 is closed with no rewards when checking general state reports the expected unassigned rewards balance" time="0.0210" classname="reports the expected unassigned rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when period 0 is closed with no rewards when checking general state reports the expected reward token balances per account" time="0.1410" classname="reports the expected reward token balances per account">
    </testcase>
  </testsuite>
  <testsuite name="when checking general state" timestamp="2022-02-04T17:42:04" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.1960" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when period 0 is closed with no rewards when checking general state reports the expected current period id" time="0.0050" classname="reports the expected current period id">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when period 0 is closed with no rewards when checking general state reports the expected total rewards balance" time="0.0060" classname="reports the expected total rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when period 0 is closed with no rewards when checking general state reports the expected available rewards balance" time="0.0040" classname="reports the expected available rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when period 0 is closed with no rewards when checking general state has the expected token balance" time="0.0060" classname="has the expected token balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when period 0 is closed with no rewards when checking general state reports the expected unassigned rewards balance" time="0.0220" classname="reports the expected unassigned rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when period 0 is closed with no rewards when checking general state reports the expected reward token balances per account" time="0.1440" classname="reports the expected reward token balances per account">
    </testcase>
  </testsuite>
  <testsuite name="when 10000 reward tokens are transferred to the contract" timestamp="2022-02-04T17:42:04" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract holds the transferred tokens" time="0.0050" classname="holds the transferred tokens">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract continues to report no available rewards" time="0.0050" classname="continues to report no available rewards">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract still reverts when any account attempts to close period 0" time="0.0510" classname="still reverts when any account attempts to close period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract reverts when the owner attempts to recover the free reward tokens to an invalid address" time="0.0610" classname="reverts when the owner attempts to recover the free reward tokens to an invalid address">
    </testcase>
  </testsuite>
  <testsuite name="when recovering all unassigned tokens" timestamp="2022-02-04T17:42:04" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when recovering unassigned reward tokens" timestamp="2022-02-04T17:42:04" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.1040" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when recovering all unassigned tokens when recovering unassigned reward tokens credited the tokens to the recover account" time="0.0080" classname="credited the tokens to the recover account">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when recovering all unassigned tokens when recovering unassigned reward tokens deducted the tokens from the contract" time="0.0070" classname="deducted the tokens from the contract">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when recovering all unassigned tokens when recovering unassigned reward tokens leaves the contract with no unassigned reward tokens" time="0.0090" classname="leaves the contract with no unassigned reward tokens">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when recovering all unassigned tokens when recovering unassigned reward tokens emitted an UnassignedRewardTokensRecovered event" time="0.0000" classname="emitted an UnassignedRewardTokensRecovered event">
    </testcase>
  </testsuite>
  <testsuite name="when period 0 is closed with less rewards than those free in the contract" timestamp="2022-02-04T17:42:04" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when recovering unassigned reward tokens" timestamp="2022-02-04T17:42:04" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.1870" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed with less rewards than those free in the contract when recovering unassigned reward tokens credited the tokens to the recover account" time="0.0120" classname="credited the tokens to the recover account">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed with less rewards than those free in the contract when recovering unassigned reward tokens deducted the tokens from the contract" time="0.0080" classname="deducted the tokens from the contract">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed with less rewards than those free in the contract when recovering unassigned reward tokens leaves the contract with no unassigned reward tokens" time="0.0090" classname="leaves the contract with no unassigned reward tokens">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed with less rewards than those free in the contract when recovering unassigned reward tokens emitted an UnassignedRewardTokensRecovered event" time="0.0010" classname="emitted an UnassignedRewardTokensRecovered event">
    </testcase>
  </testsuite>
  <testsuite name="when period 0 is closed and period 1 is created" timestamp="2022-02-04T17:42:04" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created reverts when any address attempts to pause the contract" time="0.0200" classname="reverts when any address attempts to pause the contract">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created reverts when attempting to recover assigned tokens from any account" time="0.0260" classname="reverts when attempting to recover assigned tokens from any account">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created reverts when attempting to recover assigned tokens to an invalid address" time="0.0520" classname="reverts when attempting to recover assigned tokens to an invalid address">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created reverts when attempting to recover assigned tokens from the active period" time="0.0250" classname="reverts when attempting to recover assigned tokens from the active period">
    </testcase>
  </testsuite>
  <testsuite name="when checking general state" timestamp="2022-02-04T17:42:05" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.1970" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when checking general state reports the expected current period id" time="0.0050" classname="reports the expected current period id">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when checking general state reports the expected total rewards balance" time="0.0070" classname="reports the expected total rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when checking general state reports the expected available rewards balance" time="0.0060" classname="reports the expected available rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when checking general state has the expected token balance" time="0.0120" classname="has the expected token balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when checking general state reports the expected unassigned rewards balance" time="0.0200" classname="reports the expected unassigned rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when checking general state reports the expected reward token balances per account" time="0.1450" classname="reports the expected reward token balances per account">
    </testcase>
  </testsuite>
  <testsuite name="when the contract is paused" timestamp="2022-02-04T17:42:05" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0990" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when the contract is paused reverts when an account attempts to claim" time="0.0610" classname="reverts when an account attempts to claim">
    </testcase>
  </testsuite>
  <testsuite name="when claiming all rewards for period 0" timestamp="2022-02-04T17:42:05" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when claiming all rewards for period 0 reverts if accounts that claimed attempt to claim again" time="0.0610" classname="reverts if accounts that claimed attempt to claim again">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when claiming all rewards for period 0 reverts if accounts that did not record fees attempt to claim" time="0.0500" classname="reverts if accounts that did not record fees attempt to claim">
    </testcase>
  </testsuite>
  <testsuite name="when checking general state" timestamp="2022-02-04T17:42:05" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.2680" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when claiming all rewards for period 0 when checking general state reports the expected current period id" time="0.0110" classname="reports the expected current period id">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when claiming all rewards for period 0 when checking general state reports the expected total rewards balance" time="0.0170" classname="reports the expected total rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when claiming all rewards for period 0 when checking general state reports the expected available rewards balance" time="0.0050" classname="reports the expected available rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when claiming all rewards for period 0 when checking general state has the expected token balance" time="0.0110" classname="has the expected token balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when claiming all rewards for period 0 when checking general state reports the expected unassigned rewards balance" time="0.0200" classname="reports the expected unassigned rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when claiming all rewards for period 0 when checking general state reports the expected reward token balances per account" time="0.1680" classname="reports the expected reward token balances per account">
    </testcase>
  </testsuite>
  <testsuite name="when checking state for period 0" timestamp="2022-02-04T17:42:06" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.2820" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when claiming all rewards for period 0 when checking state for period 0 correctly tracks total fees for period 0" time="0.0090" classname="correctly tracks total fees for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when claiming all rewards for period 0 when checking state for period 0 remembers total rewards for period 0" time="0.0050" classname="remembers total rewards for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when claiming all rewards for period 0 when checking state for period 0 tracks the available rewards for period 0" time="0.0050" classname="tracks the available rewards for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when claiming all rewards for period 0 when checking state for period 0 correctly reports if period 0 is finalized/claimable" time="0.0140" classname="correctly reports if period 0 is finalized/claimable">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when claiming all rewards for period 0 when checking state for period 0 correctly records fees for each account for period 0" time="0.1110" classname="correctly records fees for each account for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when claiming all rewards for period 0 when checking state for period 0 reports the correct available rewards per account for period 0" time="0.1220" classname="reports the correct available rewards per account for period 0">
    </testcase>
  </testsuite>
  <testsuite name="when recovering reward tokens from a finalized period" timestamp="2022-02-04T17:42:06" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when recovering reward tokens from a finalized period reverts when attempting to claim rewards from the period" time="0.0240" classname="reverts when attempting to claim rewards from the period">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when recovering reward tokens from a finalized period reverts when attempting to recover assigned tokens from a period with no rewards" time="0.0310" classname="reverts when attempting to recover assigned tokens from a period with no rewards">
    </testcase>
  </testsuite>
  <testsuite name="when recovering assigned reward tokens" timestamp="2022-02-04T17:42:06" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0970" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when recovering reward tokens from a finalized period when recovering assigned reward tokens credited the tokens to the recover account" time="0.0100" classname="credited the tokens to the recover account">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when recovering reward tokens from a finalized period when recovering assigned reward tokens deducted the tokens from the contract" time="0.0110" classname="deducted the tokens from the contract">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when recovering reward tokens from a finalized period when recovering assigned reward tokens emitted an AssignedRewardTokensRecovered event" time="0.0000" classname="emitted an AssignedRewardTokensRecovered event">
    </testcase>
  </testsuite>
  <testsuite name="when fees are recorded in period 1" timestamp="2022-02-04T17:42:06" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 reports available rewards for current period to be 0, since its not finalized" time="0.0110" classname="reports available rewards for current period to be 0, since its not finalized">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 reverts when any of the accounts attempt to claim rewards from period 1" time="0.0630" classname="reverts when any of the accounts attempt to claim rewards from period 1">
    </testcase>
  </testsuite>
  <testsuite name="when checking state for period 0" timestamp="2022-02-04T17:42:06" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.3360" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when checking state for period 0 correctly tracks total fees for period 0" time="0.0060" classname="correctly tracks total fees for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when checking state for period 0 remembers total rewards for period 0" time="0.0040" classname="remembers total rewards for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when checking state for period 0 tracks the available rewards for period 0" time="0.0050" classname="tracks the available rewards for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when checking state for period 0 correctly reports if period 0 is finalized/claimable" time="0.0130" classname="correctly reports if period 0 is finalized/claimable">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when checking state for period 0 correctly records fees for each account for period 0" time="0.1470" classname="correctly records fees for each account for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when checking state for period 0 reports the correct available rewards per account for period 0" time="0.1560" classname="reports the correct available rewards per account for period 0">
    </testcase>
  </testsuite>
  <testsuite name="when checking state for period 1" timestamp="2022-02-04T17:42:06" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.2490" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when checking state for period 1 correctly tracks total fees for period 1" time="0.0050" classname="correctly tracks total fees for period 1">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when checking state for period 1 remembers total rewards for period 1" time="0.0090" classname="remembers total rewards for period 1">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when checking state for period 1 tracks the available rewards for period 1" time="0.0050" classname="tracks the available rewards for period 1">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when checking state for period 1 correctly reports if period 1 is finalized/claimable" time="0.0130" classname="correctly reports if period 1 is finalized/claimable">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when checking state for period 1 correctly records fees for each account for period 1" time="0.1120" classname="correctly records fees for each account for period 1">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when checking state for period 1 reports the correct available rewards per account for period 1" time="0.1020" classname="reports the correct available rewards per account for period 1">
    </testcase>
  </testsuite>
  <testsuite name="when partially claiming rewards for period 0" timestamp="2022-02-04T17:42:07" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 reverts if the period is attempted to be closed with insufficient balance" time="0.0270" classname="reverts if the period is attempted to be closed with insufficient balance">
    </testcase>
  </testsuite>
  <testsuite name="when checking general state" timestamp="2022-02-04T17:42:07" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.2600" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when checking general state reports the expected current period id" time="0.0060" classname="reports the expected current period id">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when checking general state reports the expected total rewards balance" time="0.0060" classname="reports the expected total rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when checking general state reports the expected available rewards balance" time="0.0050" classname="reports the expected available rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when checking general state has the expected token balance" time="0.0090" classname="has the expected token balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when checking general state reports the expected unassigned rewards balance" time="0.0190" classname="reports the expected unassigned rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when checking general state reports the expected reward token balances per account" time="0.2000" classname="reports the expected reward token balances per account">
    </testcase>
  </testsuite>
  <testsuite name="when checking state for period 0" timestamp="2022-02-04T17:42:07" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.3270" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when checking state for period 0 correctly tracks total fees for period 0" time="0.0060" classname="correctly tracks total fees for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when checking state for period 0 remembers total rewards for period 0" time="0.0060" classname="remembers total rewards for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when checking state for period 0 tracks the available rewards for period 0" time="0.0050" classname="tracks the available rewards for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when checking state for period 0 correctly reports if period 0 is finalized/claimable" time="0.0130" classname="correctly reports if period 0 is finalized/claimable">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when checking state for period 0 correctly records fees for each account for period 0" time="0.1290" classname="correctly records fees for each account for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when checking state for period 0 reports the correct available rewards per account for period 0" time="0.1560" classname="reports the correct available rewards per account for period 0">
    </testcase>
  </testsuite>
  <testsuite name="when 50000 reward tokens are transferred to the contract" timestamp="2022-02-04T17:42:07" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when period 1 is closed and period 2 is created" timestamp="2022-02-04T17:42:07" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created properly reports accumulated available rewards" time="0.0100" classname="properly reports accumulated available rewards">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created reverts when an account attempts to claim from multiple periods and it does not have a claim to one of them" time="0.1310" classname="reverts when an account attempts to claim from multiple periods and it does not have a claim to one of them">
    </testcase>
  </testsuite>
  <testsuite name="when checking general state" timestamp="2022-02-04T17:42:08" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.1920" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when checking general state reports the expected current period id" time="0.0070" classname="reports the expected current period id">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when checking general state reports the expected total rewards balance" time="0.0060" classname="reports the expected total rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when checking general state reports the expected available rewards balance" time="0.0050" classname="reports the expected available rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when checking general state has the expected token balance" time="0.0060" classname="has the expected token balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when checking general state reports the expected unassigned rewards balance" time="0.0210" classname="reports the expected unassigned rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when checking general state reports the expected reward token balances per account" time="0.1410" classname="reports the expected reward token balances per account">
    </testcase>
  </testsuite>
  <testsuite name="when accounts claim from multiple periods" timestamp="2022-02-04T17:42:08" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods reverts when an account attempts to claim from multiple periods again" time="0.0240" classname="reverts when an account attempts to claim from multiple periods again">
    </testcase>
  </testsuite>
  <testsuite name="when checking general state" timestamp="2022-02-04T17:42:08" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.2900" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking general state reports the expected current period id" time="0.0060" classname="reports the expected current period id">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking general state reports the expected total rewards balance" time="0.0090" classname="reports the expected total rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking general state reports the expected available rewards balance" time="0.0050" classname="reports the expected available rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking general state has the expected token balance" time="0.0080" classname="has the expected token balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking general state reports the expected unassigned rewards balance" time="0.0330" classname="reports the expected unassigned rewards balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking general state reports the expected reward token balances per account" time="0.2100" classname="reports the expected reward token balances per account">
    </testcase>
  </testsuite>
  <testsuite name="when checking state for period 0" timestamp="2022-02-04T17:42:08" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.3410" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking state for period 0 correctly tracks total fees for period 0" time="0.0050" classname="correctly tracks total fees for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking state for period 0 remembers total rewards for period 0" time="0.0050" classname="remembers total rewards for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking state for period 0 tracks the available rewards for period 0" time="0.0050" classname="tracks the available rewards for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking state for period 0 correctly reports if period 0 is finalized/claimable" time="0.0180" classname="correctly reports if period 0 is finalized/claimable">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking state for period 0 correctly records fees for each account for period 0" time="0.1710" classname="correctly records fees for each account for period 0">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking state for period 0 reports the correct available rewards per account for period 0" time="0.1340" classname="reports the correct available rewards per account for period 0">
    </testcase>
  </testsuite>
  <testsuite name="when checking state for period 1" timestamp="2022-02-04T17:42:09" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.4780" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking state for period 1 correctly tracks total fees for period 1" time="0.0050" classname="correctly tracks total fees for period 1">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking state for period 1 remembers total rewards for period 1" time="0.0050" classname="remembers total rewards for period 1">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking state for period 1 tracks the available rewards for period 1" time="0.0050" classname="tracks the available rewards for period 1">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking state for period 1 correctly reports if period 1 is finalized/claimable" time="0.0250" classname="correctly reports if period 1 is finalized/claimable">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking state for period 1 correctly records fees for each account for period 1" time="0.1190" classname="correctly records fees for each account for period 1">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking state for period 1 reports the correct available rewards per account for period 1" time="0.2370" classname="reports the correct available rewards per account for period 1">
    </testcase>
  </testsuite>
  <testsuite name="when checking state for period 2" timestamp="2022-02-04T17:42:09" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="1.8710" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking state for period 2 correctly tracks total fees for period 2" time="0.0120" classname="correctly tracks total fees for period 2">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking state for period 2 remembers total rewards for period 2" time="0.0060" classname="remembers total rewards for period 2">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking state for period 2 tracks the available rewards for period 2" time="0.0090" classname="tracks the available rewards for period 2">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking state for period 2 correctly reports if period 2 is finalized/claimable" time="0.0330" classname="correctly reports if period 2 is finalized/claimable">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking state for period 2 correctly records fees for each account for period 2" time="1.0690" classname="correctly records fees for each account for period 2">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when fees are recorded in period 0 when 10000 reward tokens are transferred to the contract when period 0 is closed and period 1 is created when fees are recorded in period 1 when partially claiming rewards for period 0 when 50000 reward tokens are transferred to the contract when period 1 is closed and period 2 is created when accounts claim from multiple periods when checking state for period 2 reports the correct available rewards per account for period 2" time="0.7250" classname="reports the correct available rewards per account for period 2">
    </testcase>
  </testsuite>
  <testsuite name="when changing the period controller" timestamp="2022-02-04T17:42:11" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.1010" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when changing the period controller changed the period controller" time="0.0150" classname="changed the period controller">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when changing the period controller emitted a PeriodControllerChanged event" time="0.0000" classname="emitted a PeriodControllerChanged event">
    </testcase>
  </testsuite>
  <testsuite name="when sending non-reward tokens to the contract" timestamp="2022-02-04T17:42:11" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when sending non-reward tokens to the contract supplied the token to the owner" time="0.0100" classname="supplied the token to the owner">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when sending non-reward tokens to the contract reverts when trying to recover tokens that the contract does not have" time="0.0500" classname="reverts when trying to recover tokens that the contract does not have">
    </testcase>
  </testsuite>
  <testsuite name="when the tokens are transferred to the contract" timestamp="2022-02-04T17:42:12" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when sending non-reward tokens to the contract when the tokens are transferred to the contract holds the balance" time="0.0090" classname="holds the balance">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when sending non-reward tokens to the contract when the tokens are transferred to the contract reverts when any address attempts to withdraw the tokens" time="0.0460" classname="reverts when any address attempts to withdraw the tokens">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when sending non-reward tokens to the contract when the tokens are transferred to the contract reverts when the target token is the rewards token" time="0.0510" classname="reverts when the target token is the rewards token">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when sending non-reward tokens to the contract when the tokens are transferred to the contract reverts when the recover address is invalid" time="0.0790" classname="reverts when the recover address is invalid">
    </testcase>
  </testsuite>
  <testsuite name="when the owner recovers the tokens" timestamp="2022-02-04T17:42:12" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/TradingRewards.unit.js" time="0.0840" failures="0">
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when sending non-reward tokens to the contract when the tokens are transferred to the contract when the owner recovers the tokens credited the tokens to the recovery account" time="0.0180" classname="credited the tokens to the recovery account">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when sending non-reward tokens to the contract when the tokens are transferred to the contract when the owner recovers the tokens left the contract with no tokens" time="0.0070" classname="left the contract with no tokens">
    </testcase>
    <testcase name="Contract: TradingRewards (unit tests) when going through various periods when deploying a rewards token when a FakeTradingRewards contract is deployed when sending non-reward tokens to the contract when the tokens are transferred to the contract when the owner recovers the tokens emits a TokensRecovered event" time="0.0000" classname="emits a TokensRecovered event">
    </testcase>
  </testsuite>
  <testsuite name="Contract: VirtualSynth (unit tests)" timestamp="2022-02-04T17:42:12" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) ensure only known functions are mutative" time="0.0290" classname="ensure only known functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="with common setup" timestamp="2022-02-04T17:42:12" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="initialize" timestamp="2022-02-04T17:42:12" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when instantiated for user 0x70997" timestamp="2022-02-04T17:42:12" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="1.8190" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup initialize when instantiated for user 0x70997 is initialized" time="0.0420" classname="is initialized">
    </testcase>
    <testcase name="Contract: VirtualSynth (unit tests) with common setup initialize when instantiated for user 0x70997 and each initialize arg is set correctly" time="0.0340" classname="and each initialize arg is set correctly">
    </testcase>
    <testcase name="Contract: VirtualSynth (unit tests) with common setup initialize when instantiated for user 0x70997 and the user is minted the total supply" time="0.0500" classname="and the user is minted the total supply">
    </testcase>
    <testcase name="Contract: VirtualSynth (unit tests) with common setup initialize when instantiated for user 0x70997 and a transfer event was emitted to the user" time="0.0140" classname="and a transfer event was emitted to the user">
    </testcase>
    <testcase name="Contract: VirtualSynth (unit tests) with common setup initialize when instantiated for user 0x70997 and it cannot be initialized again" time="0.0650" classname="and it cannot be initialized again">
    </testcase>
  </testsuite>
  <testsuite name="balanceOfUnderlying()" timestamp="2022-02-04T17:42:14" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when instantiated for user 0x70997" timestamp="2022-02-04T17:42:14" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settlement owing shows a 0 reclaim, 0 rebate and 1 numEntries" timestamp="2022-02-04T17:42:14" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the synth has been mocked to show balance for the vSynth as 1200" timestamp="2022-02-04T17:42:14" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.2820" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup balanceOfUnderlying() when instantiated for user 0x70997 when settlement owing shows a 0 reclaim, 0 rebate and 1 numEntries when the synth has been mocked to show balance for the vSynth as 1200 then balance underlying must match the balance" time="0.0590" classname="then balance underlying must match the balance">
    </testcase>
  </testsuite>
  <testsuite name="when the synth has been mocked to show balance for the vSynth as 600" timestamp="2022-02-04T17:42:14" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup balanceOfUnderlying() when instantiated for user 0x70997 when settlement owing shows a 0 reclaim, 0 rebate and 1 numEntries when the synth has been mocked to show balance for the vSynth as 600 then balance underlying must be half the balance" time="0.0290" classname="then balance underlying must be half the balance">
    </testcase>
  </testsuite>
  <testsuite name="when the user transfers away 600 of their vSynths" timestamp="2022-02-04T17:42:14" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup balanceOfUnderlying() when instantiated for user 0x70997 when settlement owing shows a 0 reclaim, 0 rebate and 1 numEntries when the synth has been mocked to show balance for the vSynth as 600 when the user transfers away 600 of their vSynths then balance underlying must be quarter the balance" time="0.0390" classname="then balance underlying must be quarter the balance">
    </testcase>
  </testsuite>
  <testsuite name="when the user transfers away 400 of their vSynths" timestamp="2022-02-04T17:42:15" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.4330" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup balanceOfUnderlying() when instantiated for user 0x70997 when settlement owing shows a 0 reclaim, 0 rebate and 1 numEntries when the synth has been mocked to show balance for the vSynth as 600 when the user transfers away 600 of their vSynths when the user transfers away 400 of their vSynths then balance underlying must be a twelth of the balance" time="0.0380" classname="then balance underlying must be a twelth of the balance">
    </testcase>
  </testsuite>
  <testsuite name="when the user transfers away 400 of their vSynths" timestamp="2022-02-04T17:42:15" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.2860" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup balanceOfUnderlying() when instantiated for user 0x70997 when settlement owing shows a 0 reclaim, 0 rebate and 1 numEntries when the synth has been mocked to show balance for the vSynth as 600 when the user transfers away 400 of their vSynths then balance underlying must be a third of the balance" time="0.0170" classname="then balance underlying must be a third of the balance">
    </testcase>
  </testsuite>
  <testsuite name="when the synth has been mocked to show balance for the vSynth as 1200" timestamp="2022-02-04T17:42:15" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settlement owing shows a 200 reclaim, 0 rebate and 1 numEntries" timestamp="2022-02-04T17:42:15" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup balanceOfUnderlying() when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 1200 when settlement owing shows a 200 reclaim, 0 rebate and 1 numEntries then balance underlying must match the balance after the reclaim" time="0.0300" classname="then balance underlying must match the balance after the reclaim">
    </testcase>
  </testsuite>
  <testsuite name="when the user transfers away 600 of their vSynths" timestamp="2022-02-04T17:42:16" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.2430" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup balanceOfUnderlying() when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 1200 when settlement owing shows a 200 reclaim, 0 rebate and 1 numEntries when the user transfers away 600 of their vSynths then balance underlying must match the balance after the reclaim, in proportion to their share" time="0.0260" classname="then balance underlying must match the balance after the reclaim, in proportion to their share">
    </testcase>
  </testsuite>
  <testsuite name="when settlement is invoked for user 0x70997" timestamp="2022-02-04T17:42:16" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.2550" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup balanceOfUnderlying() when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 1200 when settlement owing shows a 200 reclaim, 0 rebate and 1 numEntries when settlement is invoked for user 0x70997 then balance underlying is 0 as user supply is burned" time="0.0210" classname="then balance underlying is 0 as user supply is burned">
    </testcase>
  </testsuite>
  <testsuite name="when settlement owing shows a 0 reclaim, 300 rebate and 1 numEntries" timestamp="2022-02-04T17:42:16" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup balanceOfUnderlying() when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 1200 when settlement owing shows a 0 reclaim, 300 rebate and 1 numEntries then balance underlying must match the balance after the rebate" time="0.0250" classname="then balance underlying must match the balance after the rebate">
    </testcase>
  </testsuite>
  <testsuite name="when the user transfers away 600 of their vSynths" timestamp="2022-02-04T17:42:16" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup balanceOfUnderlying() when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 1200 when settlement owing shows a 0 reclaim, 300 rebate and 1 numEntries when the user transfers away 600 of their vSynths then balance underlying must match the balance after the reclaim, in proportion to their share" time="0.0200" classname="then balance underlying must match the balance after the reclaim, in proportion to their share">
    </testcase>
    <testcase name="Contract: VirtualSynth (unit tests) with common setup balanceOfUnderlying() when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 1200 when settlement owing shows a 0 reclaim, 300 rebate and 1 numEntries when the user transfers away 600 of their vSynths whereas the other user has the other half" time="0.0240" classname="whereas the other user has the other half">
    </testcase>
  </testsuite>
  <testsuite name="when settlement is invoked for user 0x70997" timestamp="2022-02-04T17:42:17" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.5130" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup balanceOfUnderlying() when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 1200 when settlement owing shows a 0 reclaim, 300 rebate and 1 numEntries when the user transfers away 600 of their vSynths when settlement is invoked for user 0x70997 then balance underlying is 0 as user supply is burned" time="0.0090" classname="then balance underlying is 0 as user supply is burned">
    </testcase>
    <testcase name="Contract: VirtualSynth (unit tests) with common setup balanceOfUnderlying() when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 1200 when settlement owing shows a 0 reclaim, 300 rebate and 1 numEntries when the user transfers away 600 of their vSynths when settlement is invoked for user 0x70997 whereas the other user still has the other half" time="0.0140" classname="whereas the other user still has the other half">
    </testcase>
  </testsuite>
  <testsuite name="when settlement is invoked for user 0x70997" timestamp="2022-02-04T17:42:17" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.2330" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup balanceOfUnderlying() when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 1200 when settlement owing shows a 0 reclaim, 300 rebate and 1 numEntries when settlement is invoked for user 0x70997 then balance underlying is 0 as user supply is burned" time="0.0100" classname="then balance underlying is 0 as user supply is burned">
    </testcase>
  </testsuite>
  <testsuite name="rate()" timestamp="2022-02-04T17:42:17" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when instantiated for user 0x70997" timestamp="2022-02-04T17:42:17" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.1850" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup rate() when instantiated for user 0x70997 then the rate must be 0" time="0.0140" classname="then the rate must be 0">
    </testcase>
  </testsuite>
  <testsuite name="when instantiated for user 0x70997" timestamp="2022-02-04T17:42:18" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the synth has been mocked to show balance for the vSynth as 1200" timestamp="2022-02-04T17:42:18" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="pre-settlement" timestamp="2022-02-04T17:42:18" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settlement owing shows a 0 reclaim, 0 rebate and 1 numEntries" timestamp="2022-02-04T17:42:18" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.1760" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup rate() when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 1200 pre-settlement when settlement owing shows a 0 reclaim, 0 rebate and 1 numEntries then the rate must be even" time="0.0180" classname="then the rate must be even">
    </testcase>
  </testsuite>
  <testsuite name="when settlement owing shows a 200 reclaim, 0 rebate and 1 numEntries" timestamp="2022-02-04T17:42:18" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.1630" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup rate() when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 1200 pre-settlement when settlement owing shows a 200 reclaim, 0 rebate and 1 numEntries then the rate must be 10/12 (with 18 decimals)" time="0.0180" classname="then the rate must be 10/12 (with 18 decimals)">
    </testcase>
  </testsuite>
  <testsuite name="when settlement owing shows a 0 reclaim, 300 rebate and 1 numEntries" timestamp="2022-02-04T17:42:18" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup rate() when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 1200 pre-settlement when settlement owing shows a 0 reclaim, 300 rebate and 1 numEntries then the rate must be 15/12 (with 18 decimals)" time="0.0180" classname="then the rate must be 15/12 (with 18 decimals)">
    </testcase>
  </testsuite>
  <testsuite name="when the user transfers away 300 of their vSynths" timestamp="2022-02-04T17:42:18" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup rate() when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 1200 pre-settlement when settlement owing shows a 0 reclaim, 300 rebate and 1 numEntries when the user transfers away 300 of their vSynths then the rate must still be 15/12 (with 18 decimals)" time="0.0190" classname="then the rate must still be 15/12 (with 18 decimals)">
    </testcase>
  </testsuite>
  <testsuite name="when settlement is invoked for user 0x70997" timestamp="2022-02-04T17:42:18" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.2370" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup rate() when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 1200 pre-settlement when settlement owing shows a 0 reclaim, 300 rebate and 1 numEntries when the user transfers away 300 of their vSynths when settlement is invoked for user 0x70997 then the rate must still be 15/12 (with 18 decimals)" time="0.0110" classname="then the rate must still be 15/12 (with 18 decimals)">
    </testcase>
  </testsuite>
  <testsuite name="post-settlement" timestamp="2022-02-04T17:42:19" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settlement owing shows a 0 reclaim, 0 rebate and 1 numEntries" timestamp="2022-02-04T17:42:19" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settlement is invoked for user 0x70997" timestamp="2022-02-04T17:42:19" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.1970" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup rate() when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 1200 post-settlement when settlement owing shows a 0 reclaim, 0 rebate and 1 numEntries when settlement is invoked for user 0x70997 then the rate must be even" time="0.0070" classname="then the rate must be even">
    </testcase>
  </testsuite>
  <testsuite name="when settlement owing shows a 200 reclaim, 0 rebate and 1 numEntries" timestamp="2022-02-04T17:42:19" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settlement is invoked for user 0x70997" timestamp="2022-02-04T17:42:19" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.1910" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup rate() when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 1200 post-settlement when settlement owing shows a 0 reclaim, 0 rebate and 1 numEntries when settlement owing shows a 200 reclaim, 0 rebate and 1 numEntries when settlement is invoked for user 0x70997 then the rate must be 10/12 (with 18 decimals)" time="0.0100" classname="then the rate must be 10/12 (with 18 decimals)">
    </testcase>
  </testsuite>
  <testsuite name="when settlement owing shows a 0 reclaim, 300 rebate and 1 numEntries" timestamp="2022-02-04T17:42:19" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup rate() when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 1200 post-settlement when settlement owing shows a 0 reclaim, 0 rebate and 1 numEntries when settlement owing shows a 0 reclaim, 300 rebate and 1 numEntries then the rate must be 15/12 (with 18 decimals)" time="0.0180" classname="then the rate must be 15/12 (with 18 decimals)">
    </testcase>
  </testsuite>
  <testsuite name="when the user transfers away 300 of their vSynths" timestamp="2022-02-04T17:42:19" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup rate() when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 1200 post-settlement when settlement owing shows a 0 reclaim, 0 rebate and 1 numEntries when settlement owing shows a 0 reclaim, 300 rebate and 1 numEntries when the user transfers away 300 of their vSynths then the rate must still be 15/12 (with 18 decimals)" time="0.0140" classname="then the rate must still be 15/12 (with 18 decimals)">
    </testcase>
  </testsuite>
  <testsuite name="when settlement is invoked for user 0x70997" timestamp="2022-02-04T17:42:19" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.2270" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup rate() when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 1200 post-settlement when settlement owing shows a 0 reclaim, 0 rebate and 1 numEntries when settlement owing shows a 0 reclaim, 300 rebate and 1 numEntries when the user transfers away 300 of their vSynths when settlement is invoked for user 0x70997 then the rate must still be 15/12 (with 18 decimals) " time="0.0110" classname="then the rate must still be 15/12 (with 18 decimals) ">
    </testcase>
  </testsuite>
  <testsuite name="secsLeftInWaitingPeriod()" timestamp="2022-02-04T17:42:20" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when instantiated for user 0x70997" timestamp="2022-02-04T17:42:20" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked with 100 for settlement " timestamp="2022-02-04T17:42:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.1780" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup secsLeftInWaitingPeriod() when instantiated for user 0x70997 when mocked with 100 for settlement  then secs left in waiting period returns 100" time="0.0170" classname="then secs left in waiting period returns 100">
    </testcase>
  </testsuite>
  <testsuite name="when mocked with 1 for settlement " timestamp="2022-02-04T17:42:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.1510" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup secsLeftInWaitingPeriod() when instantiated for user 0x70997 when mocked with 1 for settlement  then secs left in waiting period returns 1" time="0.0140" classname="then secs left in waiting period returns 1">
    </testcase>
  </testsuite>
  <testsuite name="when mocked with 0 for settlement " timestamp="2022-02-04T17:42:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.1550" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup secsLeftInWaitingPeriod() when instantiated for user 0x70997 when mocked with 0 for settlement  then secs left in waiting period returns 0" time="0.0100" classname="then secs left in waiting period returns 0">
    </testcase>
  </testsuite>
  <testsuite name="readyToSettle()" timestamp="2022-02-04T17:42:20" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when instantiated for user 0x70997" timestamp="2022-02-04T17:42:20" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mocked with 100 for settlement " timestamp="2022-02-04T17:42:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.1710" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup readyToSettle() when instantiated for user 0x70997 when mocked with 100 for settlement  then ready to settle is false" time="0.0160" classname="then ready to settle is false">
    </testcase>
  </testsuite>
  <testsuite name="when mocked with 1 for settlement " timestamp="2022-02-04T17:42:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.1530" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup readyToSettle() when instantiated for user 0x70997 when mocked with 1 for settlement  then ready to settle is false" time="0.0120" classname="then ready to settle is false">
    </testcase>
  </testsuite>
  <testsuite name="when mocked with 0 for settlement " timestamp="2022-02-04T17:42:20" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.1600" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup readyToSettle() when instantiated for user 0x70997 when mocked with 0 for settlement  then ready to settle is false" time="0.0110" classname="then ready to settle is false">
    </testcase>
  </testsuite>
  <testsuite name="settlement" timestamp="2022-02-04T17:42:21" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when instantiated for user 0x70997" timestamp="2022-02-04T17:42:21" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the synth has been mocked to show balance for the vSynth as 999" timestamp="2022-02-04T17:42:21" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="settled()" timestamp="2022-02-04T17:42:21" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup settlement when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 999 settled() is false by default" time="0.0180" classname="is false by default">
    </testcase>
  </testsuite>
  <testsuite name="when settlement is invoked for user 0x70997" timestamp="2022-02-04T17:42:21" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.1950" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup settlement when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 999 settled() when settlement is invoked for user 0x70997 is true" time="0.0140" classname="is true">
    </testcase>
  </testsuite>
  <testsuite name="settle()" timestamp="2022-02-04T17:42:21" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settlement is invoked for user 0x70997" timestamp="2022-02-04T17:42:21" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup settlement when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 999 settle() when settlement is invoked for user 0x70997 then Exchanger.settle() is invoked with the correct params" time="0.0010" classname="then Exchanger.settle() is invoked with the correct params">
    </testcase>
    <testcase name="Contract: VirtualSynth (unit tests) with common setup settlement when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 999 settle() when settlement is invoked for user 0x70997 then Exchanger.settle() emits a Settled event with the supply and balance params" time="0.0000" classname="then Exchanger.settle() emits a Settled event with the supply and balance params">
    </testcase>
    <testcase name="Contract: VirtualSynth (unit tests) with common setup settlement when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 999 settle() when settlement is invoked for user 0x70997 then the balance of the users vSynth is 0" time="0.0180" classname="then the balance of the users vSynth is 0">
    </testcase>
    <testcase name="Contract: VirtualSynth (unit tests) with common setup settlement when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 999 settle() when settlement is invoked for user 0x70997 then the user is transferred the balance of the synth" time="0.0030" classname="then the user is transferred the balance of the synth">
    </testcase>
  </testsuite>
  <testsuite name="when settlement is invoked for user 0x70997" timestamp="2022-02-04T17:42:22" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.1960" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup settlement when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 999 settle() when settlement is invoked for user 0x70997 when settlement is invoked for user 0x70997 then Exchanger.settle() does not emit another settlement" time="0.0000" classname="then Exchanger.settle() does not emit another settlement">
    </testcase>
  </testsuite>
  <testsuite name="when settlement owing shows a 333 reclaim, 0 rebate and 1 numEntries" timestamp="2022-02-04T17:42:22" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settlement is invoked for user 0x70997" timestamp="2022-02-04T17:42:22" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.1860" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup settlement when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 999 settle() when settlement owing shows a 333 reclaim, 0 rebate and 1 numEntries when settlement is invoked for user 0x70997 then the user is transferred the remaining balance of the synths" time="0.0020" classname="then the user is transferred the remaining balance of the synths">
    </testcase>
  </testsuite>
  <testsuite name="when settlement owing shows a 0 reclaim, 1 rebate and 1 numEntries" timestamp="2022-02-04T17:42:22" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settlement is invoked for user 0x70997" timestamp="2022-02-04T17:42:22" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.1790" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup settlement when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 999 settle() when settlement owing shows a 0 reclaim, 1 rebate and 1 numEntries when settlement is invoked for user 0x70997 then the user is transferred the entire balance of the synths" time="0.0020" classname="then the user is transferred the entire balance of the synths">
    </testcase>
  </testsuite>
  <testsuite name="when the user transfers away 666 of their vSynths" timestamp="2022-02-04T17:42:22" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settlement is invoked for user 0x70997" timestamp="2022-02-04T17:42:22" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.1940" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup settlement when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 999 settle() when the user transfers away 666 of their vSynths when settlement is invoked for user 0x70997 then the user is transferred their portion balance of the synths" time="0.0020" classname="then the user is transferred their portion balance of the synths">
    </testcase>
  </testsuite>
  <testsuite name="when settlement owing shows a 300 reclaim, 0 rebate and 1 numEntries" timestamp="2022-02-04T17:42:22" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when settlement is invoked for user 0x70997" timestamp="2022-02-04T17:42:22" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynth.unit.js" time="0.1970" failures="0">
    <testcase name="Contract: VirtualSynth (unit tests) with common setup settlement when instantiated for user 0x70997 when the synth has been mocked to show balance for the vSynth as 999 settle() when the user transfers away 666 of their vSynths when settlement owing shows a 300 reclaim, 0 rebate and 1 numEntries when settlement is invoked for user 0x70997 then the user is transferred their portion balance of the synths" time="0.0020" classname="then the user is transferred their portion balance of the synths">
    </testcase>
  </testsuite>
  <testsuite name="Contract: VirtualSynthMastercopy (unit tests)" timestamp="2022-02-04T17:42:23" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynthMastercopy.unit.js" time="0.0000" failures="0">
    <testcase name="Contract: VirtualSynthMastercopy (unit tests) ensure same functions as VirtualSynth are mutative" time="0.0540" classname="ensure same functions as VirtualSynth are mutative">
    </testcase>
  </testsuite>
  <testsuite name="with instance" timestamp="2022-02-04T17:42:23" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/VirtualSynthMastercopy.unit.js" time="0.2070" failures="0">
    <testcase name="Contract: VirtualSynthMastercopy (unit tests) with instance is initialized" time="0.0070" classname="is initialized">
    </testcase>
    <testcase name="Contract: VirtualSynthMastercopy (unit tests) with instance and the instance cannot be initialized again" time="0.0290" classname="and the instance cannot be initialized again">
    </testcase>
    <testcase name="Contract: VirtualSynthMastercopy (unit tests) with instance and the state is empty" time="0.0500" classname="and the state is empty">
    </testcase>
    <testcase name="Contract: VirtualSynthMastercopy (unit tests) with instance and state-dependent functions fail" time="0.0150" classname="and state-dependent functions fail">
    </testcase>
  </testsuite>
  <testsuite name="Contract: Wrapper" timestamp="2022-02-04T17:42:23" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.0000" failures="0">
    <testcase name="Contract: Wrapper ensure only expected functions are mutative" time="0.1400" classname="ensure only expected functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="On deployment of Contract" timestamp="2022-02-04T17:42:34" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.0000" failures="0">
    <testcase name="Contract: Wrapper On deployment of Contract should set constructor params on deployment" time="0.0090" classname="should set constructor params on deployment">
    </testcase>
    <testcase name="Contract: Wrapper On deployment of Contract should set the wrapper token approval" time="0.0110" classname="should set the wrapper token approval">
    </testcase>
    <testcase name="Contract: Wrapper On deployment of Contract should access its dependencies via the address resolver" time="0.0420" classname="should access its dependencies via the address resolver">
    </testcase>
    <testcase name="Contract: Wrapper On deployment of Contract should not be payable" time="0.0400" classname="should not be payable">
    </testcase>
  </testsuite>
  <testsuite name="should have a default" timestamp="2022-02-04T17:42:34" tests="4" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.0000" failures="0">
    <testcase name="Contract: Wrapper On deployment of Contract should have a default maxTokenAmount of 5,000 ETH" time="0.0170" classname="maxTokenAmount of 5,000 ETH">
    </testcase>
    <testcase name="Contract: Wrapper On deployment of Contract should have a default capacity of 5,000 ETH" time="0.0080" classname="capacity of 5,000 ETH">
    </testcase>
    <testcase name="Contract: Wrapper On deployment of Contract should have a default mintFeeRate of 50 bps" time="0.0110" classname="mintFeeRate of 50 bps">
    </testcase>
    <testcase name="Contract: Wrapper On deployment of Contract should have a default burnFeeRate of 50 bps" time="0.0070" classname="burnFeeRate of 50 bps">
    </testcase>
  </testsuite>
  <testsuite name="totalIssuedSynths" timestamp="2022-02-04T17:42:34" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.0310" failures="0">
    <testcase name="Contract: Wrapper On deployment of Contract should have a default totalIssuedSynths synth = 0" time="0.0050" classname="synth = 0">
    </testcase>
  </testsuite>
  <testsuite name="totalIssuedSynths" timestamp="2022-02-04T17:42:34" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mint(1 sETH) is called" timestamp="2022-02-04T17:42:34" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.0000" failures="0">
    <testcase name="Contract: Wrapper totalIssuedSynths when mint(1 sETH) is called total issued sETH = 1.0" time="0.0060" classname="total issued sETH = 1.0">
    </testcase>
    <testcase name="Contract: Wrapper totalIssuedSynths when mint(1 sETH) is called fees escrowed = 0.005" time="0.0080" classname="fees escrowed = 0.005">
    </testcase>
  </testsuite>
  <testsuite name="then burn(`reserves + fees` WETH) is called" timestamp="2022-02-04T17:42:34" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.0000" failures="0">
    <testcase name="Contract: Wrapper totalIssuedSynths when mint(1 sETH) is called then burn(`reserves + fees` WETH) is called total issued sETH = 0.0" time="0.0050" classname="total issued sETH = 0.0">
    </testcase>
    <testcase name="Contract: Wrapper totalIssuedSynths when mint(1 sETH) is called then burn(`reserves + fees` WETH) is called fees escrowed = 0.01" time="0.0330" classname="fees escrowed = 0.01">
    </testcase>
  </testsuite>
  <testsuite name="then distributeFees is called" timestamp="2022-02-04T17:42:37" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.7370" failures="0">
    <testcase name="Contract: Wrapper totalIssuedSynths when mint(1 sETH) is called then burn(`reserves + fees` WETH) is called then distributeFees is called fees escrowed = 0.0" time="0.0380" classname="fees escrowed = 0.0">
    </testcase>
  </testsuite>
  <testsuite name="mint" timestamp="2022-02-04T17:42:38" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when amount is less than than capacity" timestamp="2022-02-04T17:42:38" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="fee is positive" timestamp="2022-02-04T17:42:38" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="2.6460" failures="0">
    <testcase name="Contract: Wrapper mint when amount is less than than capacity fee is positive locks `amount` WETH in the contract" time="0.0120" classname="locks `amount` WETH in the contract">
    </testcase>
    <testcase name="Contract: Wrapper mint when amount is less than than capacity fee is positive mints amount(1-mintFeeRate) sETH into the user’s wallet" time="0.0210" classname="mints amount(1-mintFeeRate) sETH into the user’s wallet">
    </testcase>
    <testcase name="Contract: Wrapper mint when amount is less than than capacity fee is positive escrows `amount * mintFeeRate` worth of sUSD as fees" time="0.0110" classname="escrows `amount * mintFeeRate` worth of sUSD as fees">
    </testcase>
    <testcase name="Contract: Wrapper mint when amount is less than than capacity fee is positive has a capacity of (capacity - amount) after" time="0.1580" classname="has a capacity of (capacity - amount) after">
    </testcase>
    <testcase name="Contract: Wrapper mint when amount is less than than capacity fee is positive targetSynthIssued = sETH balance" time="0.0140" classname="targetSynthIssued = sETH balance">
    </testcase>
    <testcase name="Contract: Wrapper mint when amount is less than than capacity fee is positive emits Minted event" time="0.0050" classname="emits Minted event">
    </testcase>
  </testsuite>
  <testsuite name="fee is negative" timestamp="2022-02-04T17:42:40" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.5820" failures="0">
    <testcase name="Contract: Wrapper mint when amount is less than than capacity fee is negative locks `amount` WETH in the contract" time="0.0030" classname="locks `amount` WETH in the contract">
    </testcase>
    <testcase name="Contract: Wrapper mint when amount is less than than capacity fee is negative mints amount(1+mintFeeRate) sETH into the user’s wallet" time="0.0120" classname="mints amount(1+mintFeeRate) sETH into the user’s wallet">
    </testcase>
  </testsuite>
  <testsuite name="amount is larger than or equal to capacity" timestamp="2022-02-04T17:42:41" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="fee is positive" timestamp="2022-02-04T17:42:41" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="1.7480" failures="0">
    <testcase name="Contract: Wrapper mint amount is larger than or equal to capacity fee is positive locks `capacity` ETH in the contract" time="0.0040" classname="locks `capacity` ETH in the contract">
    </testcase>
    <testcase name="Contract: Wrapper mint amount is larger than or equal to capacity fee is positive mints capacity(1-mintFeeRate) sETH into the user’s wallet" time="0.0140" classname="mints capacity(1-mintFeeRate) sETH into the user’s wallet">
    </testcase>
    <testcase name="Contract: Wrapper mint amount is larger than or equal to capacity fee is positive escrows `capacity * mintFeeRate` worth of sUSD as fees" time="0.0140" classname="escrows `capacity * mintFeeRate` worth of sUSD as fees">
    </testcase>
    <testcase name="Contract: Wrapper mint amount is larger than or equal to capacity fee is positive has a capacity of 0 after" time="0.0140" classname="has a capacity of 0 after">
    </testcase>
    <testcase name="Contract: Wrapper mint amount is larger than or equal to capacity fee is positive targetSynthIssued = sETH balance" time="0.0450" classname="targetSynthIssued = sETH balance">
    </testcase>
  </testsuite>
  <testsuite name="fee is negative" timestamp="2022-02-04T17:42:43" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.7120" failures="0">
    <testcase name="Contract: Wrapper mint amount is larger than or equal to capacity fee is negative locks `capacity` WETH in the contract" time="0.0030" classname="locks `capacity` WETH in the contract">
    </testcase>
    <testcase name="Contract: Wrapper mint amount is larger than or equal to capacity fee is negative mints capacity(1+mintFeeRate) sETH into the user’s wallet" time="0.0430" classname="mints capacity(1+mintFeeRate) sETH into the user’s wallet">
    </testcase>
  </testsuite>
  <testsuite name="when capacity = 0" timestamp="2022-02-04T17:42:43" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.3420" failures="0">
    <testcase name="Contract: Wrapper mint when capacity = 0 reverts" time="0.2510" classname="reverts">
    </testcase>
  </testsuite>
  <testsuite name="burn" timestamp="2022-02-04T17:42:44" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the contract has 0 WETH" timestamp="2022-02-04T17:42:44" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.0880" failures="0">
    <testcase name="Contract: Wrapper burn when the contract has 0 WETH reverts" time="0.0650" classname="reverts">
    </testcase>
  </testsuite>
  <testsuite name="when the contract has WETH reserves" timestamp="2022-02-04T17:42:44" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when amount is strictly lower than reserves(1+burnFeeRate)" timestamp="2022-02-04T17:42:44" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="fee is positive" timestamp="2022-02-04T17:42:44" tests="6" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="3.7340" failures="0">
    <testcase name="Contract: Wrapper burn when the contract has WETH reserves when amount is strictly lower than reserves(1+burnFeeRate) fee is positive burns `amount` of sETH from user" time="0.0060" classname="burns `amount` of sETH from user">
    </testcase>
    <testcase name="Contract: Wrapper burn when the contract has WETH reserves when amount is strictly lower than reserves(1+burnFeeRate) fee is positive sends amount(1-burnFeeRate) WETH to user" time="0.0030" classname="sends amount(1-burnFeeRate) WETH to user">
    </testcase>
    <testcase name="Contract: Wrapper burn when the contract has WETH reserves when amount is strictly lower than reserves(1+burnFeeRate) fee is positive escrows `amount * burnFeeRate` worth of sETH as fees" time="0.0420" classname="escrows `amount * burnFeeRate` worth of sETH as fees">
    </testcase>
    <testcase name="Contract: Wrapper burn when the contract has WETH reserves when amount is strictly lower than reserves(1+burnFeeRate) fee is positive increases capacity by `amount - fees` WETH" time="0.0140" classname="increases capacity by `amount - fees` WETH">
    </testcase>
    <testcase name="Contract: Wrapper burn when the contract has WETH reserves when amount is strictly lower than reserves(1+burnFeeRate) fee is positive targetSynthIssued = sETH balance" time="0.0220" classname="targetSynthIssued = sETH balance">
    </testcase>
    <testcase name="Contract: Wrapper burn when the contract has WETH reserves when amount is strictly lower than reserves(1+burnFeeRate) fee is positive emits Burned event" time="0.0030" classname="emits Burned event">
    </testcase>
  </testsuite>
  <testsuite name="fee is negative" timestamp="2022-02-04T17:42:47" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.8900" failures="0">
    <testcase name="Contract: Wrapper burn when the contract has WETH reserves when amount is strictly lower than reserves(1+burnFeeRate) fee is negative burns `amount` of sETH from user" time="0.0030" classname="burns `amount` of sETH from user">
    </testcase>
    <testcase name="Contract: Wrapper burn when the contract has WETH reserves when amount is strictly lower than reserves(1+burnFeeRate) fee is negative sends amount(1+burnFeeRate) WETH to user" time="0.0030" classname="sends amount(1+burnFeeRate) WETH to user">
    </testcase>
  </testsuite>
  <testsuite name="when amount is larger than or equal to reserves(1+burnFeeRate)" timestamp="2022-02-04T17:42:48" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="fee is positive" timestamp="2022-02-04T17:42:48" tests="5" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="8.9690" failures="0">
    <testcase name="Contract: Wrapper burn when the contract has WETH reserves when amount is larger than or equal to reserves(1+burnFeeRate) fee is positive burns `reserves(1+burnFeeRate)` amount of sETH from user" time="0.0030" classname="burns `reserves(1+burnFeeRate)` amount of sETH from user">
    </testcase>
    <testcase name="Contract: Wrapper burn when the contract has WETH reserves when amount is larger than or equal to reserves(1+burnFeeRate) fee is positive sends `reserves` WETH to user" time="0.0030" classname="sends `reserves` WETH to user">
    </testcase>
    <testcase name="Contract: Wrapper burn when the contract has WETH reserves when amount is larger than or equal to reserves(1+burnFeeRate) fee is positive escrows `amount * burnFeeRate` worth of sUSD as fees" time="0.0100" classname="escrows `amount * burnFeeRate` worth of sUSD as fees">
    </testcase>
    <testcase name="Contract: Wrapper burn when the contract has WETH reserves when amount is larger than or equal to reserves(1+burnFeeRate) fee is positive has a max capacity after" time="6.5810" classname="has a max capacity after">
    </testcase>
    <testcase name="Contract: Wrapper burn when the contract has WETH reserves when amount is larger than or equal to reserves(1+burnFeeRate) fee is positive is left with 0 synth issued remaining" time="0.0280" classname="is left with 0 synth issued remaining">
    </testcase>
  </testsuite>
  <testsuite name="fee is negative" timestamp="2022-02-04T17:42:57" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.6000" failures="0">
    <testcase name="Contract: Wrapper burn when the contract has WETH reserves when amount is larger than or equal to reserves(1+burnFeeRate) fee is negative burns `reserves(1-burnFeeRate)` amount of sETH from user" time="0.0050" classname="burns `reserves(1-burnFeeRate)` amount of sETH from user">
    </testcase>
  </testsuite>
  <testsuite name="precision and rounding" timestamp="2022-02-04T17:42:58" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.9820" failures="0">
    <testcase name="Contract: Wrapper burn when the contract has WETH reserves precision and rounding emits a Burn event which burns 0.9 sETH" time="0.0020" classname="emits a Burn event which burns 0.9 sETH">
    </testcase>
  </testsuite>
  <testsuite name="transfer without mint" timestamp="2022-02-04T17:42:59" tests="0" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="before mint or burn" timestamp="2022-02-04T17:42:59" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.1070" failures="0">
    <testcase name="Contract: Wrapper transfer without mint before mint or burn totalIssuedSynths is unaffected" time="0.0060" classname="totalIssuedSynths is unaffected">
    </testcase>
    <testcase name="Contract: Wrapper transfer without mint before mint or burn does not escrow extra" time="0.0090" classname="does not escrow extra">
    </testcase>
  </testsuite>
  <testsuite name="mint after transfer without mint" timestamp="2022-02-04T17:42:59" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.3130" failures="0">
    <testcase name="Contract: Wrapper transfer without mint mint after transfer without mint issues excess for fee pool" time="0.0100" classname="issues excess for fee pool">
    </testcase>
    <testcase name="Contract: Wrapper transfer without mint mint after transfer without mint targetSynthIssued = sETH balance" time="0.0180" classname="targetSynthIssued = sETH balance">
    </testcase>
  </testsuite>
  <testsuite name="burn after transfer without mint" timestamp="2022-02-04T17:43:00" tests="2" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/Wrapper.js" time="0.3330" failures="0">
    <testcase name="Contract: Wrapper transfer without mint burn after transfer without mint issues excess for fee pool" time="0.0140" classname="issues excess for fee pool">
    </testcase>
    <testcase name="Contract: Wrapper transfer without mint burn after transfer without mint targetSynthIssued = sETH balance" time="0.0120" classname="targetSynthIssued = sETH balance">
    </testcase>
  </testsuite>
  <testsuite name="Contract: WrapperFactory" timestamp="2022-02-04T17:43:00" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/WrapperFactory.js" time="0.0000" failures="0">
    <testcase name="Contract: WrapperFactory ensure only expected functions are mutative" time="0.1200" classname="ensure only expected functions are mutative">
    </testcase>
  </testsuite>
  <testsuite name="On deployment of Contract" timestamp="2022-02-04T17:43:09" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/WrapperFactory.js" time="0.1320" failures="0">
    <testcase name="Contract: WrapperFactory On deployment of Contract should set constructor params on deployment" time="0.0130" classname="should set constructor params on deployment">
    </testcase>
    <testcase name="Contract: WrapperFactory On deployment of Contract should access its dependencies via the address resolver" time="0.0130" classname="should access its dependencies via the address resolver">
    </testcase>
    <testcase name="Contract: WrapperFactory On deployment of Contract should not be payable" time="0.0300" classname="should not be payable">
    </testcase>
  </testsuite>
  <testsuite name="createWrapper" timestamp="2022-02-04T17:43:09" tests="1" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/WrapperFactory.js" time="0.0000" failures="0">
    <testcase name="Contract: WrapperFactory createWrapper only owner can invoke" time="0.9470" classname="only owner can invoke">
    </testcase>
  </testsuite>
  <testsuite name="when successfully invoked" timestamp="2022-02-04T17:43:10" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/WrapperFactory.js" time="0.2720" failures="0">
    <testcase name="Contract: WrapperFactory createWrapper when successfully invoked emits new wrapper contract address" time="0.0000" classname="emits new wrapper contract address">
    </testcase>
    <testcase name="Contract: WrapperFactory createWrapper when successfully invoked created wrapper has rebuilt cache" time="0.0650" classname="created wrapper has rebuilt cache">
    </testcase>
    <testcase name="Contract: WrapperFactory createWrapper when successfully invoked registers to isWrapper" time="0.0130" classname="registers to isWrapper">
    </testcase>
  </testsuite>
  <testsuite name="distributeFees" timestamp="2022-02-04T17:43:11" tests="3" file="/Users/noahlitvin/Development/web3/synthetix/test/contracts/WrapperFactory.js" time="0.5280" failures="0">
    <testcase name="Contract: WrapperFactory distributeFees issues sUSD to the feepool" time="0.0110" classname="issues sUSD to the feepool">
    </testcase>
    <testcase name="Contract: WrapperFactory distributeFees records fee paid" time="0.0070" classname="records fee paid">
    </testcase>
    <testcase name="Contract: WrapperFactory distributeFees feesEscrowed = 0" time="0.0120" classname="feesEscrowed = 0">
    </testcase>
  </testsuite>
</testsuites>